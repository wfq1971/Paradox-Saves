

// === Shader Info === 

// Shader file: gfx/FX/pdxverticalborder.shader
// Effect: legend_vertical_border



// === Defines === 

#define PDX_DIRECTX_11
#define PIXEL_SHADER
#define PDX_HLSL
#define VENDOR_NVIDIA
#define PDX_BORDER_UV1
#define PDX_BORDER_UV2
#define PDX_MAX_HEIGHTMAP_COMPRESS_LEVELS 5
#define JOMINI_REFRACTION_ENABLED
#define PDX_WINDOWS


// === HLSL Macros === 

#define PDX_POSITION SV_Position
#define PDX_COLOR SV_Target
#define PDX_COLOR0 SV_Target0
#define PDX_COLOR0_SRC1 SV_Target1 // Use this when doing dual source blending, currently only supports that for render target #0
#define PDX_COLOR1 SV_Target1
#define PDX_COLOR2 SV_Target2
#define PDX_COLOR3 SV_Target3
#define PDX_COLOR4 SV_Target4
#define PDX_COLOR5 SV_Target5
#define PDX_COLOR6 SV_Target6
#define PDX_COLOR7 SV_Target7
#define PDX_VertexID SV_VertexID
#define PDX_InstanceID SV_InstanceID
#define PDX_DispatchThreadID SV_DispatchThreadID
#define PDX_GroupThreadID SV_GroupThreadID
#define PDX_GroupID SV_GroupID
#define PDX_GroupIndex SV_GroupIndex
#define PDX_TessFactor SV_TessFactor
#define PDX_InsideTessFactor SV_InsideTessFactor
#define PDX_OutputControlPointID SV_OutputControlPointID
#define PDX_DomainLocation SV_DomainLocation
#define PDX_RenderTargetArrayIndex SV_RenderTargetArrayIndex
#define PDX_ViewportArrayIndex SV_ViewportArrayIndex

#define PdxDomainTypeTriangle "tri"
#define PdxDomainTypeQuad "quad"
#define PdxDomainTypeIsoline "isoline"

#define PdxPartitioningModeInteger "integer"
#define PdxPartitioningModeFractionalEven "fractional_even"
#define PdxPartitioningModeFractionalOdd "fractional_odd"

#define PdxPrimitiveTypePoint point
#define PdxPrimitiveTypeLine line
#define PdxPrimitiveTypeTriangle triangle
#define PdxPrimitiveTypeLineAdjacency lineadj
#define PdxPrimitiveTypeTriangleAdjacency triangleadj

#define PdxTessellatorOutputTopologyPoint "point"
#define PdxTessellatorOutputTopologyLine "line"
#define PdxTessellatorOutputTopologyTriangleCw "triangle_cw"
#define PdxTessellatorOutputTopologyTriangleCcw "triangle_ccw"

#define PdxMeshShaderOutputTopologyLine "line"
#define PdxMeshShaderOutputTopologyTriangle "triangle"

#define mod( X, Y ) ( (X) % (Y) )

float2x2 Create2x2( in float2 x, in float2 y )
{
	return transpose( float2x2( x, y ) );
}
// TODO, Create3x3 should be transposed in hlsl, and not in glsl, and then the mul() arguments should be reversed
#define Create3x3 float3x3
float4x4 Create4x4( in float4 x, in float4 y, in float4 z, in float4 w )
{
	return transpose( float4x4( x, y, z, w ) );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}

#define lessThan( a, b ) ( (a) < (b) )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct PdxTextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
struct PdxTextureSampler2DMS
{
    Texture2DMS<float4>		_Texture;
};

struct PdxTextureSampler2DArray
{
    Texture2DArray	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler3D
{
    Texture3D 		_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler2DCmp
{
    Texture2D 				_Texture;
    SamplerComparisonState 	_Sampler;
};

// These are for separate Texture/Sampler objects
#define PdxSampleTex2D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex2DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )
#define PdxSampleTex2DGrad(tex,samp,uv,ddx,ddy) (tex).SampleGrad( (samp), (uv), (ddx), (ddy) )
#define PdxSampleTex2DGather(tex,samp,uv) (tex).Gather( (samp), (uv) )

#define PdxSampleTex3D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex3DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )

#define PdxTexture2DSize(tex,size) (tex).GetDimensions( (size).x, (size).y )
#define PdxTexture2DLoad(tex,uv,lod) (tex).Load( int3((uv), (lod)) )

#define PdxTexture2DArraySize(tex,size,elements) (tex).GetDimensions( (size).x, (size).y, elements )

#define PdxTexture3DSize(tex,size) (tex).GetDimensions( (size).x, (size).y, (size).z )
#define PdxTexture3DLoad(tex,uv,lod) (tex).Load( int4((uv), (lod)) )

// These are for the combined TextureSampler objects
#define PdxTex2DSize(samp,size) PdxTexture2DSize( (samp)._Texture, (size) )
#define PdxTex2D(samp,uv) PdxSampleTex2D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLod(samp,uv,lod) PdxSampleTex2DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex2DLodOffset(samp,uv,lod,offset) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod), (offset) )
#define PdxTex2DBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )
#define PdxTex2DGrad(samp,uv,ddx,ddy) PdxSampleTex2DGrad( (samp)._Texture, (samp)._Sampler, (uv), (ddx), (ddy) )
#define PdxTex2DGather(samp,uv) PdxSampleTex2DGather( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLoad(samp,uv,lod) PdxTexture2DLoad( (samp)._Texture, (uv), (lod) )
#define PdxTex2DMultiSampled(samp,texelcoord,sampleidx) (samp)._Texture.Load( (texelcoord), (sampleidx) )
#define PdxTex2DMSSize(samp,size,samples) (samp)._Texture.GetDimensions( (size).x, (size).y, (samples) )

#define PdxTex3D(samp,uv) PdxSampleTex3D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex3DLod(samp,uv,lod) PdxSampleTex3DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex3DLoad(samp,uv,lod) PdxTexture3DLoad( (samp)._Texture, (uv), (lod) )

#define PdxTexCube(samp,uv) (samp)._Texture.Sample( (samp)._Sampler, (uv) )
#define PdxTexCubeLod(samp,uv,lod) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod) )
#define PdxTexCubeBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )

#define PdxTex2DCmpLod0(samp,uv,value) (samp)._Texture.SampleCmpLevelZero( (samp)._Sampler, (uv), (value) )

// Vulkan fails to compile shaders with this function call properly
// Commenting it out until we can fix this issue
//#define PdxCalculateLod(samp,uv) (samp)._Texture.CalculateLevelOfDetail( (samp)._Sampler, (uv) )

float4x4 FixProjection( float4x4 ProjectionMatrix )
{
	// Enable for "debug" drawing to see if some objects is missing fix
	#if 0
	for ( int i = 0; i < 4; ++i )
	{
		GetMatrixData( ProjectionMatrix, 0, i ) *= 0.5;
		GetMatrixData( ProjectionMatrix, 1, i ) *= 0.5;
	}
	#endif
	
	return ProjectionMatrix;
}

#define PdxBufferFloat  Buffer<float>
#define PdxBufferFloat2	Buffer<float2>
#define PdxBufferFloat3	Buffer<float3>
#define PdxBufferFloat4	Buffer<float4>
#define PdxBufferInt  	Buffer<int>
#define PdxBufferInt2	Buffer<int2>
#define PdxBufferInt3	Buffer<int3>
#define PdxBufferInt4	Buffer<int4>
#define PdxBufferUint   Buffer<uint>
#define PdxBufferUint2	Buffer<uint2>
#define PdxBufferUint3	Buffer<uint3>
#define PdxBufferUint4	Buffer<uint4>

#define PdxStructuredBuffer StructuredBuffer
#define PdxRWStructuredBuffer RWStructuredBuffer
#define PdxRasterizerOrderedBuffer RasterizerOrderedBuffer
#define PdxRasterizerOrderedStructuredBuffer RasterizerOrderedStructuredBuffer

float 	PdxReadBuffer( in PdxBufferFloat Buf, int Index )  		{ return Buf.Load( Index ); }
float2	PdxReadBuffer2( in PdxBufferFloat2 Buf, int Index )		{ return Buf.Load( Index ); }
float3	PdxReadBuffer3( in PdxBufferFloat3 Buf, int Index )		{ return Buf.Load( Index ); }
float4	PdxReadBuffer4( in PdxBufferFloat4 Buf, int Index )		{ return Buf.Load( Index ); }

int  	PdxReadBuffer( in PdxBufferInt Buf, int Index ) 		{ return Buf.Load( Index ); }
int2 	PdxReadBuffer2( in PdxBufferInt2 Buf, int Index )		{ return Buf.Load( Index ); }
int3 	PdxReadBuffer3( in PdxBufferInt3 Buf, int Index )    	{ return Buf.Load( Index ); }
int4 	PdxReadBuffer4( in PdxBufferInt4 Buf, int Index )    	{ return Buf.Load( Index ); }

uint  	PdxReadBuffer( in PdxBufferUint Buf, int Index )    	{ return Buf.Load( Index ); }
uint2 	PdxReadBuffer2( in PdxBufferUint2 Buf, int Index )  	{ return Buf.Load( Index ); }
uint3 	PdxReadBuffer3( in PdxBufferUint3 Buf, int Index )  	{ return Buf.Load( Index ); }
uint4 	PdxReadBuffer4( in PdxBufferUint4 Buf, int Index )  	{ return Buf.Load( Index ); }

#define PdxReadRWBuffer(buffer,index) (buffer)[(index)]
#define PdxWriteRWBuffer(buffer,index,value) (buffer)[(index)] = (value)

#define UINT16_MAX 0xffff
#define PI 3.14159265359

float2x2 Create2x2( float a, float b, float c, float d ) { return Create2x2( float2( a, b ), float2( c, d ) ); }

#define PdxSampleTex2DLod0(tex,samp,uv) PdxSampleTex2DLod( (tex), (samp), (uv), 0 )

#define PdxTexture2DLoad0(tex,uv) PdxTexture2DLoad( (tex), (uv), 0 )

#define PdxTex2DProj(samp,uv_proj) PdxTex2DLod0( (samp), (uv_proj).xy / (uv_proj).w )
#define PdxTex2DLod0(samp,uv) PdxTex2DLod( (samp), (uv), 0 )
#define PdxTex2DLod0Offset(samp,uv,offset) PdxTex2DLodOffset( (samp), (uv), 0, (offset) )
#define PdxTex2DLoad0(samp,uv) PdxTex2DLoad( (samp), (uv), 0 )

#define PdxTex3DLod0(samp,uv) PdxTex3DLod( (samp), (uv), 0 )
#define PdxTex3DLoad0(samp,uv) PdxTex3DLoad( (samp), (uv), 0 )

float4 FixProjectionAndMul( float4x4 ProjectionMatrix, float4 Vector )
{
	return mul( FixProjection( ProjectionMatrix ), Vector );
}



// === Vertex Structs === 

struct VS_INPUT_PDX_BORDER
{
	float3 Position : POSITION;
	float Extrusion : TEXCOORD0;
	float DistanceToStart : TEXCOORD1;
	float DistanceToEnd : TEXCOORD2;
	float2 UV : TEXCOORD3;
};
struct VS_OUTPUT_PDX_BORDER
{
	float4 Position : PDX_POSITION;
	float3 WorldSpacePos : TEXCOORD0;
	float DistanceToStart : TEXCOORD1;
	float DistanceToEnd : TEXCOORD2;
	float2 UV0 : TEXCOORD3;
#ifdef PDX_BORDER_UV1
	float2 UV1 : TEXCOORD4;
#endif
#ifdef PDX_BORDER_UV2
	float2 UV2 : TEXCOORD5;
#endif
#ifdef PDX_BORDER_UV3
	float2 UV3 : TEXCOORD6;
#endif
};
struct VS_INPUT_WATER
{
	int2 Position : POSITION;
};
struct VS_OUTPUT_WATER
{
	float4 Position : PDX_POSITION;
	float3 WorldSpacePos : TEXCOORD0;
	float2 UV01 : TEXCOORD1;
};


// === Constant Buffers === 

cbuffer pdx_hlsl_cb9
{
	float2 FogOfWarAlphaMapSize;
	float2 InverseWorldSize;
	float2 FogOfWarPatternSpeed;
	float FogOfWarPatternStrength;
	float FogOfWarPatternTiling;
	float FogOfWarTime;
	float FogOfWarAlphaMin;
}
cbuffer pdx_hlsl_cb53
{
	float4x4 ViewProjectionMatrix;
	float4x4 InvViewProjectionMatrix;
	float4x4 ViewMatrix;
	float4x4 InvViewMatrix;
	float4x4 ProjectionMatrix;
	float4x4 InvProjectionMatrix;
	float4x4 ShadowMapTextureMatrix;
	float3 CameraPosition;
	float ZNear;
	float3 CameraLookAtDir;
	float ZFar;
	float3 CameraUpDir;
	float CameraFoV;
	float3 CameraRightDir;
	float _UpscaleLodBias;
	float _UpscaleLodBiasNative;
	float _UpscaleLodBiasMultiplier;
	float _UpscaleLodBiasMultiplierNative;
	float _UpscaleLodBiasEnabled;
}
cbuffer pdx_hlsl_cb37
{
	float3 Scale;
	float Padding;
	float2 UVSpeed0;
	float2 UVSpeed1;
	float2 UVSpeed2;
	float2 UVSpeed3;
	float2 UVScale0;
	float2 UVScale1;
	float2 UVScale2;
	float2 UVScale3;
}
cbuffer pdx_hlsl_cb38
{
	float Alpha;
	float3 Color;
}
cbuffer pdx_hlsl_cb39
{
	float VerticalBordersTime;
	float HeightOffset;
}
cbuffer pdx_hlsl_cb17
{
	float3 AmbientPosX;
	float CubemapIntensity;
	float3 AmbientNegX;
	float3 AmbientPosY;
	float3 AmbientNegY;
	float3 AmbientPosZ;
	float3 AmbientNegZ;
	float3 ShadowAmbientPosX;
	float3 ShadowAmbientNegX;
	float3 ShadowAmbientPosY;
	float3 ShadowAmbientNegY;
	float3 ShadowAmbientPosZ;
	float3 ShadowAmbientNegZ;
	float FogMax;
	float3 SunDiffuse;
	float SunIntensity;
	float3 ToSunDir;
	float FogBegin2;
	float3 FogColor;
	float FogEnd2;
	float4x4 CubemapYRotation;
	float TreeSwayLoopSpeed;
	float TreeSwayWindStrengthSpatialModifier;
	float TreeSwaySpeed;
	float TreeSwayWindClusterSizeModifier;
	float3 TreeSwayWorldDirection;
	float TreeHeightImpactOnSway;
	float TreeSwayScale;
}
cbuffer pdx_hlsl_cb11
{
	float2 _ScreenResolution;
	float _WaterReflectionNormalFlatten;
	float _WaterZoomedInZoomedOutFactor;
	float3 _WaterToSunDir;
	float _WaterDiffuseMultiplier;
	float3 _WaterColorShallow;
	float _WaterSpecular;
	float3 _WaterColorDeep;
	float _WaterSpecularFactor;
	float3 _WaterColorMapTint;
	float _WaterColorMapTintFactor;
	float _WaterGlossScale;
	float _WaterGlossBase;
	float _WaterFresnelBias;
	float _WaterFresnelPow;
	float _WaterCubemapIntensity;
	float _WaterFoamScale;
	float _WaterFoamDistortFactor;
	float _WaterFoamShoreMaskDepth;
	float _WaterFoamShoreMaskSharpness;
	float _WaterFoamNoiseScale;
	float _WaterFoamNoiseSpeed;
	float _WaterFoamStrength;
	float _WaterRefractionScale;
	float _WaterRefractionShoreMaskDepth;
	float _WaterRefractionShoreMaskSharpness;
	float _WaterRefractionFade;
	float2 _WaterWave1Scale;
	float _WaterWave1Rotation;
	float _WaterWave1Speed;
	float2 _WaterWave2Scale;
	float _WaterWave2Rotation;
	float _WaterWave2Speed;
	float2 _WaterWave3Scale;
	float _WaterWave3Rotation;
	float _WaterWave3Speed;
	float _WaterWave1NormalFlatten;
	float _WaterWave2NormalFlatten;
	float _WaterWave3NormalFlatten;
	float _WaterFlowTime;
	float2 _WaterFlowMapSize;
	float _WaterFlowNormalScale;
	float _WaterFlowNormalFlatten;
	float _WaterHeight;
	float _WaterFadeShoreMaskDepth;
	float _WaterFadeShoreMaskSharpness;
	float _WaterSeeThroughDensity;
	float _WaterSeeThroughShoreMaskDepth;
	float _WaterSeeThroughShoreMaskSharpness;
}
cbuffer pdx_hlsl_cb4
{
	float2 MapSize;
	float GlobalTime;
	float FlatMapHeight;
	float FlatMapLerp;
	float MapHighlightIntensity;
	float SnowHighlightIntensity;
	int HasFlatMapLightingEnabled;
}
cbuffer pdx_hlsl_cb8
{
	float2 IndirectionMapSize;
	float2 InvIndirectionMapSize;
	float2 GradientTextureSize;
	float2 InvGradientTextureSize;
	float2 SecondaryProvinceColorsOffset;
	float2 HighlightProvinceColorsOffset;
	float2 AlternateProvinceColorsOffset;
}
cbuffer pdx_hlsl_cb7
{
	float GB_GradientAlphaInside;
	float GB_GradientAlphaOutside;
	float GB_GradientWidth;
	float GB_GradientColorMul;
	float GB_EdgeWidth;
	float GB_EdgeSmoothness;
	float GB_EdgeAlpha;
	float GB_EdgeColorMul;
	float GB_PreLightingBlend;
	float GB_PostLightingBlend;
}


// === Samplers === 

SamplerState _sampler_0_ : register(s0);
SamplerState _sampler_1_ : register(s1);
SamplerState _sampler_2_ : register(s2);
SamplerState _sampler_3_ : register(s3);


// === Textures === 

Texture2D FogOfWarAlpha_Texture;
static PdxTextureSampler2D FogOfWarAlpha = { FogOfWarAlpha_Texture, _sampler_0_ };
Texture2D BorderTexture0_Texture;
static PdxTextureSampler2D BorderTexture0 = { BorderTexture0_Texture, _sampler_0_ };
Texture2D BorderTexture1_Texture;
static PdxTextureSampler2D BorderTexture1 = { BorderTexture1_Texture, _sampler_0_ };
Texture2D BorderTexture2_Texture;
static PdxTextureSampler2D BorderTexture2 = { BorderTexture2_Texture, _sampler_0_ };
Texture2D BorderTexture3_Texture;
static PdxTextureSampler2D BorderTexture3 = { BorderTexture3_Texture, _sampler_0_ };
Texture2D ProvinceColorIndirectionTexture_Texture;
static PdxTextureSampler2D ProvinceColorIndirectionTexture = { ProvinceColorIndirectionTexture_Texture, _sampler_1_ };
Texture2D ProvinceColorTexture_Texture;
static PdxTextureSampler2D ProvinceColorTexture = { ProvinceColorTexture_Texture, _sampler_2_ };
Texture2D BorderDistanceFieldTexture_Texture;
static PdxTextureSampler2D BorderDistanceFieldTexture = { BorderDistanceFieldTexture_Texture, _sampler_3_ };


// === RW Textures === 



// === Buffer Textures === 

PdxBufferUint LegendMaskBuffer;


// === RW Buffer Textures === 



// === Shader Code === 

float CalcViewSpaceDepth( float Depth )
{
	Depth = 2.0 * Depth - 1.0;
	float ZLinear = 2.0 * ZNear * ZFar / (ZFar + ZNear - Depth * (ZFar - ZNear));
	return ZLinear;
}

float3 ViewSpacePosFromDepth( float Depth, float2 UV )
{
	float x = UV.x * 2.0 - 1.0;
	float y = (1.0 - UV.y) * 2.0 - 1.0;
	
	float4 ProjectedPos = float4( x, y, Depth, 1.0 );
	
	float4 ViewSpacePos = mul( InvProjectionMatrix, ProjectedPos );
	
	return ViewSpacePos.xyz / ViewSpacePos.w;
}

float3 WorldSpacePositionFromDepth( float Depth, float2 UV )
{
	float3 WorldSpacePos = mul( InvViewMatrix, float4( ViewSpacePosFromDepth( Depth, UV ), 1.0 ) ).xyz;		
	return WorldSpacePos;  
}
float3 ScaleAndExtrudePosition( float3 InputPosition, float Extrusion )
{
	float3 Position = InputPosition * float3( Scale.x, 1.0, Scale.z );
	float ExtrusionFactor = Scale.y * Extrusion;
	Position.y += HeightOffset + ExtrusionFactor + abs( ExtrusionFactor );
	
	return Position;
}
float2 ScaleAndAnimateUV( float2 UV, float2 UVScale, float2 UVSpeed )
{
	return UV * UVScale + UVSpeed * VerticalBordersTime;
}
float CalculateDistanceFogFactor( float3 WorldSpacePos )
{
	float3 Diff = CameraPosition - WorldSpacePos;
	float vFogFactor = 1.0 - abs( normalize( Diff ).y ); // abs b/c of reflections
	float vSqDistance = dot( Diff, Diff );

	float vMin = min( ( vSqDistance - FogBegin2 ) / ( FogEnd2 - FogBegin2 ), FogMax );
	return saturate( vMin * vFogFactor );
}

float3 ApplyDistanceFog( float3 Color, float vFogFactor )
{
	return lerp( Color, FogColor, vFogFactor );
}

float3 ApplyDistanceFog( float3 Color, float3 WorldSpacePos )
{
	return ApplyDistanceFog( Color, CalculateDistanceFogFactor( WorldSpacePos ) );
}
// Gamma correction utility
float ToGamma(float aLinear)
{
	return pow(aLinear, 1.0/2.2);
}
float3 ToGamma(float3 aLinear)
{
	return pow(aLinear, vec3(1.0/2.2));
}
float ToLinear(float aGamma)
{
	return pow(aGamma, 2.2);
}
float3 ToLinear(float3 aGamma)
{
	return pow(aGamma, vec3(2.2));
}
float4 ToLinear(float4 aGamma)
{
	return float4(pow(aGamma.rgb, vec3(2.2)), aGamma.a);
}

// Color value conversions
float3 RGBtoHSV( float3 RGB )
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = RGB.g < RGB.b ? float4(RGB.bg, K.wz) : float4(RGB.gb, K.xy);
	float4 q = RGB.r < p.x ? float4(p.xyw, RGB.r) : float4(RGB.r, p.yzx);

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x );
}
float3 HSVtoRGB( float3 HSV )
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs( frac(HSV.xxx + K.xyz) * 6.0 - K.www );
	return HSV.z * lerp( K.xxx, clamp(p - K.xxx, 0.0, 1.0), HSV.y );
}
float3 HSVtoRGB( float H, float S, float V )
{
	return HSVtoRGB( float3( H, S, V ) );
}
float4 RGBtoHSV( float4 RGBa )
{
	return float4( RGBtoHSV( RGBa.rgb ), RGBa.a );
}
float4 HSVtoRGB( float4 HSVa )
{
	return float4( HSVtoRGB( HSVa.xyz ), HSVa.a );
}
float4 HSVtoRGB( float H, float S, float V, float a )
{
	return HSVtoRGB( float4( H, S, V, a ) );
}

// Below are multiple blend mode utilities (See: https://en.wikipedia.org/wiki/Blend_modes)
// Most of these uses a typical implementation unless stated otherwise

// Multiply blend mode
float3 Multiply( float3 Base, float3 Blend, float Opacity )
{
	return Base * Blend * Opacity + Base * ( 1.0 - Opacity );
}

// Overlay blend mode
float Overlay( float Base, float Blend )
{
	return (Base < 0.5) ? (2.0 * Base * Blend) : (1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend));
}
float3 Overlay( float3 Base, float3 Blend )
{
	return float3( Overlay(Base.r, Blend.r), Overlay(Base.g, Blend.g), Overlay(Base.b, Blend.b) );
}
float Overlay( float Base, float Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 Overlay( float3 Base, float3 Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 GetOverlay( float3 Color, float3 OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}
float GetOverlay( float Color, float OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}

// Color dodge blend mode (Dodge and burn)
float ColorDodge( float Base, float Blend )
{
	return (Blend == 1.0) ? Blend : min( Base / (1.0 - Blend), 1.0 );
}
float3 ColorDodge( float3 Base, float3 Blend )
{
	return float3( ColorDodge(Base.r, Blend.r), ColorDodge(Base.g, Blend.g), ColorDodge(Base.b, Blend.b) );
}
float3 ColorDodge( float3 Base, float3 Blend, float Opacity )
{
	return ColorDodge( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Pegtop's SoftLight blend formula
float SoftLight( float Base, float Blend )
{
	return ( 1 - 2 * Blend ) * Base * Base + 2 * Base * Blend;
}
float3 SoftLight( float3 Base, float3 Blend )
{
	return float3( SoftLight( Base.r, Blend.r ), SoftLight( Base.g, Blend.g ), SoftLight( Base.b, Blend.b ) );
}
float SoftLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}
float3 SoftLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}

// Hardlight blend mode
float HardLight(float Base, float Blend)
{
	return Blend >= 0.5 ? 1.0 - 2 * ( 1.0 - Blend ) * ( 1.0 - Base ) : 2.0 * Base * Blend;
}
float3 HardLight( float3 Base, float3 Blend )
{
	return float3( HardLight( Base.r, Blend.r ), HardLight( Base.g, Blend.g ), HardLight( Base.b, Blend.b ) );
}
float HardLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}
float3 HardLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}

// Simple arithmetic blend modes (See: https://en.wikipedia.org/wiki/Blend_modes#Simple_arithmetic_blend_modes)
// Lighten only blend mode
float3 Add( float3 Base, float3 Blend, float Opacity )
{
	return ( Base + Blend ) * Opacity + Base * ( 1.0 - Opacity );
}
float Lighten( float Base, float Blend )
{
	return max( Base, Blend );
}
float3 Lighten( float3 Base, float3 Blend )
{
	return float3( Lighten(Base.r, Blend.r), Lighten(Base.g, Blend.g), Lighten(Base.b, Blend.b) );
}
float3 Lighten( float3 Base, float3 Blend, float Opacity )
{
	return Lighten( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Darken only blend mode
float Darken( float Base, float Blend )
{
	return min( Base, Blend );
}
float3 Darken( float3 Base, float3 Blend )
{
	return float3( Darken(Base.r, Blend.r), Darken(Base.g, Blend.g), Darken(Base.b, Blend.b) );
}
float3 Darken( float3 Base, float3 Blend, float Opacity )
{
	return Darken( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

float3 Levels( float3 vInColor, float3 vMinInput, float3 vMaxInput )
{
	float3 vRet = saturate( vInColor - vMinInput );
	vRet /= vMaxInput - vMinInput;
	return saturate( vRet );
}
float Levels( float vInValue, float vMinValue, float vMaxValue )
{
	return saturate( ( vInValue - vMinValue ) / ( vMaxValue - vMinValue ) );
}

// Intuitive way to dynamically grow and shrink masks, similar to Histogram Scan in Substance Designer.
// vInValue is typically a mask texture, vPosition is the value to be remapped to 0.5, vRange is the softness of that remap.
float LevelsScan( float vInValue, float vPosition, float vRange )
{
	return Levels( vInValue, vPosition - ( vRange / 2 ), vPosition + ( vRange / 2 ) );
}

float3 UnpackNormal( float4 NormalMapSample )
{
	float3 vNormalSample = NormalMapSample.rgb - 0.5;
	vNormalSample.g = -vNormalSample.g;
	return vNormalSample;
}

float3 UnpackNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackNormal( PdxTex2D( NormalTex, uv ) );
}

float3 UnpackRRxGNormal( float4 NormalMapSample )
{
	float x = NormalMapSample.g * 2.0 - 1.0;
	float y = NormalMapSample.a * 2.0 - 1.0;
	y = -y;
	float z = sqrt( saturate( 1.0 - x * x - y * y ) );
	return float3( x, y, z );
}

float3 UnpackRRxGNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackRRxGNormal( PdxTex2D( NormalTex, uv ) );
}

float3 ReorientNormal( float3 BaseNormal, float3 DetailNormal )
{
	float3 t = BaseNormal + float3( 0.0, 0.0, 1.0 );
	float3 u = DetailNormal * float3( -1.0, -1.0, 1.0 );
	float3 Normal = normalize( t * dot( t, u ) - u * t.z );
	return Normal;
}

float Fresnel( float NdotL, float FresnelBias, float FresnelPow )
{
	return saturate( FresnelBias + (1.0 - FresnelBias) * pow( 1.0 - NdotL, FresnelPow ) );
}

static const uint BITS_IN_BYTE = 8;
static const uint UINT_8_MAX = 255;
static const uint UINT_16_MAX = 65535;

float Unpack16BitUnorm( in uint Value )
{
	return float( Value ) / UINT_16_MAX;
}

bool UnpackBitAt( in uint Byte, in uint BitIndex )
{
	return ( ( 1 << BitIndex ) & Byte ) != 0;
}

// Unpack the lower 16 bits into the high and low order byte vector
uint2 Unpack16BitToBytes( in uint Value )
{
	return uint2( Value & UINT_8_MAX, ( Value >> 8 ) & UINT_8_MAX );
}

uint4 Unpack32BitToBytes( in uint Value )
{
	return uint4(
		Value & UINT_8_MAX,
		( Value >> 8 ) & UINT_8_MAX,
		( Value >> 16 ) & UINT_8_MAX,
		( Value >> 24 ) & UINT_8_MAX
	);
}

#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * ( (Value - OldMin) / (OldMax - OldMin) )
float Remap( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 Remap( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 Remap( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * saturate( (Value - OldMin) / (OldMax - OldMin) )
float RemapClamped( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 RemapClamped( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 RemapClamped( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
// These macros can be used as drop in replacements for their counterparts without the "Upscale" postfix.
// They will take care of using the correct lod bias when sampling the textures to account for rendering happening in lower resolution. (See https://gsg.pages.build.paradox-interactive.com/tech/cw/develop/clausewitz/pdx_gfx/upscaling/ for more information)
// Note that by default when using upscaling it will add an extra -1 lod bias, this is to try and boost the quality a bit, it works because the temporal anti aliasing component can take care of some of the aliasing artifacts that is introduced by the lod bias.
// This might not always be preferrable, in those cases the "UpscaleBias" postfix versions can be used to undo the extra lod bias, the provided bias should most likely be in the range (0.0, 1.0), for example doing PdxTex2DUpscaleBias( Tex, Uv, 1.0 ) will net you the same texture quality you would get rendering in native resolution.
// There is also a "UpscaleNative" that is basically the same as UpscaleBias with bias 1.0, but slightly more optimized.

#ifdef PDX_UPSCALING_ENABLED
	float2 ApplyUpscaleLodBiasMultiplier( float2 Derivative ) { return Derivative * _UpscaleLodBiasMultiplier; }
	float2 ApplyUpscaleNativeLodBiasMultiplier( float2 Derivative ) { return Derivative * _UpscaleLodBiasMultiplierNative; }
	
	#define PdxTex2DUpscale( TextureSampler, Uv ) PdxTex2DBias( (TextureSampler), (Uv), _UpscaleLodBias )
	#define PdxTex2DUpscaleNative( TextureSampler, Uv ) PdxTex2DBias( (TextureSampler), (Uv), _UpscaleLodBiasNative )
	#define PdxTex2DUpscaleBias( TextureSampler, Uv, Bias ) PdxTex2DBias( (TextureSampler), (Uv), (_UpscaleLodBias + (Bias) * _UpscaleLodBiasEnabled) )
	
	#define PdxTex2DGradUpscale( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleLodBiasMultiplier( Ddx ), ApplyUpscaleLodBiasMultiplier( Ddy ) )
	#define PdxTex2DGradUpscaleNative( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleNativeLodBiasMultiplier( Ddx ), ApplyUpscaleNativeLodBiasMultiplier( Ddy ) )
	#define PdxTex2DGradUpscaleBias( TextureSampler, Uv, Ddx, Ddy, Bias ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleLodBiasMultiplier( Ddx ) * exp2( (Bias) * _UpscaleLodBiasEnabled ), ApplyUpscaleLodBiasMultiplier( Ddy ) * exp2( (Bias) * _UpscaleLodBiasEnabled ) )
#else
	float2 ApplyUpscaleLodBiasMultiplier( float2 Derivative ) { return Derivative; }
	float2 ApplyUpscaleNativeLodBiasMultiplier( float2 Derivative ) { return Derivative; }
	
	#define PdxTex2DUpscale( TextureSampler, Uv ) PdxTex2D( (TextureSampler), (Uv) )
	#define PdxTex2DUpscaleNative( TextureSampler, Uv ) PdxTex2D( (TextureSampler), (Uv) )
	// We intentionally discard the Bias argument here since that is used to tweak the upscale added lodbias
	#define PdxTex2DUpscaleBias( TextureSampler, Uv, Bias ) PdxTex2D( (TextureSampler), (Uv) )
	
	#define PdxTex2DGradUpscale( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
	#define PdxTex2DGradUpscaleNative( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
	// We intentionally discard the Bias argument here since that is used to tweak the upscale added lodbias
	#define PdxTex2DGradUpscaleBias( TextureSampler, Uv, Ddx, Ddy, Bias ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
#endif
int SampleProvinceId( float2 Coord, PdxTextureSampler2D IndirectionMap )
{
	const float2 Normalized = PdxTex2D( IndirectionMap, Coord ).rg;
	const int2 Absolute = int2( Normalized * 255.0 + 0.5 );
	return int( Absolute.x + Absolute.y * 256.0 );
}

float4 ColorSample( float2 Coord, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap )
{
	float2 ColorIndex = PdxTex2D( IndirectionMap, Coord ).rg;
	return PdxTex2DLoad0( ColorMap, int2( ColorIndex * 255.0 + vec2(0.5f) ) );
}

float4 ColorSampleAtOffset( float2 Coord, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap, float2 Offset )
{
	float2 ColorIndex = PdxTex2D( IndirectionMap, Coord ).rg;
	return PdxTex2DLoad0( ColorMap, int2( ColorIndex * 255.0 + vec2(0.5) + ( Offset ) ) );
}
    
float4 BilinearColorSample( float2 Coord, float2 TextureSize, float2 InvTextureSize, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap )
{
	float2 Pixel = Coord * TextureSize + 0.5;
	
	float2 FracCoord = frac(Pixel);
	Pixel = floor(Pixel) / TextureSize - InvTextureSize / 2.0;

	float4 C11 = ColorSample( Pixel, IndirectionMap, ColorMap );
	float4 C21 = ColorSample( Pixel + float2( InvTextureSize.x, 0.0), IndirectionMap, ColorMap );
	float4 C12 = ColorSample( Pixel + float2( 0.0, InvTextureSize.y), IndirectionMap, ColorMap );
	float4 C22 = ColorSample( Pixel + InvTextureSize, IndirectionMap, ColorMap );

	float4 x1 = lerp(C11, C21, FracCoord.x);
	float4 x2 = lerp(C12, C22, FracCoord.x);
	return lerp(x1, x2, FracCoord.y);
}

float4 BilinearColorSampleAtOffset( float2 Coord, float2 TextureSize, float2 InvTextureSize, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap, float2 TextureOffset )
{
	float2 Pixel = ( Coord * TextureSize + 0.5 );
	
	float2 FracCoord = frac(Pixel);
	Pixel = floor(Pixel) / TextureSize - InvTextureSize / 2.0;

	float4 C11 = ColorSampleAtOffset( Pixel, IndirectionMap, ColorMap, TextureOffset );
	float4 C21 = ColorSampleAtOffset( Pixel + float2( InvTextureSize.x, 0.0), IndirectionMap, ColorMap, TextureOffset );
	float4 C12 = ColorSampleAtOffset( Pixel + float2( 0.0, InvTextureSize.y), IndirectionMap, ColorMap, TextureOffset );
	float4 C22 = ColorSampleAtOffset( Pixel + InvTextureSize, IndirectionMap, ColorMap, TextureOffset );

	float4 x1 = lerp(C11, C21, FracCoord.x);
	float4 x2 = lerp(C12, C22, FracCoord.x);
	return lerp(x1, x2, FracCoord.y);
}


float CalculateStripeMask( in float2 UV, float Offset )
{
	// diagonal
	float t = 3.14159 / 8.0;
	float w = 12000;			  // larger value gives smaller width
	
	float StripeMask = cos( ( UV.x * cos( t ) * w ) + ( UV.y * sin( t ) * w ) + Offset ); 
	StripeMask = smoothstep(0.0, 1.0, StripeMask * 2.2f );
	return StripeMask;
}	

void ApplyDiagonalStripes( inout float3 BaseColor, float3 StripeColor, float StripeAlpha, float2 WorldSpacePosXZ )
{
	float Mask = CalculateStripeMask( WorldSpacePosXZ, 0.f );
	float OffsetMask = CalculateStripeMask( WorldSpacePosXZ, -0.5f );
	float Shadow = 1 - saturate( Mask - OffsetMask ) ;
	Mask *= StripeAlpha;
	BaseColor = lerp( BaseColor, BaseColor * Shadow, StripeAlpha );
	BaseColor = lerp( BaseColor, StripeColor.rgb, Mask );
}

void ApplyDiagonalStripes( inout float4 BaseColor, float4 StripeColor, float ShadowAmount, float2 WorldSpacePosXZ )
{
	float Mask = CalculateStripeMask( WorldSpacePosXZ, 0.0f );
	float OffsetMask = CalculateStripeMask( WorldSpacePosXZ, -0.5f );
	float Shadow = 1.0f - saturate( Mask - OffsetMask );
	Mask *= StripeColor.a;
	BaseColor.rgb = lerp( BaseColor.rgb, BaseColor.rgb * Shadow, Mask * ShadowAmount );
	BaseColor = lerp( BaseColor, StripeColor, Mask );
}

#ifndef FOG_OF_WAR_BLEND_FUNCTION
	#define FOG_OF_WAR_BLEND_FUNCTION loc_BlendFogOfWar
	float4 loc_BlendFogOfWar( float Alpha )
	{
		return float4( vec3(0.0), 1.0 - Alpha );
	}
#endif

void loc_ApplyFogOfWarPattern( inout float Alpha, in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
	if( FogOfWarPatternStrength > 0.0f )
	{
		float2 UV = Coordinate.xz * InverseWorldSize * FogOfWarPatternTiling;
		UV += FogOfWarPatternSpeed * FogOfWarTime;
		float Noise1 = 1.0f - PdxTex2D( FogOfWarAlphaMask, UV ).g;
		float Noise2 = 1.0f - PdxTex2D( FogOfWarAlphaMask, UV * -0.13 ).g;
		float Detail = 0.5f;
		
		float Noise = saturate( Noise2 * (1.0f-Detail) + Detail * 0.5f + (Noise1-0.5f) * Detail );
		
		Noise *= 1.0f - Alpha;
		Alpha = smoothstep( 0.0, 1.0, Alpha + Noise * FogOfWarPatternStrength );
	}
}
float GetFogOfWarAlpha( in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{		
	float Alpha = PdxTex2D( FogOfWarAlphaMask, Coordinate.xz * InverseWorldSize ).r;
	
	loc_ApplyFogOfWarPattern( Alpha, Coordinate, FogOfWarAlphaMask );
	
	return FogOfWarAlphaMin + Alpha * (1.0f - FogOfWarAlphaMin);
}
float GetFogOfWarAlphaMultiSampled( in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
	float Width = 5.0f;
	float Alpha = 0.0f; 
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2( 0,-1) * Width ) * InverseWorldSize ).r;
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2(-1, 0) * Width ) * InverseWorldSize ).r;
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2( 1, 0) * Width ) * InverseWorldSize ).r;
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2( 0, 1) * Width ) * InverseWorldSize ).r;
	Alpha /= 4.0f;
	
	loc_ApplyFogOfWarPattern( Alpha, Coordinate, FogOfWarAlphaMask );
	
	return FogOfWarAlphaMin + Alpha * (1.0f - FogOfWarAlphaMin);
}

float3 FogOfWarBlend( float3 Color, float Alpha )
{		
	float4 ColorAndAlpha = FOG_OF_WAR_BLEND_FUNCTION( Alpha );
	return lerp( Color, ColorAndAlpha.rgb, ColorAndAlpha.a );
}

// Immediate mode
float3 JominiApplyFogOfWar( in float3 Color, in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
#ifdef JOMINI_DISABLE_FOG_OF_WAR
	return Color;
#else
	float Alpha = GetFogOfWarAlpha( Coordinate, FogOfWarAlphaMask );
	return FogOfWarBlend( Color, Alpha );
#endif
}
float3 JominiApplyFogOfWarMultiSampled( in float3 Color, in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
#ifdef JOMINI_DISABLE_FOG_OF_WAR
	return Color;
#else
	float Alpha = GetFogOfWarAlphaMultiSampled( Coordinate, FogOfWarAlphaMask );
	return FogOfWarBlend( Color, Alpha );
#endif
}

// Post process
float4 JominiApplyFogOfWar( in float3 WorldSpacePos, PdxTextureSampler2D FogOfWarAlphaMask )
{
#ifdef JOMINI_DISABLE_FOG_OF_WAR
	return float4( vec3(0.0), 1.0 );
#else
	return FOG_OF_WAR_BLEND_FUNCTION( GetFogOfWarAlpha( WorldSpacePos, FogOfWarAlphaMask ) );
#endif
}

#ifndef ApplyFogOfWar		
#define ApplyFogOfWar JominiApplyFogOfWar
#endif
#ifndef ApplyFogOfWarMultiSampled		
#define ApplyFogOfWarMultiSampled JominiApplyFogOfWarMultiSampled
#endif

static const float3 LUMINOSITY_FUNCTION = float3( 0.2126, 0.7152, 0.0722 );

float3 CalculateLayerColor( float3 TextureColor, float3 LayerColor )
{
	return dot( TextureColor, LUMINOSITY_FUNCTION ) * LayerColor;
}

float4 DefaultOverlayColor( float4 Base, float4 Overlay )
{
	float3 Diffuse = lerp( Base, Overlay, step( Overlay.a, 0.5 ) ).rgb;
	return float4( Diffuse, max( Base.a, Overlay.a ) );
}

float3 SampleNormalMapTexture( PdxTextureSampler2D Texture, float2 UV, float2 Scale, float Rotation, float Offset, float NormalFlatten )
{
	float2 Rotate = float2( cos( Rotation ), sin( Rotation ) );

	float2 UVCoord = float2( UV.x * Rotate.x - UV.y * Rotate.y, UV.x * Rotate.y + UV.y * Rotate.x );
	UVCoord *= Scale;
	UVCoord.x += Offset;
	
	float3 Normal = UnpackNormal( PdxTex2DUpscaleNative( Texture, UVCoord ) ).xzy;
	
	float2 InvRotate = float2( cos( -Rotation ), sin( -Rotation ) );
	Normal.xz = float2( Normal.x * InvRotate.x - Normal.z * InvRotate.y, Normal.x * InvRotate.y + Normal.z * InvRotate.x );
	Normal.z *= -1;
	
	Normal.y *= NormalFlatten;
	
	return normalize( Normal );
}

void SampleFlowTexture( PdxTextureSampler2D FlowMapTexture, PdxTextureSampler2D FlowNormalTexture, float2 FlowCoord, float2 NormalCoord, float2 Offset, float2 DDX, float2 DDY, out float3 Normal, out float FoamMask )
{
	float3 FlowMap = PdxTex2DLod0( FlowMapTexture, FlowCoord ).rgb;
	float2 FlowDir = FlowMap.xy * 2.0 - 1.0;
	FlowDir = FlowDir / ( length( FlowDir ) + 0.000001 ); // Intel did not like normalize()

	float2x2 FlowRotMat = Create2x2( -FlowDir.y, FlowDir.x, -FlowDir.x, -FlowDir.y );
	float2x2 FlowInvRotMat = Create2x2( -FlowDir.y, -FlowDir.x, FlowDir.x, -FlowDir.y );
	float4 Sample = PdxTex2DGrad( FlowNormalTexture, mul( FlowInvRotMat, NormalCoord ) - Offset * FlowMap.b, DDX, DDY );
	
	Normal = UnpackNormal( Sample ).xzy;
	Normal.y *= 1.0 / max( 0.01, FlowMap.b );
	Normal.xz = mul( FlowRotMat, Normal.xz );
	
	FoamMask = Sample.a * FlowMap.b;
}

float3 CalcFlow( PdxTextureSampler2D FlowMapTexture, PdxTextureSampler2D FlowNormalTexture, float2 FlowMapUV, float2 NormalMapUV, out float FoamMask )
{
	float FlowMapScale = 1.5;				
	float2 FlowCoordScale = _WaterFlowMapSize * FlowMapScale;
	float2 FlowCoord = FlowMapUV * FlowCoordScale;
	
	float2 BlendFactor = abs( 2.0 * frac( FlowCoord ) - 1.0 ) - 0.5;
	BlendFactor = 0.5 - 4.0 * BlendFactor * BlendFactor * BlendFactor;
	//BlendFactor = 1.0 - abs( 2.0 * frac( FlowCoord ) - 1.0 );
	
	float2 NormalCoord = NormalMapUV * _WaterFlowNormalScale;
	float2 DDX = ApplyUpscaleNativeLodBiasMultiplier( ddx( NormalCoord ) );
	float2 DDY = ApplyUpscaleNativeLodBiasMultiplier( ddy( NormalCoord ) );
	
	float2 Offset = float2( 0.0, -_WaterFlowTime );
	
	float4 Sample1;
	SampleFlowTexture( FlowMapTexture, FlowNormalTexture, floor( FlowCoord ) / FlowCoordScale, NormalCoord, Offset, DDX, DDY, Sample1.xyz, Sample1.a );
	float4 Sample2;
	SampleFlowTexture( FlowMapTexture, FlowNormalTexture, floor( FlowCoord + float2(0.5, 0.0) ) / FlowCoordScale, NormalCoord, Offset, DDX, DDY, Sample2.xyz, Sample2.a );
	float4 Sample3;
	SampleFlowTexture( FlowMapTexture, FlowNormalTexture, floor( FlowCoord + float2(0.0, 0.5) ) / FlowCoordScale, NormalCoord, Offset, DDX, DDY, Sample3.xyz, Sample3.a );
	float4 Sample4;
	SampleFlowTexture( FlowMapTexture, FlowNormalTexture, floor( FlowCoord + float2(0.5, 0.5) ) / FlowCoordScale, NormalCoord, Offset, DDX, DDY, Sample4.xyz, Sample4.a );
	
	float4 Sample12 = lerp( Sample2, Sample1, BlendFactor.x );
	float4 Sample34 = lerp( Sample4, Sample3, BlendFactor.x );
	
	float4 Sample = lerp( Sample34, Sample12, BlendFactor.y );
	
	Sample.y *= _WaterFlowNormalFlatten;
	float3 Normal = normalize( Sample.xyz );
	
	FoamMask = Sample.a;
	return Normal;
}

static const float MaxHeight = 50.0;
float CompressWorldSpace( float3 WorldSpacePos )
{
	float3 CameraPos = CameraPosition;
	if ( CameraPos.y > MaxHeight )
	{
		float Above = CameraPos.y - MaxHeight;
		float3 ToCameraDir = normalize( CameraPosition - WorldSpacePos );
		CameraPos = CameraPosition - ToCameraDir * (Above / ToCameraDir.y);
	}
	float3 ToCamera = CameraPos - WorldSpacePos;
	return length( ToCamera );
}

float3 DecompressWorldSpace( float3 WorldSpacePos, float Length )
{
	float3 ToCameraDir = normalize( CameraPosition - WorldSpacePos );
		
	float3 CameraPos = CameraPosition;
	if ( CameraPos.y > MaxHeight )
	{
		float Above = CameraPos.y - MaxHeight;
		CameraPos = CameraPosition - ToCameraDir * (Above / ToCameraDir.y);
	}
	
	float3 RefractionWorldSpacePos = CameraPos - ToCameraDir * Length;
	return RefractionWorldSpacePos;
}

/*
 * This file contains default implementations of province overlays using the primary and secondary province colors.
 * The third province colors currently have no default overlay implementation (perhaps a default highlight implementation should be included here?)
 * More info: https://confluence.paradoxinteractive.com/display/PROG/Province+overlays
 */


//#define BORDER_DISTANCE_FIELD_SAMPLES_MEDIUM
#define BORDER_DISTANCE_FIELD_SAMPLES_HIGH
float CalcDistanceFieldValue( in float2 NormalizedCoordinate )
{
	float Distance = PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate ).r;

	#if defined( BORDER_DISTANCE_FIELD_SAMPLES_MEDIUM ) || defined( BORDER_DISTANCE_FIELD_SAMPLES_HIGH )
	float2 Offset = vec2( .75f ) * InvGradientTextureSize; // (at the time of writing) this equals 3 color map texels
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( -1,-1 ) ) ).r;
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( 1,-1 ) ) ).r;
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( -1, 1 ) ) ).r;
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( 1, 1 ) ) ).r;
	#endif

	#if defined( BORDER_DISTANCE_FIELD_SAMPLES_HIGH )
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( -1, 0 ) ) ).r;
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( 1, 0 ) ) ).r;
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( 0, 1 ) ) ).r;
	Distance += PdxTex2D( BorderDistanceFieldTexture, NormalizedCoordinate + ( Offset * float2( 0,-1 ) ) ).r;
	#endif

	#if defined( BORDER_DISTANCE_FIELD_SAMPLES_HIGH )
		Distance /= 9.0f;
	#elif defined( BORDER_DISTANCE_FIELD_SAMPLES_MEDIUM )
		Distance /= 5.0f;
	#endif

	return Distance;
}

// This default implementation is using the secondary province colors to draw diagonal stripes over provinces (e.g. occupied provinces in titus)
void ApplySecondaryProvinceOverlay( in float2 NormalizedCoordinate, in float DistanceFieldValue, inout float4 Color )
{
	float4 SecondaryColor = BilinearColorSampleAtOffset( NormalizedCoordinate, IndirectionMapSize, InvIndirectionMapSize, ProvinceColorIndirectionTexture, ProvinceColorTexture, SecondaryProvinceColorsOffset );
	SecondaryColor.a *= smoothstep( GB_EdgeWidth, GB_EdgeWidth + 0.01f, DistanceFieldValue );
	ApplyDiagonalStripes( Color, SecondaryColor, 0.8, NormalizedCoordinate );
}

// This default implementation is using the alternate province colors to draw a solid color over provinces
void ApplyAlternateProvinceOverlay( in float2 NormalizedCoordinate, inout float4 Color )
{
	float4 AlternateColor = BilinearColorSampleAtOffset(
		NormalizedCoordinate,
		IndirectionMapSize,
		InvIndirectionMapSize,
		ProvinceColorIndirectionTexture,
		ProvinceColorTexture,
		AlternateProvinceColorsOffset );

	Color.rgb = lerp( Color.rgb, AlternateColor.rgb, AlternateColor.a );
	Color.a = Color.a * ( 1.0f - AlternateColor.a ) + AlternateColor.a;
}

// This default implementation is using the primary province colors with the gradiant border system; it is highly customizeable through the GradientBorders constant buffer. 
// Typically, this function is used to draw gradient borders and/or uniform "province colors"
float4 CalcPrimaryProvinceOverlay( in float2 NormalizedCoordinate, in float DistanceFieldValue )
{
	float4 PrimaryColor = BilinearColorSample( NormalizedCoordinate, IndirectionMapSize, InvIndirectionMapSize, ProvinceColorIndirectionTexture, ProvinceColorTexture );

	float GradientAlpha = lerp( GB_GradientAlphaInside, GB_GradientAlphaOutside, RemapClamped( DistanceFieldValue, GB_EdgeWidth + GB_GradientWidth, GB_EdgeWidth, 0.0f, 1.0f ) );
	float Edge = smoothstep( GB_EdgeWidth + max( 0.0001f, GB_EdgeSmoothness ), GB_EdgeWidth, DistanceFieldValue );

	float4 Color;
	Color.rgb = lerp( PrimaryColor.rgb * GB_GradientColorMul, PrimaryColor.rgb * GB_EdgeColorMul, Edge );
	Color.a = PrimaryColor.a * max( GradientAlpha * ( 1.0f - pow( Edge, 2 ) ), GB_EdgeAlpha * Edge );

	return Color;
}

void GetGradiantBorderBlendValues( in float4 ProvinceOverlayColor, out float PreLightingBlend, out float PostLightingBlend )
{
	PreLightingBlend = GB_PreLightingBlend * ProvinceOverlayColor.a;
	PostLightingBlend = GB_PostLightingBlend * ProvinceOverlayColor.a;
}

// This is a high-level convencience function that can be used if no overlay shader customization is required
void GetProvinceOverlayAndBlend( in float2 NormalizedCoordinate, out float3 ProvinceOverlayColor, out float PreLightingBlend, out float PostLightingBlend )
{
	float DistanceFieldValue = CalcDistanceFieldValue( NormalizedCoordinate );
	float4 ProvinceOverlayColorWithAlpha = CalcPrimaryProvinceOverlay( NormalizedCoordinate, DistanceFieldValue );

	ApplySecondaryProvinceOverlay( NormalizedCoordinate, DistanceFieldValue, ProvinceOverlayColorWithAlpha );
	ApplyAlternateProvinceOverlay( NormalizedCoordinate, ProvinceOverlayColorWithAlpha );

	GetGradiantBorderBlendValues( ProvinceOverlayColorWithAlpha, PreLightingBlend, PostLightingBlend );
	ProvinceOverlayColor = ProvinceOverlayColorWithAlpha.rgb;
}

bool HasLegendIn( in int ProvinceId )
{
	const uint DataIndex = ProvinceId / BITS_IN_BYTE;
	const uint Data = PdxReadBuffer( LegendMaskBuffer, DataIndex );
	const uint BitIndex = ProvinceId % BITS_IN_BYTE;
	return UnpackBitAt( Data, BitIndex );
}

float LegendBilinearColorSample( in float2 Coordinate )
{			
	float2 Pixel = Coordinate * IndirectionMapSize;
	const float2 FracCoord = frac( Pixel );

	Pixel = floor(Pixel) / IndirectionMapSize - InvIndirectionMapSize / 2.0f;

	const int ProvinceId11 = SampleProvinceId( Pixel, ProvinceColorIndirectionTexture );
	const float C11 = float( HasLegendIn( ProvinceId11 ) );
	
	const int ProvinceId21 = SampleProvinceId( Pixel + float2( InvIndirectionMapSize.x, 0.0f ), ProvinceColorIndirectionTexture );
	const float C21 = float( HasLegendIn( ProvinceId21 ) );
	
	const int ProvinceId12 = SampleProvinceId( Pixel + float2( 0.0f, InvIndirectionMapSize.y ), ProvinceColorIndirectionTexture );
	const float C12 = float( HasLegendIn( ProvinceId12 ) );
	
	const int ProvinceId22 = SampleProvinceId( Pixel + InvIndirectionMapSize, ProvinceColorIndirectionTexture );
	const float C22 = float( HasLegendIn( ProvinceId22 ) );

	const float X1 = lerp(C11, C21, FracCoord.x);
	const float X2 = lerp(C12, C22, FracCoord.x);
	return lerp( X1, X2, FracCoord.y );
}

void ApplyLegendDiffuse( inout float3 DiffuseColor, in float2 Coordinate)
{
	const float LegendIntensity = LegendBilinearColorSample( Coordinate );
	const float ZoomBlendOut = clamp( 1.0f - _WaterZoomedInZoomedOutFactor * 2.5f, 0.0f, 1.0f );
	DiffuseColor = lerp( DiffuseColor, DiffuseColor * 1.8f, LegendIntensity * ZoomBlendOut);
}



// === Main Code === 

struct RaySettings
{
	float2 _UV0;
	float2 _UV1;
	float _FadeTop;
	float _FadeBottom;
	bool _TopFadoutWave;
	float _WaveScale;
	float _WaveMoveSpeed;
	float _WaveFerquence;
	float _RaySpeed;
	float _RayDensity1;
	float _RayDensity2;
	float _RayIntensity;
};

float4 ApplyVerticalBordersFog(in float4 Diffuse, in float3 WorldSpacePos )
{
	float4 DiffuseColor = Diffuse;
	DiffuseColor.rgb =  ApplyFogOfWar( Diffuse.rgb, WorldSpacePos, FogOfWarAlpha );
	DiffuseColor.rgb = ApplyDistanceFog( DiffuseColor.rgb, WorldSpacePos );
	DiffuseColor.a *= Alpha;

	return DiffuseColor;
}

float CalcLegendRay( in RaySettings RayData )
{
	float StrengthScale = 1.2f;
	float Speed = GlobalTime * 0.1f * RayData._RaySpeed;
	float SpeedScale = RayData._RayDensity1 * 0.2f;
	float2 Ray1 = float2( RayData._UV0.x * RayData._RayDensity1 + sin( Speed ) * SpeedScale, 1.0f );
	float2 Ray2 = float2( RayData._UV0.x * RayData._RayDensity2 + sin( Speed * 2 ) * SpeedScale, 1.0f );
	
	float Rays;
	float BorderTextureNoise1 = PdxTex2D( BorderTexture0, Ray1 ).b;
	float BorderTextureNoise2 = PdxTex2D( BorderTexture0, Ray2 ).b;
	Rays = clamp( BorderTextureNoise1 + ( BorderTextureNoise2 * RayData._RayIntensity ), 0.0f, 1.0f );

	// Fade out top
	if( RayData._TopFadoutWave )
	{
		float FadeOutOffset = RayData._WaveScale * sin( RayData._UV0.x * RayData._WaveFerquence + GlobalTime * RayData._WaveMoveSpeed );
		Rays *= smoothstep( 0.0f, RayData._FadeTop, ( RayData._UV0.y + FadeOutOffset ) );
	}
	else
	{
		Rays *= smoothstep( 0.0f, RayData._FadeTop, RayData._UV0.y );
	}
	
	// Fade out bottom
	Rays *= smoothstep( 0.0001f , RayData._FadeBottom , (  1.0f - RayData._UV0.y ) );
	return Rays * StrengthScale;
}
   
float4 main( VS_OUTPUT_PDX_BORDER Input, bool PDX_IsFrontFace : SV_IsFrontFace ) : PDX_COLOR
{
	float GodRays = 0.0f;
	if( Input.UV0.y < 0.79f && Input.UV0.y > 0.45f)
	{
		RaySettings GodRaySettings;
		GodRaySettings._UV0 = float2( Input.UV0.x * 20, Input.UV0.y );
		GodRaySettings._UV1 = Input.UV1;
		GodRaySettings._FadeTop = 2.3f;
		GodRaySettings._FadeBottom = 0.5f;
		GodRaySettings._TopFadoutWave = false;
		GodRaySettings._WaveScale = 0.15f;
		GodRaySettings._WaveMoveSpeed = .0f;
		GodRaySettings._WaveFerquence = 10.0f;
		GodRaySettings._RaySpeed = 3.0f;
		GodRaySettings._RayDensity1 = 1.0f;
		GodRaySettings._RayDensity2 = 0.5f;
		GodRaySettings._RayIntensity = 0.5f;
		GodRays = CalcLegendRay( GodRaySettings );
	}
	
	float BorderRays = 0.0f;
	float YOffect = Input.UV0.y - 0.975f;
	if(YOffect > 0)
	{
		RaySettings BorderRaySettings;
		BorderRaySettings._UV0 = float2( Input.UV0.x *27, YOffect );
		BorderRaySettings._UV1 =  Input.UV2 * 27;
		BorderRaySettings._FadeTop = 0.03f;
		BorderRaySettings._FadeBottom = 0.25f;
		BorderRaySettings._TopFadoutWave = true;
		BorderRaySettings._WaveScale = 0.005f;
		BorderRaySettings._WaveMoveSpeed = 2.0f;
		BorderRaySettings._WaveFerquence = 10.0f;
		BorderRaySettings._RaySpeed = 3.0f;
		BorderRaySettings._RayDensity1 = 1.0f;
		BorderRaySettings._RayDensity2 = 3.0f;
		BorderRaySettings._RayIntensity = 0.3f;
		BorderRays = CalcLegendRay( BorderRaySettings );
		BorderRays *= smoothstep( 0.0001f , 0.005f , ( 1 - Input.UV0.y ) );
	}
	
	static float3 GodRaysColor = float3( 0.98f, 0.95f, 0.47f );
	static float3 LegendColor = float3( 0.68f, 0.65f, 0.27f );
	
	
	float3 Diffuse = ( GodRays * GodRaysColor ) + ( BorderRays * LegendColor );
	const float ZoomBlendOut = clamp( 1.0f - ( _WaterZoomedInZoomedOutFactor * 2.5f ), 0.0f, 1.0f );

	return ApplyVerticalBordersFog( float4( Diffuse, lerp( BorderRays, GodRays , GodRays ) * ZoomBlendOut ), Input.WorldSpacePos );
}

