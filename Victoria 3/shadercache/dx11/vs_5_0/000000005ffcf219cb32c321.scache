

// === Shader Info === 

// Shader file: gfx/FX/jomini/entity_editor/grid.shader
// Effect: DebugNormal
// ===ShaderInfo End===



// === Defines === 

#define PDX_DIRECTX_11
#define VERTEX_SHADER
#define PDX_HLSL
#define PDX_MESH_SKINNED
#define PDX_MAX_HEIGHTMAP_COMPRESS_LEVELS 5
#define HIGH_QUALITY_SHADERS


// === HLSL Macros === 

#define PDX_POSITION SV_Position
#define PDX_COLOR SV_Target
#define PDX_COLOR0 SV_Target0
#define PDX_COLOR0_SRC1 SV_Target1 // Use this when doing dual source blending, currently only supports that for render target #0
#define PDX_COLOR1 SV_Target1
#define PDX_COLOR2 SV_Target2
#define PDX_COLOR3 SV_Target3
#define PDX_COLOR4 SV_Target4
#define PDX_COLOR5 SV_Target5
#define PDX_COLOR6 SV_Target6
#define PDX_COLOR7 SV_Target7
#define PDX_VertexID SV_VertexID
#define PDX_InstanceID SV_InstanceID
#define PDX_DispatchThreadID SV_DispatchThreadID
#define PDX_GroupThreadID SV_GroupThreadID
#define PDX_GroupID SV_GroupID
#define PDX_GroupIndex SV_GroupIndex
#define PDX_TessFactor SV_TessFactor
#define PDX_InsideTessFactor SV_InsideTessFactor
#define PDX_OutputControlPointID SV_OutputControlPointID
#define PDX_DomainLocation SV_DomainLocation
#define PDX_RenderTargetArrayIndex SV_RenderTargetArrayIndex
#define PDX_ViewportArrayIndex SV_ViewportArrayIndex
#define PDX_Depth SV_Depth

#define PdxDomainTypeTriangle "tri"
#define PdxDomainTypeQuad "quad"
#define PdxDomainTypeIsoline "isoline"

#define PdxPartitioningModeInteger "integer"
#define PdxPartitioningModeFractionalEven "fractional_even"
#define PdxPartitioningModeFractionalOdd "fractional_odd"

#define PdxPrimitiveTypePoint point
#define PdxPrimitiveTypeLine line
#define PdxPrimitiveTypeTriangle triangle
#define PdxPrimitiveTypeLineAdjacency lineadj
#define PdxPrimitiveTypeTriangleAdjacency triangleadj

#define PdxTessellatorOutputTopologyPoint "point"
#define PdxTessellatorOutputTopologyLine "line"
#define PdxTessellatorOutputTopologyTriangleCw "triangle_cw"
#define PdxTessellatorOutputTopologyTriangleCcw "triangle_ccw"

#define PdxMeshShaderOutputTopologyLine "line"
#define PdxMeshShaderOutputTopologyTriangle "triangle"

#define mod( X, Y ) ( (X) % (Y) )

float2x2 Create2x2( in float2 x, in float2 y )
{
	return transpose( float2x2( x, y ) );
}
// TODO, Create3x3 should be transposed in hlsl, and not in glsl, and then the mul() arguments should be reversed
#define Create3x3 float3x3
float4x4 Create4x4( in float4 x, in float4 y, in float4 z, in float4 w )
{
	return transpose( float4x4( x, y, z, w ) );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}

#define lessThan( a, b ) ( (a) < (b) )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct PdxTextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
struct PdxTextureSampler2DMS
{
    Texture2DMS<float4>		_Texture;
};

struct PdxTextureSampler2DArray
{
    Texture2DArray	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler3D
{
    Texture3D 		_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler2DCmp
{
    Texture2D 				_Texture;
    SamplerComparisonState 	_Sampler;
};

// These are for separate Texture/Sampler objects
#define PdxSampleTex2D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex2DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )
#define PdxSampleTex2DGrad(tex,samp,uv,ddx,ddy) (tex).SampleGrad( (samp), (uv), (ddx), (ddy) )
#define PdxSampleTex2DGather(tex,samp,uv) (tex).Gather( (samp), (uv) )

#define PdxSampleTex3D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex3DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )

#define PdxTexture2DSize(tex,size) (tex).GetDimensions( (size).x, (size).y )
#define PdxTexture2DLoad(tex,uv,lod) (tex).Load( int3((uv), (lod)) )

#define PdxTexture2DArraySize(tex,size,elements) (tex).GetDimensions( (size).x, (size).y, elements )
#define PdxTexture2DArrayLoad(tex,uv,arrayindex,lod) (tex).Load( int4((uv), (arrayindex), (lod)) )

#define PdxTexture3DSize(tex,size) (tex).GetDimensions( (size).x, (size).y, (size).z )
#define PdxTexture3DLoad(tex,uv,lod) (tex).Load( int4((uv), (lod)) )

// These are for the combined TextureSampler objects
#define PdxTex2DSize(samp,size) PdxTexture2DSize( (samp)._Texture, (size) )
#define PdxTex2D(samp,uv) PdxSampleTex2D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLod(samp,uv,lod) PdxSampleTex2DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex2DLodOffset(samp,uv,lod,offset) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod), (offset) )
#define PdxTex2DBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )
#define PdxTex2DGrad(samp,uv,ddx,ddy) PdxSampleTex2DGrad( (samp)._Texture, (samp)._Sampler, (uv), (ddx), (ddy) )
#define PdxTex2DGather(samp,uv) PdxSampleTex2DGather( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLoad(samp,uv,lod) PdxTexture2DLoad( (samp)._Texture, (uv), (lod) )
#define PdxTex2DMultiSampled(samp,texelcoord,sampleidx) (samp)._Texture.Load( (texelcoord), (sampleidx) )
#define PdxTex2DMSSize(samp,size,samples) (samp)._Texture.GetDimensions( (size).x, (size).y, (samples) )

#define PdxTex3D(samp,uv) PdxSampleTex3D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex3DLod(samp,uv,lod) PdxSampleTex3DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex3DLoad(samp,uv,lod) PdxTexture3DLoad( (samp)._Texture, (uv), (lod) )

#define PdxTexCube(samp,uv) (samp)._Texture.Sample( (samp)._Sampler, (uv) )
#define PdxTexCubeLod(samp,uv,lod) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod) )
#define PdxTexCubeBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )

#define PdxTex2DCmpLod0(samp,uv,value) (samp)._Texture.SampleCmpLevelZero( (samp)._Sampler, (uv), (value) )

// Vulkan fails to compile shaders with this function call properly
// Commenting it out until we can fix this issue
//#define PdxCalculateLod(samp,uv) (samp)._Texture.CalculateLevelOfDetail( (samp)._Sampler, (uv) )

float4x4 FixProjection( float4x4 ProjectionMatrix )
{
	// Enable for "debug" drawing to see if some objects is missing fix
	#if 0
	for ( int i = 0; i < 4; ++i )
	{
		GetMatrixData( ProjectionMatrix, 0, i ) *= 0.5;
		GetMatrixData( ProjectionMatrix, 1, i ) *= 0.5;
	}
	#endif
	
	return ProjectionMatrix;
}

#define PdxBufferFloat  Buffer<float>
#define PdxBufferFloat2	Buffer<float2>
#define PdxBufferFloat3	Buffer<float3>
#define PdxBufferFloat4	Buffer<float4>
#define PdxBufferInt  	Buffer<int>
#define PdxBufferInt2	Buffer<int2>
#define PdxBufferInt3	Buffer<int3>
#define PdxBufferInt4	Buffer<int4>
#define PdxBufferUint   Buffer<uint>
#define PdxBufferUint2	Buffer<uint2>
#define PdxBufferUint3	Buffer<uint3>
#define PdxBufferUint4	Buffer<uint4>

#define PdxStructuredBuffer StructuredBuffer
#define PdxRWStructuredBuffer RWStructuredBuffer
#define PdxRasterizerOrderedBuffer RasterizerOrderedBuffer
#define PdxRasterizerOrderedStructuredBuffer RasterizerOrderedStructuredBuffer

float 	PdxReadBuffer( in PdxBufferFloat Buf, int Index )  		{ return Buf.Load( Index ); }
float2	PdxReadBuffer2( in PdxBufferFloat2 Buf, int Index )		{ return Buf.Load( Index ); }
float3	PdxReadBuffer3( in PdxBufferFloat3 Buf, int Index )		{ return Buf.Load( Index ); }
float4	PdxReadBuffer4( in PdxBufferFloat4 Buf, int Index )		{ return Buf.Load( Index ); }

int  	PdxReadBuffer( in PdxBufferInt Buf, int Index ) 		{ return Buf.Load( Index ); }
int2 	PdxReadBuffer2( in PdxBufferInt2 Buf, int Index )		{ return Buf.Load( Index ); }
int3 	PdxReadBuffer3( in PdxBufferInt3 Buf, int Index )    	{ return Buf.Load( Index ); }
int4 	PdxReadBuffer4( in PdxBufferInt4 Buf, int Index )    	{ return Buf.Load( Index ); }

uint  	PdxReadBuffer( in PdxBufferUint Buf, int Index )    	{ return Buf.Load( Index ); }
uint2 	PdxReadBuffer2( in PdxBufferUint2 Buf, int Index )  	{ return Buf.Load( Index ); }
uint3 	PdxReadBuffer3( in PdxBufferUint3 Buf, int Index )  	{ return Buf.Load( Index ); }
uint4 	PdxReadBuffer4( in PdxBufferUint4 Buf, int Index )  	{ return Buf.Load( Index ); }

#define PdxReadRWBuffer(buffer,index) (buffer)[(index)]
#define PdxWriteRWBuffer(buffer,index,value) (buffer)[(index)] = (value)

#define Quaternion float4

#define UINT8_MAX 0xff
#define UINT16_MAX 0xffff
#define UINT32_MAX 0xffffffff
#define PI 3.14159265359

float2x2 Create2x2( float a, float b, float c, float d ) { return Create2x2( float2( a, b ), float2( c, d ) ); }

#define PdxSampleTex2DLod0(tex,samp,uv) PdxSampleTex2DLod( (tex), (samp), (uv), 0 )

#define PdxTexture2DLoad0(tex,uv) PdxTexture2DLoad( (tex), (uv), 0 )

#define PdxTexture2DArrayLoad0(tex,uv,arrayindex) PdxTexture2DArrayLoad( (tex), (uv), (arrayindex), 0)

#define PdxTex2DProj(samp,uv_proj) PdxTex2DLod0( (samp), (uv_proj).xy / (uv_proj).w )
#define PdxTex2DLod0(samp,uv) PdxTex2DLod( (samp), (uv), 0 )
#define PdxTex2DLod0Offset(samp,uv,offset) PdxTex2DLodOffset( (samp), (uv), 0, (offset) )
#define PdxTex2DLoad0(samp,uv) PdxTex2DLoad( (samp), (uv), 0 )

#define PdxTex3DLod0(samp,uv) PdxTex3DLod( (samp), (uv), 0 )
#define PdxTex3DLoad0(samp,uv) PdxTex3DLoad( (samp), (uv), 0 )

float4 FixProjectionAndMul( float4x4 ProjectionMatrix, float4 Vector )
{
	return mul( FixProjection( ProjectionMatrix ), Vector );
}



// === Vertex Structs === 

struct VS_INPUT_PDXMESHSTANDARD
{
	float3 Position : POSITION;
	float3 Normal : TEXCOORD0;
	float4 Tangent : TEXCOORD1;
	float2 UV0 : TEXCOORD2;
#ifdef PDX_MESH_UV1
	float2 UV1 : TEXCOORD3;
#endif
#ifdef PDX_MESH_UV2
	float2 UV2 : TEXCOORD4;
#endif
	uint4 InstanceIndices : TEXCOORD5;
#ifdef PDX_MESH_SKINNED
	uint4 BoneIndex : TEXCOORD6;
	float3 BoneWeight : TEXCOORD7;
#endif
	uint VertexID : PDX_VertexID;
};
struct VS_OUTPUT_PDXMESHSHADOW
{
	float4 Position : PDX_POSITION;
	float2 UV : TEXCOORD0;
};
struct VS_OUTPUT_PDXMESHSHADOWSTANDARD
{
	float4 Position : PDX_POSITION;
	float3 UV_InstanceIndex : TEXCOORD0;
};
struct VS_INPUT_DEBUGNORMAL
{
	float3 Position : POSITION;
	float3 Normal : TEXCOORD0;
#ifdef PDX_MESH_SKINNED
	uint4 BoneIndex : TEXCOORD1;
	float3 BoneWeight : TEXCOORD2;
#endif
	uint2 InstanceIndices : TEXCOORD4;
	uint VertexID : PDX_VertexID;
};
struct VS_OUTPUT_DEBUGNORMAL
{
	float4 Position : PDX_POSITION;
};
struct VS_OUTPUT
{
	float4 Position : PDX_POSITION;
	float3 Normal : TEXCOORD0;
	float3 Tangent : TEXCOORD1;
	float3 Bitangent : TEXCOORD2;
	float2 UV0 : TEXCOORD3;
	float2 UV1 : TEXCOORD4;
	float3 WorldSpacePos : TEXCOORD5;
	uint InstanceIndex : TEXCOORD6;
};


// === Constant Buffers === 

cbuffer pdx_hlsl_cbPdxCamera
{
	float4x4 ViewProjectionMatrix;
	float4x4 InvViewProjectionMatrix;
	float4x4 ViewMatrix;
	float4x4 InvViewMatrix;
	float4x4 ProjectionMatrix;
	float4x4 InvProjectionMatrix;
	float4x4 ShadowMapTextureMatrix;
	float3 CameraPosition;
	float ZNear;
	float3 CameraLookAtDir;
	float ZFar;
	float3 CameraUpDir;
	float CameraFoV;
	float3 CameraRightDir;
	float _UpscaleLodBias;
	float _UpscaleLodBiasNative;
	float _UpscaleLodBiasMultiplier;
	float _UpscaleLodBiasMultiplierNative;
	float _UpscaleLodBiasEnabled;
}
cbuffer pdx_hlsl_cbPdxMeshInstanceData
{
	float4 Data[2];
}
cbuffer pdx_hlsl_cbPdxMeshJointVertexInstanceData
{
	float4 JointVertexMatrices[3];
}
cbuffer pdx_hlsl_cbPdxMeshBlendShapeInstanceData
{
	float4 BlendShapeDataInstanced[2];
}
cbuffer pdx_hlsl_cbPdxMeshBlendShapeConstants
{
	uint BlendShapeVertexCount;
	uint BlendShapesVertexOffset;
}


// === Samplers === 



// === Textures === 



// === RW Textures === 



// === Buffer Textures === 

PdxBufferFloat BlendShapeDataBuffer;


// === RW Buffer Textures === 



// === Bindless === 



// === Shader Code === 

float CalcViewSpaceDepth( float Depth )
{
	Depth = 2.0 * Depth - 1.0;
	float ZLinear = 2.0 * ZNear * ZFar / (ZFar + ZNear - Depth * (ZFar - ZNear));
	return ZLinear;
}

float3 ViewSpacePosFromDepth( float Depth, float2 UV )
{
	float x = UV.x * 2.0 - 1.0;
	float y = (1.0 - UV.y) * 2.0 - 1.0;

	float4 ProjectedPos = float4( x, y, Depth, 1.0 );

	float4 ViewSpacePos = mul( InvProjectionMatrix, ProjectedPos );

	return ViewSpacePos.xyz / ViewSpacePos.w;
}

float3 WorldSpacePositionFromDepth( float Depth, float2 UV )
{
	float3 WorldSpacePos = mul( InvViewMatrix, float4( ViewSpacePosFromDepth( Depth, UV ), 1.0 ) ).xyz;
	return WorldSpacePos;
}
float CalcRandom( float Seed )
{
	float DotProduct = float( Seed ) * 12.9898;
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcRandom( float2 Seed )
{
	float DotProduct = dot( Seed, float2( 12.9898, 78.233 ) );
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcRandom( float3 Seed )
{
	float DotProduct = dot( Seed, float3( 12.9898,78.233,144.7272 ) );
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcNoise( float2 Pos ) 
{
	int2 i = int2( floor( Pos ) );
	float2 f = frac( Pos );

	float a = CalcRandom( i );
	float b = CalcRandom( i + int2( 1, 0 ) );
	float c = CalcRandom( i + int2( 0, 1 ) );
	float d = CalcRandom( i + int2( 1, 1 ) );
	
	float2 u = f*f*(3.0-2.0*f);
	return lerp(a, b, u.x) + 
			(c - a)* u.y * (1.0 - u.x) + 
			(d - b) * u.x * u.y;
}
static const int PDXMESH_MAX_INFLUENCE = 4;
static const int PDXMESH_WORLD_MATRIX_OFFSET = 0;
static const int PDXMESH_CONSTANTS_OFFSET = 4;
static const int PDXMESH_USER_DATA_OFFSET = 5;

float4x4 PdxMeshGetWorldMatrix( uint nIndex )
{
	return Create4x4( 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 0], 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 1], 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 2], 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 3] );
}

// OffsetJointIndex -> JointsInstanceIndex + JointIndex
float4x4 PdxMeshGetJointVertexMatrix( uint OffsetJointIndex )
{
	uint BeginIndex = OffsetJointIndex * 3;

	float4 XAxis = float4( JointVertexMatrices[ BeginIndex ].x, JointVertexMatrices[ BeginIndex ].y, JointVertexMatrices[ BeginIndex ].z, 0.0f );
	float4 YAxis = float4( JointVertexMatrices[ BeginIndex ].w, JointVertexMatrices[ BeginIndex + 1 ].x, JointVertexMatrices[ BeginIndex + 1 ].y, 0.0f );
	float4 ZAxis = float4( JointVertexMatrices[ BeginIndex + 1 ].z, JointVertexMatrices[ BeginIndex + 1 ].w, JointVertexMatrices[ BeginIndex + 2 ].x, 0.0f );
	float4 Translation = float4( JointVertexMatrices[ BeginIndex + 2 ].y, JointVertexMatrices[ BeginIndex + 2 ].z, JointVertexMatrices[ BeginIndex + 2 ].w, 1.0f );

	return Create4x4( XAxis, YAxis, ZAxis, Translation );
}

float PdxMeshGetOpacity( uint ObjectInstanceIndex )
{
	return Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].x;
} 

uint GetActiveBlendShapes( uint ObjectInstanceIndex )
{
	return uint( Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].y );
}

uint GetActiveDecals( uint ObjectInstanceIndex ) 
{
	return uint( Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].z );
}

float PdxMeshGetMeshDummyValue( uint ObjectInstanceIndex ) 
{
	return Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].w;
}

float GetFloatAt( uint FloatIndex )
{
	uint VectorIndex = FloatIndex / 4;
	uint ComponentIndex = FloatIndex % 4;

	return BlendShapeDataInstanced[ VectorIndex ][ ComponentIndex ];
}

uint GetUintAt( uint LookupIndex )
{
	return uint( GetFloatAt( LookupIndex ) );
}

uint CalcLinearBlendBufferIndex( uint VertexIndex, uint VertexDataIndex )
{
	return ( VertexDataIndex * BlendShapeVertexCount + VertexIndex );
}

float3 ReadBlendBufferTextureFloat3( uint AtVectorIndex )
{
	int AtFloat = int( AtVectorIndex ) * 3;
	float X = PdxReadBuffer( BlendShapeDataBuffer, AtFloat );
	float Y = PdxReadBuffer( BlendShapeDataBuffer, AtFloat + 1 );
	float Z = PdxReadBuffer( BlendShapeDataBuffer, AtFloat + 2 );
	
	return float3( X, Y, Z );
}

void ApplyBlendShapes( inout float3 PositionOut, inout float3 NormalOut, inout float3 TangentOut, in uint BlendShapeInstanceIndex, in uint ObjectInstanceIndex, in uint VertexID )
{
	uint VertexIndex = VertexID + BlendShapesVertexOffset;
			
	uint VectorIndex = 0;
	uint VectorElement = 0;

	uint ActiveBlendShapes = GetActiveBlendShapes( ObjectInstanceIndex );

	uint IndicesOffset = BlendShapeInstanceIndex;
	uint WeightsOffset = IndicesOffset + ActiveBlendShapes;

	for (uint CurrentBlendShapeIndex = 0; CurrentBlendShapeIndex < ActiveBlendShapes; ++CurrentBlendShapeIndex) 
	{
		float Weight = GetFloatAt( WeightsOffset + CurrentBlendShapeIndex );
		uint BlendShapeOffsetIndex = GetUintAt( IndicesOffset + CurrentBlendShapeIndex );

		uint VertexDataIndex = BlendShapeOffsetIndex * 3;
			
		PositionOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VertexDataIndex;
		NormalOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VertexDataIndex;
		TangentOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VertexDataIndex;
		++VectorElement;
		if (VectorElement == 4)
		{
			VectorElement = 0;
			++VectorIndex;
		}
	}

	NormalOut = normalize( NormalOut );
	TangentOut = normalize( TangentOut );
}

void ApplyBlendShapesPositionOnly( inout float3 PositionOut, in uint BlendShapeInstanceIndex, in uint ObjectInstanceIndex, in uint VertexID )
{
	uint VertexIndex = VertexID + BlendShapesVertexOffset;
	uint VectorIndex = 0; 
	uint VectorElement = 0;

	uint ActiveBlendShapes = GetActiveBlendShapes( ObjectInstanceIndex );

	uint IndicesOffset = BlendShapeInstanceIndex;
	uint WeightsOffset = IndicesOffset + ActiveBlendShapes;

	for ( uint CurrentBlendShapeIndex = 0; CurrentBlendShapeIndex < ActiveBlendShapes; ++CurrentBlendShapeIndex )
	{
		float Weight = GetFloatAt( WeightsOffset + CurrentBlendShapeIndex );
		uint BlendShapeOffsetIndex = GetUintAt( IndicesOffset + CurrentBlendShapeIndex );

		uint VertexDataIndex = BlendShapeOffsetIndex * 3;

		PositionOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VectorElement;
		if ( VectorElement == 4 )
		{
			VectorElement = 0;
			++VectorIndex;
		}
	}
}

	struct VS_OUTPUT_PDXMESH
	{
		float4 Position;
		float3 WorldSpacePos;
		float3 Normal;
		float3 Tangent;
		float3 Bitangent;
		float2 UV0;
		float2 UV1;
		float2 UV2;
	};
	
	struct VS_INPUT_PDXMESH
	{
		float3 Position;
		float3 Normal;
		float4 Tangent;
		float2 UV0;
	#ifdef PDX_MESH_UV1
		float2 UV1;
	#endif
	#ifdef PDX_MESH_UV2
		float2 UV2;
	#endif
	#ifdef PDX_MESH_SKINNED
		uint4 BoneIndex;
		float3 BoneWeight;
	#endif
	#ifdef PDX_MESH_BLENDSHAPES
		uint ObjectInstanceIndex;
		uint BlendShapeInstanceIndex;
		uint VertexID;
	#endif
	};
	
	VS_INPUT_PDXMESH PdxMeshConvertInput( in VS_INPUT_PDXMESHSTANDARD Input )
	{
		VS_INPUT_PDXMESH Out;
		Out.Position = Input.Position;
		Out.Normal = Input.Normal;
		Out.Tangent = Input.Tangent;
		Out.UV0 = Input.UV0;
	#ifdef PDX_MESH_UV1
		Out.UV1 = Input.UV1;
	#endif
	#ifdef PDX_MESH_UV2
		Out.UV2 = Input.UV2;
	#endif
	#ifdef PDX_MESH_SKINNED
		Out.BoneIndex = Input.BoneIndex;
		Out.BoneWeight = Input.BoneWeight;
	#endif
	#ifdef PDX_MESH_BLENDSHAPES
		Out.ObjectInstanceIndex = Input.InstanceIndices.y;
		Out.BlendShapeInstanceIndex = Input.InstanceIndices.z;
		Out.VertexID = Input.VertexID;
	#endif

		return Out;
	}
	
// This depends on the heightmap.fxh, the shader that enables this define will need to include that fxh
#ifdef PDX_MESH_SNAP_VERTICES_TO_TERRAIN
	float3 SnapVerticesToTerrain( float2 WorldSpacePosXZ, float VertexY, float4x4 WorldMatrix )
	{
		float YScale = length( float3( GetMatrixData( WorldMatrix, 0, 1 ), GetMatrixData( WorldMatrix, 1, 1 ), GetMatrixData( WorldMatrix, 2, 1 ) ) );
		return float3( WorldSpacePosXZ.x, GetHeight( WorldSpacePosXZ ) + VertexY * YScale, WorldSpacePosXZ.y );
	}
#endif
	
#ifdef PDX_MESH_SKINNED
	VS_OUTPUT_PDXMESH PdxMeshVertexShader( VS_INPUT_PDXMESH Input, uint JointsInstanceIndex, float4x4 WorldMatrix )
	{
		VS_OUTPUT_PDXMESH Out;

		float4 Position = float4( Input.Position.xyz, 1.0 );
		float3 BaseNormal = Input.Normal;
		float3 BaseTangent = Input.Tangent.xyz;

	#ifdef PDX_MESH_BLENDSHAPES
		ApplyBlendShapes( Position.xyz, BaseNormal, BaseTangent, Input.BlendShapeInstanceIndex, Input.ObjectInstanceIndex, Input.VertexID );
	#endif

		float4 SkinnedPosition = vec4( 0.0 );
		float3 SkinnedNormal = vec3( 0.0 );
		float3 SkinnedTangent = vec3( 0.0 );
		float3 SkinnedBitangent = vec3( 0.0 );

		float4 Weights = float4( Input.BoneWeight.xyz, 1.0 - Input.BoneWeight.x - Input.BoneWeight.y - Input.BoneWeight.z );
		for( int i = 0; i < PDXMESH_MAX_INFLUENCE; ++i )
		{
			uint BoneIndex = Input.BoneIndex[i];
			uint OffsetIndex = BoneIndex + JointsInstanceIndex;

			float4x4 VertexMatrix = PdxMeshGetJointVertexMatrix( OffsetIndex );

			SkinnedPosition += mul( VertexMatrix, Position ) * Weights[ i ];

			float3 XAxis = float3( GetMatrixData( VertexMatrix, 0, 0 ), GetMatrixData( VertexMatrix, 0, 1 ), GetMatrixData( VertexMatrix, 0, 2 ) );
			float3 YAxis = float3( GetMatrixData( VertexMatrix, 1, 0 ), GetMatrixData( VertexMatrix, 1, 1 ), GetMatrixData( VertexMatrix, 1, 2 ) );
			float3 ZAxis = float3( GetMatrixData( VertexMatrix, 2, 0 ), GetMatrixData( VertexMatrix, 2, 1 ), GetMatrixData( VertexMatrix, 2, 2 ) );
			
			float XSqMagnitude = dot( XAxis, XAxis );
			float YSqMagnitude = dot( YAxis, YAxis );
			float ZSqMagnitude = dot( ZAxis, ZAxis );
			
			float3 SqScale = float3( XSqMagnitude, YSqMagnitude, ZSqMagnitude );
			float3 SqScaleReciprocal = float3( 1.f, 1.f, 1.f ) / SqScale;
			
			float3 ScaledNormal = BaseNormal * SqScaleReciprocal;
			float3 ScaledTangent = BaseTangent * SqScaleReciprocal;
			
			float3x3 VertexRotationMatrix = CastTo3x3( VertexMatrix );
			
			float3 Normal = mul( VertexRotationMatrix, ScaledNormal );
			float3 Tangent = mul( VertexRotationMatrix, ScaledTangent );
			float3 Bitangent = cross( Normal, Tangent ) * Input.Tangent.w;

			Normal = normalize( Normal );
			Tangent = normalize( Tangent );
			Bitangent = normalize( Bitangent );

			SkinnedNormal += Normal * Weights[i];
			SkinnedTangent += Tangent * Weights[i];
			SkinnedBitangent += Bitangent * Weights[i];
		}

		Out.Position = mul( WorldMatrix, SkinnedPosition );
		Out.WorldSpacePos = Out.Position.xyz;
		Out.WorldSpacePos /= WorldMatrix[3][3];
		Out.Position = FixProjectionAndMul( ViewProjectionMatrix, Out.Position );

		Out.Normal = normalize( mul( CastTo3x3(WorldMatrix), normalize( SkinnedNormal ) ) );
		Out.Tangent = normalize( mul( CastTo3x3(WorldMatrix), normalize( SkinnedTangent ) ) );
		Out.Bitangent = normalize( mul( CastTo3x3(WorldMatrix), normalize( SkinnedBitangent ) ) );

		Out.UV0 = Input.UV0;
	#ifdef PDX_MESH_UV1
		Out.UV1 = Input.UV1;
	#else
		Out.UV1 = vec2( 0.0 );
	#endif
	#ifdef PDX_MESH_UV2
		Out.UV2 = Input.UV2;
	#else
		Out.UV2 = vec2( 0.0 );
	#endif

		return Out;
	}
	
#else

	VS_OUTPUT_PDXMESH PdxMeshVertexShader( VS_INPUT_PDXMESH Input, uint JointsInstanceIndex, float4x4 WorldMatrix )
	{
		VS_OUTPUT_PDXMESH Out;

		float4 Position = float4( Input.Position.xyz, 1.0 );
		float3 Normal = Input.Normal;
		float3 Tangent = Input.Tangent.xyz;

	#ifdef PDX_MESH_BLENDSHAPES
		ApplyBlendShapes( Position.xyz, Normal, Tangent, Input.BlendShapeInstanceIndex, Input.ObjectInstanceIndex, Input.VertexID );
	#endif

		Out.Normal = normalize( mul( CastTo3x3( WorldMatrix ), Normal ) );
		Out.Tangent = normalize( mul( CastTo3x3( WorldMatrix ), Tangent ) );
		Out.Bitangent = normalize( cross( Out.Normal, Out.Tangent ) * Input.Tangent.w );
		Out.Position = mul( WorldMatrix, Position );
		
	#ifdef PDX_MESH_SNAP_VERTICES_TO_TERRAIN
		Out.Position.xyz = SnapVerticesToTerrain( Out.Position.xz, Input.Position.y, WorldMatrix );
	#endif
	
		Out.WorldSpacePos = Out.Position.xyz;
		Out.WorldSpacePos /= WorldMatrix[3][3];
		Out.Position = FixProjectionAndMul( ViewProjectionMatrix, Out.Position );

		Out.UV0 = Input.UV0;
	#ifdef PDX_MESH_UV1
		Out.UV1 = Input.UV1;
	#else
		Out.UV1 = vec2( 0.0 );
	#endif
	#ifdef PDX_MESH_UV2
		Out.UV2 = Input.UV2;
	#else
		Out.UV2 = vec2( 0.0 );
	#endif

		return Out;
	}
	
#endif

VS_OUTPUT_PDXMESH PdxMeshVertexShaderStandard( VS_INPUT_PDXMESHSTANDARD Input )
{
	return PdxMeshVertexShader( PdxMeshConvertInput( Input ), Input.InstanceIndices.x, PdxMeshGetWorldMatrix( Input.InstanceIndices.y ) );
}

VS_OUTPUT_PDXMESHSHADOW PdxMeshVertexShaderShadow( VS_INPUT_PDXMESH Input, uint JointsInstanceIndex, float4x4 WorldMatrix )
{
	VS_OUTPUT_PDXMESHSHADOW Out;
			
	float4 Position = float4( Input.Position.xyz, 1.0 );

#ifdef PDX_MESH_BLENDSHAPES
	ApplyBlendShapesPositionOnly( Position.xyz, Input.BlendShapeInstanceIndex, Input.ObjectInstanceIndex, Input.VertexID );
#endif
	
#ifdef PDX_MESH_SKINNED
	float4 vWeight = float4( Input.BoneWeight.xyz, 1.0 - Input.BoneWeight.x - Input.BoneWeight.y - Input.BoneWeight.z );
	float4 vSkinnedPosition = vec4( 0.0 );
	for( int i = 0; i < PDXMESH_MAX_INFLUENCE; ++i )
	{
		int nIndex = int( Input.BoneIndex[i] );
		float4x4 VertexMatrix = PdxMeshGetJointVertexMatrix( nIndex + JointsInstanceIndex );
		vSkinnedPosition += mul( VertexMatrix, Position ) * vWeight[ i ];
	}
	Out.Position = mul( WorldMatrix, vSkinnedPosition );
#else
	Out.Position = mul( WorldMatrix, Position );
	
	#ifdef PDX_MESH_SNAP_VERTICES_TO_TERRAIN
		Out.Position.xyz = SnapVerticesToTerrain( Out.Position.xz, Input.Position.y, WorldMatrix );
	#endif
#endif
	Out.Position = FixProjectionAndMul( ViewProjectionMatrix, Out.Position );
	Out.UV = Input.UV0;
	return Out;
}
VS_OUTPUT_PDXMESHSHADOWSTANDARD PdxMeshVertexShaderShadowStandard( VS_INPUT_PDXMESHSTANDARD Input )
{
	VS_OUTPUT_PDXMESHSHADOW CommonOut = PdxMeshVertexShaderShadow( PdxMeshConvertInput(Input), Input.InstanceIndices.x, PdxMeshGetWorldMatrix( Input.InstanceIndices.y ) );
	VS_OUTPUT_PDXMESHSHADOWSTANDARD Out;
	Out.Position = CommonOut.Position;
	Out.UV_InstanceIndex.xy = CommonOut.UV;
	Out.UV_InstanceIndex.z = Input.InstanceIndices.y;
	
	return Out;
}

VS_OUTPUT ConvertOutput( VS_OUTPUT_PDXMESH In )
{
	VS_OUTPUT Out;

	Out.Position = In.Position;
	Out.Normal = In.Normal;
	Out.Tangent = In.Tangent;
	Out.Bitangent = In.Bitangent;
	Out.UV0 = In.UV0;
	Out.UV1 = In.UV1;
	Out.WorldSpacePos = In.WorldSpacePos;
	return Out;
}



// === Main Code === 

VS_OUTPUT_DEBUGNORMAL main( VS_INPUT_DEBUGNORMAL Input )
{
	VS_OUTPUT_DEBUGNORMAL Out;
	
	float NormalOffset = float( Input.VertexID % 2 ) /* Multiply here to change the normal lengths*/; 
	
	float4x4 WorldMatrix = PdxMeshGetWorldMatrix( Input.InstanceIndices.y );
	
	Input.Position = Input.Position + Input.Normal * NormalOffset;

#ifdef PDX_MESH_SKINNED
	float4 Position = float4( Input.Position.xyz, 1.0 );
	
	float4 vWeight = float4( Input.BoneWeight.xyz, 1.0 - Input.BoneWeight.x - Input.BoneWeight.y - Input.BoneWeight.z );
	float4 vSkinnedPosition = vec4( 0.0 );

	for( int i = 0; i < PDXMESH_MAX_INFLUENCE; ++i )
	{
		int nIndex = int( Input.BoneIndex[i] );
		float4x4 VertexMatrix = PdxMeshGetJointVertexMatrix( nIndex + Input.InstanceIndices.x );
		vSkinnedPosition += mul( VertexMatrix, Position ) * vWeight[ i ];
	}

	Out.Position = mul( WorldMatrix, vSkinnedPosition );
#else
	Out.Position = mul( WorldMatrix, float4( Input.Position.xyz, 1.0 ) );
#endif

	Out.Position = FixProjectionAndMul( ViewProjectionMatrix, Out.Position );

	return Out;
}

