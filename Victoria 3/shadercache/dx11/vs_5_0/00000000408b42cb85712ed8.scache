

// === Shader Info === 

// Shader file: gfx/FX/pdxmesh.shader
// Effect: standardShadow
// ===ShaderInfo End===



// === Defines === 

#define PDX_DIRECTX_11
#define VERTEX_SHADER
#define PDX_HLSL
#define PDX_MESH_UV1
#define PDX_MESH_SKINNED
#define TINT_COLOR
#define UNIT_COLOR
#define EMISSIVE_NIGHT
#define UNDERWATER
#define PDX_MAX_HEIGHTMAP_COMPRESS_LEVELS 5
#define JOMINI_REFRACTION_ENABLED
#define HIGH_QUALITY_SHADERS


// === HLSL Macros === 

#define PDX_POSITION SV_Position
#define PDX_COLOR SV_Target
#define PDX_COLOR0 SV_Target0
#define PDX_COLOR0_SRC1 SV_Target1 // Use this when doing dual source blending, currently only supports that for render target #0
#define PDX_COLOR1 SV_Target1
#define PDX_COLOR2 SV_Target2
#define PDX_COLOR3 SV_Target3
#define PDX_COLOR4 SV_Target4
#define PDX_COLOR5 SV_Target5
#define PDX_COLOR6 SV_Target6
#define PDX_COLOR7 SV_Target7
#define PDX_VertexID SV_VertexID
#define PDX_InstanceID SV_InstanceID
#define PDX_DispatchThreadID SV_DispatchThreadID
#define PDX_GroupThreadID SV_GroupThreadID
#define PDX_GroupID SV_GroupID
#define PDX_GroupIndex SV_GroupIndex
#define PDX_TessFactor SV_TessFactor
#define PDX_InsideTessFactor SV_InsideTessFactor
#define PDX_OutputControlPointID SV_OutputControlPointID
#define PDX_DomainLocation SV_DomainLocation
#define PDX_RenderTargetArrayIndex SV_RenderTargetArrayIndex
#define PDX_ViewportArrayIndex SV_ViewportArrayIndex
#define PDX_Depth SV_Depth

#define PdxDomainTypeTriangle "tri"
#define PdxDomainTypeQuad "quad"
#define PdxDomainTypeIsoline "isoline"

#define PdxPartitioningModeInteger "integer"
#define PdxPartitioningModeFractionalEven "fractional_even"
#define PdxPartitioningModeFractionalOdd "fractional_odd"

#define PdxPrimitiveTypePoint point
#define PdxPrimitiveTypeLine line
#define PdxPrimitiveTypeTriangle triangle
#define PdxPrimitiveTypeLineAdjacency lineadj
#define PdxPrimitiveTypeTriangleAdjacency triangleadj

#define PdxTessellatorOutputTopologyPoint "point"
#define PdxTessellatorOutputTopologyLine "line"
#define PdxTessellatorOutputTopologyTriangleCw "triangle_cw"
#define PdxTessellatorOutputTopologyTriangleCcw "triangle_ccw"

#define PdxMeshShaderOutputTopologyLine "line"
#define PdxMeshShaderOutputTopologyTriangle "triangle"

#define mod( X, Y ) ( (X) % (Y) )

float2x2 Create2x2( in float2 x, in float2 y )
{
	return transpose( float2x2( x, y ) );
}
// TODO, Create3x3 should be transposed in hlsl, and not in glsl, and then the mul() arguments should be reversed
#define Create3x3 float3x3
float4x4 Create4x4( in float4 x, in float4 y, in float4 z, in float4 w )
{
	return transpose( float4x4( x, y, z, w ) );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}

#define lessThan( a, b ) ( (a) < (b) )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct PdxTextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
struct PdxTextureSampler2DMS
{
    Texture2DMS<float4>		_Texture;
};

struct PdxTextureSampler2DArray
{
    Texture2DArray	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler3D
{
    Texture3D 		_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler2DCmp
{
    Texture2D 				_Texture;
    SamplerComparisonState 	_Sampler;
};

// These are for separate Texture/Sampler objects
#define PdxSampleTex2D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex2DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )
#define PdxSampleTex2DGrad(tex,samp,uv,ddx,ddy) (tex).SampleGrad( (samp), (uv), (ddx), (ddy) )
#define PdxSampleTex2DGather(tex,samp,uv) (tex).Gather( (samp), (uv) )

#define PdxSampleTex3D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex3DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )

#define PdxTexture2DSize(tex,size) (tex).GetDimensions( (size).x, (size).y )
#define PdxTexture2DLoad(tex,uv,lod) (tex).Load( int3((uv), (lod)) )

#define PdxTexture2DArraySize(tex,size,elements) (tex).GetDimensions( (size).x, (size).y, elements )
#define PdxTexture2DArrayLoad(tex,uv,arrayindex,lod) (tex).Load( int4((uv), (arrayindex), (lod)) )

#define PdxTexture3DSize(tex,size) (tex).GetDimensions( (size).x, (size).y, (size).z )
#define PdxTexture3DLoad(tex,uv,lod) (tex).Load( int4((uv), (lod)) )

// These are for the combined TextureSampler objects
#define PdxTex2DSize(samp,size) PdxTexture2DSize( (samp)._Texture, (size) )
#define PdxTex2D(samp,uv) PdxSampleTex2D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLod(samp,uv,lod) PdxSampleTex2DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex2DLodOffset(samp,uv,lod,offset) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod), (offset) )
#define PdxTex2DBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )
#define PdxTex2DGrad(samp,uv,ddx,ddy) PdxSampleTex2DGrad( (samp)._Texture, (samp)._Sampler, (uv), (ddx), (ddy) )
#define PdxTex2DGather(samp,uv) PdxSampleTex2DGather( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLoad(samp,uv,lod) PdxTexture2DLoad( (samp)._Texture, (uv), (lod) )
#define PdxTex2DMultiSampled(samp,texelcoord,sampleidx) (samp)._Texture.Load( (texelcoord), (sampleidx) )
#define PdxTex2DMSSize(samp,size,samples) (samp)._Texture.GetDimensions( (size).x, (size).y, (samples) )

#define PdxTex3D(samp,uv) PdxSampleTex3D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex3DLod(samp,uv,lod) PdxSampleTex3DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex3DLoad(samp,uv,lod) PdxTexture3DLoad( (samp)._Texture, (uv), (lod) )

#define PdxTexCube(samp,uv) (samp)._Texture.Sample( (samp)._Sampler, (uv) )
#define PdxTexCubeLod(samp,uv,lod) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod) )
#define PdxTexCubeBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )

#define PdxTex2DCmpLod0(samp,uv,value) (samp)._Texture.SampleCmpLevelZero( (samp)._Sampler, (uv), (value) )

// Vulkan fails to compile shaders with this function call properly
// Commenting it out until we can fix this issue
//#define PdxCalculateLod(samp,uv) (samp)._Texture.CalculateLevelOfDetail( (samp)._Sampler, (uv) )

float4x4 FixProjection( float4x4 ProjectionMatrix )
{
	// Enable for "debug" drawing to see if some objects is missing fix
	#if 0
	for ( int i = 0; i < 4; ++i )
	{
		GetMatrixData( ProjectionMatrix, 0, i ) *= 0.5;
		GetMatrixData( ProjectionMatrix, 1, i ) *= 0.5;
	}
	#endif
	
	return ProjectionMatrix;
}

#define PdxBufferFloat  Buffer<float>
#define PdxBufferFloat2	Buffer<float2>
#define PdxBufferFloat3	Buffer<float3>
#define PdxBufferFloat4	Buffer<float4>
#define PdxBufferInt  	Buffer<int>
#define PdxBufferInt2	Buffer<int2>
#define PdxBufferInt3	Buffer<int3>
#define PdxBufferInt4	Buffer<int4>
#define PdxBufferUint   Buffer<uint>
#define PdxBufferUint2	Buffer<uint2>
#define PdxBufferUint3	Buffer<uint3>
#define PdxBufferUint4	Buffer<uint4>

#define PdxStructuredBuffer StructuredBuffer
#define PdxRWStructuredBuffer RWStructuredBuffer
#define PdxRasterizerOrderedBuffer RasterizerOrderedBuffer
#define PdxRasterizerOrderedStructuredBuffer RasterizerOrderedStructuredBuffer

float 	PdxReadBuffer( in PdxBufferFloat Buf, int Index )  		{ return Buf.Load( Index ); }
float2	PdxReadBuffer2( in PdxBufferFloat2 Buf, int Index )		{ return Buf.Load( Index ); }
float3	PdxReadBuffer3( in PdxBufferFloat3 Buf, int Index )		{ return Buf.Load( Index ); }
float4	PdxReadBuffer4( in PdxBufferFloat4 Buf, int Index )		{ return Buf.Load( Index ); }

int  	PdxReadBuffer( in PdxBufferInt Buf, int Index ) 		{ return Buf.Load( Index ); }
int2 	PdxReadBuffer2( in PdxBufferInt2 Buf, int Index )		{ return Buf.Load( Index ); }
int3 	PdxReadBuffer3( in PdxBufferInt3 Buf, int Index )    	{ return Buf.Load( Index ); }
int4 	PdxReadBuffer4( in PdxBufferInt4 Buf, int Index )    	{ return Buf.Load( Index ); }

uint  	PdxReadBuffer( in PdxBufferUint Buf, int Index )    	{ return Buf.Load( Index ); }
uint2 	PdxReadBuffer2( in PdxBufferUint2 Buf, int Index )  	{ return Buf.Load( Index ); }
uint3 	PdxReadBuffer3( in PdxBufferUint3 Buf, int Index )  	{ return Buf.Load( Index ); }
uint4 	PdxReadBuffer4( in PdxBufferUint4 Buf, int Index )  	{ return Buf.Load( Index ); }

#define PdxReadRWBuffer(buffer,index) (buffer)[(index)]
#define PdxWriteRWBuffer(buffer,index,value) (buffer)[(index)] = (value)

#define Quaternion float4

#define UINT8_MAX 0xff
#define UINT16_MAX 0xffff
#define UINT32_MAX 0xffffffff
#define PI 3.14159265359

float2x2 Create2x2( float a, float b, float c, float d ) { return Create2x2( float2( a, b ), float2( c, d ) ); }

#define PdxSampleTex2DLod0(tex,samp,uv) PdxSampleTex2DLod( (tex), (samp), (uv), 0 )

#define PdxTexture2DLoad0(tex,uv) PdxTexture2DLoad( (tex), (uv), 0 )

#define PdxTexture2DArrayLoad0(tex,uv,arrayindex) PdxTexture2DArrayLoad( (tex), (uv), (arrayindex), 0)

#define PdxTex2DProj(samp,uv_proj) PdxTex2DLod0( (samp), (uv_proj).xy / (uv_proj).w )
#define PdxTex2DLod0(samp,uv) PdxTex2DLod( (samp), (uv), 0 )
#define PdxTex2DLod0Offset(samp,uv,offset) PdxTex2DLodOffset( (samp), (uv), 0, (offset) )
#define PdxTex2DLoad0(samp,uv) PdxTex2DLoad( (samp), (uv), 0 )

#define PdxTex3DLod0(samp,uv) PdxTex3DLod( (samp), (uv), 0 )
#define PdxTex3DLoad0(samp,uv) PdxTex3DLoad( (samp), (uv), 0 )

float4 FixProjectionAndMul( float4x4 ProjectionMatrix, float4 Vector )
{
	return mul( FixProjection( ProjectionMatrix ), Vector );
}



// === Vertex Structs === 

struct VS_INPUT_PDXMESHSTANDARD
{
	float3 Position : POSITION;
	float3 Normal : TEXCOORD0;
	float4 Tangent : TEXCOORD1;
	float2 UV0 : TEXCOORD2;
#ifdef PDX_MESH_UV1
	float2 UV1 : TEXCOORD3;
#endif
#ifdef PDX_MESH_UV2
	float2 UV2 : TEXCOORD4;
#endif
	uint4 InstanceIndices : TEXCOORD5;
#ifdef PDX_MESH_SKINNED
	uint4 BoneIndex : TEXCOORD6;
	float3 BoneWeight : TEXCOORD7;
#endif
	uint VertexID : PDX_VertexID;
};
struct VS_OUTPUT_PDXMESHSHADOW
{
	float4 Position : PDX_POSITION;
	float2 UV : TEXCOORD0;
};
struct VS_OUTPUT_PDXMESHSHADOWSTANDARD
{
	float4 Position : PDX_POSITION;
	float3 UV_InstanceIndex : TEXCOORD0;
};
struct VS_INPUT_DEBUGNORMAL
{
	float3 Position : POSITION;
	float3 Normal : TEXCOORD0;
#ifdef PDX_MESH_SKINNED
	uint4 BoneIndex : TEXCOORD1;
	float3 BoneWeight : TEXCOORD2;
#endif
	uint2 InstanceIndices : TEXCOORD4;
	uint VertexID : PDX_VertexID;
};
struct VS_OUTPUT_DEBUGNORMAL
{
	float4 Position : PDX_POSITION;
};
struct VS_INPUT_PDX_TERRAIN
{
	float2 UV : TEXCOORD0;
	float2 LodDirection : TEXCOORD1;
	uint4 NodeOffset_Scale_Lerp : TEXCOORD2;
};
struct VS_INPUT_PDX_TERRAIN_SKIRT
{
	float2 UV : TEXCOORD0;
	float2 LodDirection : TEXCOORD1;
	uint4 NodeOffset_Scale_Lerp : TEXCOORD2;
	uint VertexID : PDX_VertexID;
};
struct VS_INPUT_WATER
{
	int2 Position : POSITION;
};
struct VS_OUTPUT_WATER
{
	float4 Position : PDX_POSITION;
	float3 WorldSpacePos : TEXCOORD0;
	float2 UV01 : TEXCOORD1;
};
struct VS_INPUT_PDXMESH_MAPOBJECT
{
	float3 Position : POSITION;
	float3 Normal : TEXCOORD0;
	float4 Tangent : TEXCOORD1;
	float2 UV0 : TEXCOORD2;
#ifdef PDX_MESH_UV1
	float2 UV1 : TEXCOORD3;
#endif
#ifdef PDX_MESH_UV2
	float2 UV2 : TEXCOORD4;
#endif
	uint InstanceIndex24_Opacity8 : TEXCOORD5;
};
struct VS_INPUT_DEBUGNORMAL_BATCHED
{
	float3 Position : POSITION;
	float3 Normal : TEXCOORD0;
	uint InstanceIndex : TEXCOORD4;
	uint VertexID : PDX_VertexID;
};
struct VS_OUTPUT_DEBUGNORMAL_BATCHED
{
	float4 Position : PDX_POSITION;
};
struct VS_OUTPUT_MAPOBJECT_SHADOW
{
	float4 Position : PDX_POSITION;
	float2 UV : TEXCOORD0;
	uint InstanceIndex24_Opacity8 : TEXCOORD1;
};
struct EdgeOfWorldConstants
{
	float4 _HighCloudColor;
	float4 _LowCloudColor;
	float2 _BaseCloudScrolling;
	float2 _Cloud1Scrolling;
	float2 _Cloud2Scrolling;
	int _BaseCloudTileFactor;
	float _BaseCloudStrength;
	float _BaseCloudPosition;
	float _BaseCloudContrast;
	int _Cloud1TileFactor;
	float _Cloud1Strength;
	float _Cloud1Position;
	float _Cloud1Contrast;
	int _Cloud2TileFactor;
	float _Cloud2Strength;
	float _Cloud2Position;
	float _Cloud2Contrast;
	float _ColorMultiply;
	float _FadeDistance;
};
struct MapCoaConstants
{
	float _MapCoaAngle;
	float _MapCoaAspectRatio;
	float _MapCoaSize;
	float _MapCoaSizeFlatmap;
	float _MapCoaBlend;
	float _MapCoaBlendFlatmap;
	float _MapCoaBlendOccupation;
	float _MapCoaBlendOccupationFlatmap;
	float _MapCoaBlendFadeStart;
	float _MapCoaBlendFadeEnd;
	float _MapCoaRowOffset;
	float _MapCoaRowCount;
	float _MapCoaStripeScale;
	float _MapCoaStripeScaleFlatmap;
	bool _MapCoaEnabled;
	float _Padding04;
};
struct SNavalEmblemConstantsData
{
	float4 _CausticsColor;
	float4 _EmblemColor;
	float _EmblemOpacity;
	float _EmblemOpacityFlatmap;
	float _EmblemSize;
	float _EmblemSizeFlatmap;
	float _CausticsStrength;
	float _CausticsArea;
	float _CausticsUv;
	float _OrderOffsetDistance;
	float _OrderIconSize;
	float _OrderCircleSize;
	float Padding03;
	float Padding04;
};
struct SStandardMeshUserData
{
	float _CountryIndex;
	float _RandomValue;
	float _Padding02;
	float _Padding03;
	float4 _OffsetAndScale;
};
struct SBuildingMeshUserdata
{
	float4 _LightColor;
	float _SolValue;
	float _RandomValue;
	float _ShouldLightActivate;
	float _Padding04;
};
struct SRevolutionMeshUserdata
{
	float _IgColorIndex;
	float _Padding01;
	float _Padding02;
	float _Padding03;
};
struct PS_COLOR_SSAO
{
	float4 Color : PDX_COLOR0;
	float4 SSAOColor : PDX_COLOR1;
};
struct VS_OUTPUT
{
	float4 Position : PDX_POSITION;
	float3 Normal : TEXCOORD0;
	float3 Tangent : TEXCOORD1;
	float3 Bitangent : TEXCOORD2;
	float2 UV0 : TEXCOORD3;
	float2 UV1 : TEXCOORD4;
	float3 WorldSpacePos : TEXCOORD5;
	uint InstanceIndex : TEXCOORD6;
};


// === Constant Buffers === 

cbuffer pdx_hlsl_cbPdxCamera
{
	float4x4 ViewProjectionMatrix;
	float4x4 InvViewProjectionMatrix;
	float4x4 ViewMatrix;
	float4x4 InvViewMatrix;
	float4x4 ProjectionMatrix;
	float4x4 InvProjectionMatrix;
	float4x4 ShadowMapTextureMatrix;
	float3 CameraPosition;
	float ZNear;
	float3 CameraLookAtDir;
	float ZFar;
	float3 CameraUpDir;
	float CameraFoV;
	float3 CameraRightDir;
	float _UpscaleLodBias;
	float _UpscaleLodBiasNative;
	float _UpscaleLodBiasMultiplier;
	float _UpscaleLodBiasMultiplierNative;
	float _UpscaleLodBiasEnabled;
}
cbuffer pdx_hlsl_cbPdxMeshInstanceData
{
	float4 Data[2];
}
cbuffer pdx_hlsl_cbPdxMeshJointVertexInstanceData
{
	float4 JointVertexMatrices[3];
}
cbuffer pdx_hlsl_cbPdxMeshBlendShapeInstanceData
{
	float4 BlendShapeDataInstanced[2];
}
cbuffer pdx_hlsl_cbPdxMeshBlendShapeConstants
{
	uint BlendShapeVertexCount;
	uint BlendShapesVertexOffset;
}
cbuffer pdx_hlsl_cbPdxHeightmapConstants
{
	float4 TileToHeightMapScaleAndOffset[5];
	float2 WorldSpaceToLookup;
	float2 OriginalHeightmapToWorldSpace;
	float2 IndirectionSize;
	float2 PackedHeightMapSize;
	float BaseTileSize;
	float HeightScale;
}
cbuffer pdx_hlsl_cbPdxTerrainConstants
{
	float3 _NormalScale;
	float _QuadtreeLeafNodeScale;
	float2 _NormalStepSize;
	float2 _DetailTileFactor;
	float _DetailBlendRange;
	float _SkirtSize;
	float2 _NormQuadtreeToWorld;
	float2 _WorldSpaceToTerrain0To1;
	float2 _WorldSpaceToDetail;
	float2 _DetailTexelSize;
	float2 _DetailTextureSize;
	float2 _WorldExtents;
}
cbuffer pdx_hlsl_cbPdxShadowmap
{
	float ShadowFadeFactor;
	float Bias;
	float KernelScale;
	float ShadowScreenSpaceScale;
	int NumSamples;
	float4 DiscSamples[8];
}
cbuffer pdx_hlsl_cbJominiEnvironment
{
	float3 AmbientPosX;
	float CubemapIntensity;
	float3 AmbientNegX;
	float3 AmbientPosY;
	float3 AmbientNegY;
	float3 AmbientPosZ;
	float3 AmbientNegZ;
	float3 ShadowAmbientPosX;
	float3 ShadowAmbientNegX;
	float3 ShadowAmbientPosY;
	float3 ShadowAmbientNegY;
	float3 ShadowAmbientPosZ;
	float3 ShadowAmbientNegZ;
	float FogMax;
	float3 SunDiffuse;
	float SunIntensity;
	float3 ToSunDir;
	float FogBegin2;
	float3 FogColor;
	float FogEnd2;
	float4x4 CubemapYRotation;
	float TreeSwayLoopSpeed;
	float TreeSwayWindStrengthSpatialModifier;
	float TreeSwaySpeed;
	float TreeSwayWindClusterSizeModifier;
	float3 TreeSwayWorldDirection;
	float TreeHeightImpactOnSway;
	float TreeSwayScale;
}
cbuffer pdx_hlsl_cbJominiWater
{
	float2 _ScreenResolution;
	float _WaterReflectionNormalFlatten;
	float _WaterZoomedInZoomedOutFactor;
	float3 _WaterToSunDir;
	float _WaterDiffuseMultiplier;
	float3 _WaterColorShallow;
	float _WaterSpecular;
	float3 _WaterColorDeep;
	float _WaterSpecularFactor;
	float3 _WaterColorMapTint;
	float _WaterColorMapTintFactor;
	float _WaterGlossScale;
	float _WaterGlossBase;
	float _WaterFresnelBias;
	float _WaterFresnelPow;
	float _WaterCubemapIntensity;
	float _WaterFoamScale;
	float _WaterFoamDistortFactor;
	float _WaterFoamShoreMaskDepth;
	float _WaterFoamShoreMaskSharpness;
	float _WaterFoamNoiseScale;
	float _WaterFoamNoiseSpeed;
	float _WaterFoamStrength;
	float _WaterRefractionScale;
	float _WaterRefractionShoreMaskDepth;
	float _WaterRefractionShoreMaskSharpness;
	float _WaterRefractionFade;
	float2 _WaterWave1Scale;
	float _WaterWave1Rotation;
	float _WaterWave1Speed;
	float2 _WaterWave2Scale;
	float _WaterWave2Rotation;
	float _WaterWave2Speed;
	float2 _WaterWave3Scale;
	float _WaterWave3Rotation;
	float _WaterWave3Speed;
	float _WaterWave1NormalFlatten;
	float _WaterWave2NormalFlatten;
	float _WaterWave3NormalFlatten;
	float _WaterFlowTime;
	float2 _WaterFlowMapSize;
	float _WaterFlowNormalScale;
	float _WaterFlowNormalFlatten;
	float _WaterHeight;
	float _WaterFadeShoreMaskDepth;
	float _WaterFadeShoreMaskSharpness;
	float _WaterSeeThroughDensity;
	float _WaterSeeThroughShoreMaskDepth;
	float _WaterSeeThroughShoreMaskSharpness;
}
cbuffer pdx_hlsl_cbJominiColorMapConstants
{
	float2 IndirectionMapSize;
	float2 InvIndirectionMapSize;
	float2 GradientTextureSize;
	float2 InvGradientTextureSize;
	float2 SecondaryProvinceColorsOffset;
	float2 HighlightProvinceColorsOffset;
	float2 AlternateProvinceColorsOffset;
	float IndirectionMapDepth;
}
cbuffer pdx_hlsl_cbGradientBorders
{
	float GB_GradientAlphaInside;
	float GB_GradientAlphaOutside;
	float GB_GradientWidth;
	float GB_GradientColorMul;
	float GB_EdgeWidth;
	float GB_EdgeSmoothness;
	float GB_EdgeAlpha;
	float GB_EdgeColorMul;
	float GB_PreLightingBlend;
	float GB_PostLightingBlend;
}
cbuffer pdx_hlsl_cbGameSharedConstants
{
	EdgeOfWorldConstants _EowConstants;
	MapCoaConstants _CoaConstants;
	SNavalEmblemConstantsData _NavalEmblemConstants;
	float2 MapSize;
	float2 _ProvinceMapSize;
	float4 _SSAOColorMesh;
	float4 _MeshTintColor;
	float4 _DecentralizedCountryColor;
	float4 _ImpassableTerrainColor;
	float4 _NightLightColor;
	float4 _FlatmapFoldsColor;
	float4 _FlatmapLinesColor;
	float4 _FlatmapDetailsColor;
	float3 _SecondSunDiffuse;
	float _SecondSunIntensity;
	float3 _SecondSunDir;
	float GlobalTime;
	float _FlatmapHeight;
	float _FlatmapLerp;
	float _ShorelineMaskBlur;
	float _ShorelineExtentStr;
	float _ShorelineAlpha;
	int _ShoreLinesUVScale;
	float _FlatmapOverlayLandOpacity;
	float _FlatmapEquatorPosition;
	int _FlatmapEquatorTiling;
	int _ImpassableTerrainTiling;
	float _ImpassableTerrainHeight;
	float _DistanceFadeStart;
	float _DistanceFadeEnd;
	float _WaterShadowMultiplier;
	float _MeshTintHeightMin;
	float _MeshTintHeightMax;
	float _SSAOAlphaTrees;
	float _SSAOAlphaTerrain;
	float _FogCloseOffset;
	float _FogFarOffset;
	float _FogWidthScale;
	float _DistanceRoughnessPosition;
	float _DistanceRoughnessBlend;
	float _DistanceRoughnessScale;
	float _OverlayOpacity;
	int _MapPaintingTextureTiling;
	int _MapPaintingFlatmapTextureTiling;
	bool _UseMapmodeTextures;
	bool _UsePrimaryRedAsGradient;
	bool _UseStripeOccupation;
	float _NightWaterAdjustment;
	float _DayNightBrightness;
	float _DayNightValue;
	float _DayValue;
	float _NightValue;
	float _LightsFadeTime;
	float _LightsActivateBegin;
	float _LightsActivateEnd;
	float _SolHighTintHeight;
	float _SolHighTintContrast;
	float _SolHighHue;
	float _SolHighSaturation;
	float _SolHighValue;
	float _SolLowTintHeight;
	float _SolLowTintContrast;
	float _SolDebugHigh;
	float _SolDebugLow;
}
cbuffer pdx_hlsl_cbJominiFogOfWar
{
	float2 FogOfWarAlphaMapSize;
	float2 InverseWorldSize;
	float2 FogOfWarPatternSpeed;
	float FogOfWarPatternStrength;
	float FogOfWarPatternTiling;
	float FogOfWarTime;
	float FogOfWarAlphaMin;
}


// === Samplers === 

SamplerState _sampler_0_ : register(s0);
SamplerState _sampler_1_ : register(s1);
SamplerState _sampler_2_ : register(s2);


// === Textures === 

Texture2D HeightLookupTexture_Texture;
static PdxTextureSampler2D HeightLookupTexture = { HeightLookupTexture_Texture, _sampler_0_ };
Texture2D PackedHeightTexture_Texture;
static PdxTextureSampler2D PackedHeightTexture = { PackedHeightTexture_Texture, _sampler_1_ };
Texture2D WindMapTree_Texture;
static PdxTextureSampler2D WindMapTree = { WindMapTree_Texture, _sampler_2_ };
Texture2D FlowMapTexture_Texture;
static PdxTextureSampler2D FlowMapTexture = { FlowMapTexture_Texture, _sampler_2_ };


// === RW Textures === 



// === Buffer Textures === 

PdxBufferFloat4 MapObjectBuffer;
PdxBufferFloat BlendShapeDataBuffer;


// === RW Buffer Textures === 



// === Bindless === 



// === Shader Code === 

float CalcViewSpaceDepth( float Depth )
{
	Depth = 2.0 * Depth - 1.0;
	float ZLinear = 2.0 * ZNear * ZFar / (ZFar + ZNear - Depth * (ZFar - ZNear));
	return ZLinear;
}

float3 ViewSpacePosFromDepth( float Depth, float2 UV )
{
	float x = UV.x * 2.0 - 1.0;
	float y = (1.0 - UV.y) * 2.0 - 1.0;
	
	float4 ProjectedPos = float4( x, y, Depth, 1.0 );
	
	float4 ViewSpacePos = mul( InvProjectionMatrix, ProjectedPos );
	
	return ViewSpacePos.xyz / ViewSpacePos.w;
}

float3 WorldSpacePositionFromDepth( float Depth, float2 UV )
{
	float3 WorldSpacePos = mul( InvViewMatrix, float4( ViewSpacePosFromDepth( Depth, UV ), 1.0 ) ).xyz;		
	return WorldSpacePos;  
}
float CalcRandom( float Seed )
{
	float DotProduct = float( Seed ) * 12.9898;
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcRandom( float2 Seed )
{
	float DotProduct = dot( Seed, float2( 12.9898, 78.233 ) );
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcRandom( float3 Seed )
{
	float DotProduct = dot( Seed, float3( 12.9898,78.233,144.7272 ) );
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcNoise( float2 Pos ) 
{
	int2 i = int2( floor( Pos ) );
	float2 f = frac( Pos );

	float a = CalcRandom( i );
	float b = CalcRandom( i + int2( 1, 0 ) );
	float c = CalcRandom( i + int2( 0, 1 ) );
	float d = CalcRandom( i + int2( 1, 1 ) );
	
	float2 u = f*f*(3.0-2.0*f);
	return lerp(a, b, u.x) + 
			(c - a)* u.y * (1.0 - u.x) + 
			(d - b) * u.x * u.y;
}
static const int PDXMESH_MAX_INFLUENCE = 4;
static const int PDXMESH_WORLD_MATRIX_OFFSET = 0;
static const int PDXMESH_CONSTANTS_OFFSET = 4;
static const int PDXMESH_USER_DATA_OFFSET = 5;

float4x4 PdxMeshGetWorldMatrix( uint nIndex )
{
	return Create4x4( 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 0], 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 1], 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 2], 
		Data[nIndex + PDXMESH_WORLD_MATRIX_OFFSET + 3] );
}

// OffsetJointIndex -> JointsInstanceIndex + JointIndex
float4x4 PdxMeshGetJointVertexMatrix( uint OffsetJointIndex )
{
	uint BeginIndex = OffsetJointIndex * 3;

	float4 XAxis = float4( JointVertexMatrices[ BeginIndex ].x, JointVertexMatrices[ BeginIndex ].y, JointVertexMatrices[ BeginIndex ].z, 0.0f );
	float4 YAxis = float4( JointVertexMatrices[ BeginIndex ].w, JointVertexMatrices[ BeginIndex + 1 ].x, JointVertexMatrices[ BeginIndex + 1 ].y, 0.0f );
	float4 ZAxis = float4( JointVertexMatrices[ BeginIndex + 1 ].z, JointVertexMatrices[ BeginIndex + 1 ].w, JointVertexMatrices[ BeginIndex + 2 ].x, 0.0f );
	float4 Translation = float4( JointVertexMatrices[ BeginIndex + 2 ].y, JointVertexMatrices[ BeginIndex + 2 ].z, JointVertexMatrices[ BeginIndex + 2 ].w, 1.0f );

	return Create4x4( XAxis, YAxis, ZAxis, Translation );
}

float PdxMeshGetOpacity( uint ObjectInstanceIndex )
{
	return Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].x;
} 

uint GetActiveBlendShapes( uint ObjectInstanceIndex )
{
	return uint( Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].y );
}

uint GetActiveDecals( uint ObjectInstanceIndex ) 
{
	return uint( Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].z );
}

float PdxMeshGetMeshDummyValue( uint ObjectInstanceIndex ) 
{
	return Data[ ObjectInstanceIndex + PDXMESH_CONSTANTS_OFFSET ].w;
}
float2 GetLookupCoordinates( float2 WorldSpacePosXZ )
{
	return clamp( WorldSpacePosXZ * WorldSpaceToLookup, vec2( 0.0 ), vec2( 0.999999 ) );
}

float4 SampleLookupTexture( float2 LookupCoordinates )
{
	float4 IndirectionSample = PdxTex2DLod0( HeightLookupTexture, ( floor( LookupCoordinates * IndirectionSize ) + vec2( 0.5 ) ) / IndirectionSize ) * 255.0;
	return IndirectionSample;
}

float2 GetTileUV( float2 LookupCoordinates, float4 IndirectionSample, out float CurrentTileScale )
{
	float CurrentTileSize = (BaseTileSize - 1.0) / IndirectionSample.z + 1;
	float CurrentTileOffset = 0.5 / CurrentTileSize;
	CurrentTileScale = (CurrentTileSize - 1.0) / CurrentTileSize;

	float2 WithinTileZeroToOne = frac( LookupCoordinates * IndirectionSize );
	float2 WithinTileUV = vec2( CurrentTileOffset ) + WithinTileZeroToOne * CurrentTileScale;
	float2 TileUV = IndirectionSample.rg + WithinTileUV;

	return TileUV;
}

float2 GetHeightMapCoordinates( float2 WorldSpacePosXZ )
{
	float2 LookupCoordinates = GetLookupCoordinates( WorldSpacePosXZ );
	float4 IndirectionSample = SampleLookupTexture( LookupCoordinates );

	float4 CurrentTileToHeightMapScaleAndOffset = TileToHeightMapScaleAndOffset[int(IndirectionSample.w)];
	float CurrentTileScale;
	float2 TileUV = GetTileUV( LookupCoordinates, IndirectionSample, CurrentTileScale );

	float2 HeightMapCoord = TileUV * CurrentTileToHeightMapScaleAndOffset.xy + CurrentTileToHeightMapScaleAndOffset.zw; // 0 -> 1 in packed heightmap
	return HeightMapCoord;
}

float GetHeight01( float2 WorldSpacePosXZ )
{
	float2 HeightMapCoord = GetHeightMapCoordinates( WorldSpacePosXZ );
	return PdxTex2DLod0( PackedHeightTexture, HeightMapCoord ).r;
}

float GetHeight( float2 WorldSpacePosXZ )
{
	return GetHeight01( WorldSpacePosXZ ) * HeightScale;
}

float GetHeightMultisample01( float2 WorldSpacePosXZ, float FilterSize )
{
	float2 LookupCoordinates = GetLookupCoordinates( WorldSpacePosXZ );
	float2 FilterSizeInWorldSpace = FilterSize * OriginalHeightmapToWorldSpace;
	float2 FilterSizeInLookup = FilterSizeInWorldSpace * WorldSpaceToLookup * IndirectionSize;

	float2 FracCoordinates = frac( LookupCoordinates * IndirectionSize );
	float2 MinFracCoordinatesScaled = min( FracCoordinates, vec2(1.0) - FracCoordinates );
	bool2 InBorder = lessThan( MinFracCoordinatesScaled, FilterSizeInLookup );

	float Height = 0.0;
	if ( any( InBorder ) )
	{
		Height = GetHeight01( WorldSpacePosXZ );
		Height += GetHeight01( WorldSpacePosXZ + float2( -FilterSizeInWorldSpace.x, 0 ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( 0, -FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( FilterSizeInWorldSpace.x, 0 ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( 0, FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( -FilterSizeInWorldSpace.x, -FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2(  FilterSizeInWorldSpace.x, -FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2(  FilterSizeInWorldSpace.x,  FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( -FilterSizeInWorldSpace.x,  FilterSizeInWorldSpace.y ) );
	}
	else
	{
		float4 IndirectionSample = SampleLookupTexture( LookupCoordinates );

		float4 CurrentTileToHeightMapScaleAndOffset = TileToHeightMapScaleAndOffset[int(IndirectionSample.w)];
		float CurrentTileScale;
		float2 TileUV = GetTileUV( LookupCoordinates, IndirectionSample, CurrentTileScale );

		float2 HeightMapCoord = TileUV * CurrentTileToHeightMapScaleAndOffset.xy + CurrentTileToHeightMapScaleAndOffset.zw; // 0 -> 1 in packed heightmap
		float2 FilterSizeInTile = FilterSizeInLookup * CurrentTileToHeightMapScaleAndOffset.xy * CurrentTileScale;

		Height = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( -FilterSizeInTile.x, 0 ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( 0, -FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( FilterSizeInTile.x, 0 ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( 0, FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( -FilterSizeInTile.x, -FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(  FilterSizeInTile.x, -FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(  FilterSizeInTile.x,  FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( -FilterSizeInTile.x,  FilterSizeInTile.y ) ).r;
	}

	Height /= 9.0;
	return Height;
}

float GetHeightMultisample( float2 WorldSpacePosXZ, float FilterSize )
{
	return GetHeightMultisample01( WorldSpacePosXZ, FilterSize ) * HeightScale;
}

static const float c_x0 = -1.0;
static const float c_x1 =  0.0;
static const float c_x2 =  1.0;
static const float c_x3 =  2.0;

float CubicLagrange(float A, float B, float C, float D, float t)
{
	return
		A *
		(
			(t - c_x1) / (c_x0 - c_x1) *
			(t - c_x2) / (c_x0 - c_x2) *
			(t - c_x3) / (c_x0 - c_x3)
		) +
		B *
		(
			(t - c_x0) / (c_x1 - c_x0) *
			(t - c_x2) / (c_x1 - c_x2) *
			(t - c_x3) / (c_x1 - c_x3)
		) +
		C *
		(
			(t - c_x0) / (c_x2 - c_x0) *
			(t - c_x1) / (c_x2 - c_x1) *
			(t - c_x3) / (c_x2 - c_x3)
		) +
		D *
		(
			(t - c_x0) / (c_x3 - c_x0) *
			(t - c_x1) / (c_x3 - c_x1) *
			(t - c_x2) / (c_x3 - c_x2)
		);
}

float BicubicLagrangeBilinearGetHeight01( float2 WorldSpacePosXZ )
{
	float2 Pixel = WorldSpacePosXZ - 0.5;

	float2 FracCoord = frac(Pixel);
	Pixel = floor(Pixel) + 0.5;

	float C00 = GetHeight01( float2( Pixel.x - 1, Pixel.y - 1 ) );
	float C10 = GetHeight01( float2( Pixel.x - 0, Pixel.y - 1 ) );
	float C20 = GetHeight01( float2( Pixel.x + 1, Pixel.y - 1 ) );
	float C30 = GetHeight01( float2( Pixel.x + 2, Pixel.y - 1 ) );

	float C01 = GetHeight01( float2( Pixel.x - 1, Pixel.y - 0 ) );
	float C11 = GetHeight01( float2( Pixel.x - 0, Pixel.y - 0 ) );
	float C21 = GetHeight01( float2( Pixel.x + 1, Pixel.y - 0 ) );
	float C31 = GetHeight01( float2( Pixel.x + 2, Pixel.y - 0 ) );

	float C02 = GetHeight01( float2( Pixel.x - 1, Pixel.y + 1 ) );
	float C12 = GetHeight01( float2( Pixel.x - 0, Pixel.y + 1 ) );
	float C22 = GetHeight01( float2( Pixel.x + 1, Pixel.y + 1 ) );
	float C32 = GetHeight01( float2( Pixel.x + 2, Pixel.y + 1 ) );

	float C03 = GetHeight01( float2( Pixel.x - 1, Pixel.y + 2 ) );
	float C13 = GetHeight01( float2( Pixel.x - 0, Pixel.y + 2 ) );
	float C23 = GetHeight01( float2( Pixel.x + 1, Pixel.y + 2 ) );
	float C33 = GetHeight01( float2( Pixel.x + 2, Pixel.y + 2 ) );

	float CP0X = CubicLagrange(C00, C10, C20, C30, FracCoord.x);
	float CP1X = CubicLagrange(C01, C11, C21, C31, FracCoord.x);
	float CP2X = CubicLagrange(C02, C12, C22, C32, FracCoord.x);
	float CP3X = CubicLagrange(C03, C13, C23, C33, FracCoord.x);

	return CubicLagrange(CP0X, CP1X, CP2X, CP3X, FracCoord.y);
}

// /SAMPLING API
// Gamma correction utility
float ToGamma(float aLinear)
{
	return pow(aLinear, 1.0/2.2);
}
float3 ToGamma(float3 aLinear)
{
	return pow(aLinear, vec3(1.0/2.2));
}
float ToLinear(float aGamma)
{
	return pow(aGamma, 2.2);
}
float3 ToLinear(float3 aGamma)
{
	return pow(aGamma, vec3(2.2));
}
float4 ToLinear(float4 aGamma)
{
	return float4(pow(aGamma.rgb, vec3(2.2)), aGamma.a);
}

// Color value conversions
float3 RGBtoHSV( float3 RGB )
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = RGB.g < RGB.b ? float4(RGB.bg, K.wz) : float4(RGB.gb, K.xy);
	float4 q = RGB.r < p.x ? float4(p.xyw, RGB.r) : float4(RGB.r, p.yzx);

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x );
}
float3 HSVtoRGB( float3 HSV )
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs( frac(HSV.xxx + K.xyz) * 6.0 - K.www );
	return HSV.z * lerp( K.xxx, clamp(p - K.xxx, 0.0, 1.0), HSV.y );
}
float3 HSVtoRGB( float H, float S, float V )
{
	return HSVtoRGB( float3( H, S, V ) );
}
float4 RGBtoHSV( float4 RGBa )
{
	return float4( RGBtoHSV( RGBa.rgb ), RGBa.a );
}
float4 HSVtoRGB( float4 HSVa )
{
	return float4( HSVtoRGB( HSVa.xyz ), HSVa.a );
}
float4 HSVtoRGB( float H, float S, float V, float a )
{
	return HSVtoRGB( float4( H, S, V, a ) );
}

// Below are multiple blend mode utilities (See: https://en.wikipedia.org/wiki/Blend_modes)
// Most of these uses a typical implementation unless stated otherwise

// Multiply blend mode
float3 Multiply( float3 Base, float3 Blend, float Opacity )
{
	return Base * Blend * Opacity + Base * ( 1.0 - Opacity );
}

// Screen blend mode
float3 Screen( float3 Base, float3 Blend )
{
	return 1.0 - ( ( 1.0 - Base ) * ( 1.0 - Blend ) );
}

// Overlay blend mode
float Overlay( float Base, float Blend )
{
	return (Base < 0.5) ? (2.0 * Base * Blend) : (1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend));
}
float3 Overlay( float3 Base, float3 Blend )
{
	return float3( Overlay(Base.r, Blend.r), Overlay(Base.g, Blend.g), Overlay(Base.b, Blend.b) );
}
float Overlay( float Base, float Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 Overlay( float3 Base, float3 Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 GetOverlay( float3 Color, float3 OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}
float GetOverlay( float Color, float OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}

// Color dodge blend mode (Dodge and burn)
float ColorDodge( float Base, float Blend )
{
	return (Blend == 1.0) ? Blend : min( Base / (1.0 - Blend), 1.0 );
}
float3 ColorDodge( float3 Base, float3 Blend )
{
	return float3( ColorDodge(Base.r, Blend.r), ColorDodge(Base.g, Blend.g), ColorDodge(Base.b, Blend.b) );
}
float3 ColorDodge( float3 Base, float3 Blend, float Opacity )
{
	return ColorDodge( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Pegtop's SoftLight blend formula
float SoftLight( float Base, float Blend )
{
	return ( 1 - 2 * Blend ) * Base * Base + 2 * Base * Blend;
}
float3 SoftLight( float3 Base, float3 Blend )
{
	return float3( SoftLight( Base.r, Blend.r ), SoftLight( Base.g, Blend.g ), SoftLight( Base.b, Blend.b ) );
}
float SoftLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}
float3 SoftLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}

// Hardlight blend mode
float HardLight(float Base, float Blend)
{
	return Blend >= 0.5 ? 1.0 - 2 * ( 1.0 - Blend ) * ( 1.0 - Base ) : 2.0 * Base * Blend;
}
float3 HardLight( float3 Base, float3 Blend )
{
	return float3( HardLight( Base.r, Blend.r ), HardLight( Base.g, Blend.g ), HardLight( Base.b, Blend.b ) );
}
float HardLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}
float3 HardLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}

// Simple arithmetic blend modes (See: https://en.wikipedia.org/wiki/Blend_modes#Simple_arithmetic_blend_modes)
// Lighten only blend mode
float3 Add( float3 Base, float3 Blend, float Opacity )
{
	return ( Base + Blend ) * Opacity + Base * ( 1.0 - Opacity );
}
float Lighten( float Base, float Blend )
{
	return max( Base, Blend );
}
float3 Lighten( float3 Base, float3 Blend )
{
	return float3( Lighten(Base.r, Blend.r), Lighten(Base.g, Blend.g), Lighten(Base.b, Blend.b) );
}
float3 Lighten( float3 Base, float3 Blend, float Opacity )
{
	return Lighten( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Darken only blend mode
float Darken( float Base, float Blend )
{
	return min( Base, Blend );
}
float3 Darken( float3 Base, float3 Blend )
{
	return float3( Darken(Base.r, Blend.r), Darken(Base.g, Blend.g), Darken(Base.b, Blend.b) );
}
float3 Darken( float3 Base, float3 Blend, float Opacity )
{
	return Darken( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

float3 Levels( float3 vInColor, float3 vMinInput, float3 vMaxInput )
{
	float3 vRet = saturate( vInColor - vMinInput );
	vRet /= vMaxInput - vMinInput;
	return saturate( vRet );
}
float Levels( float vInValue, float vMinValue, float vMaxValue )
{
	return saturate( ( vInValue - vMinValue ) / ( vMaxValue - vMinValue ) );
}

// Intuitive way to dynamically grow and shrink masks, similar to Histogram Scan in Substance Designer.
// vInValue is typically a mask texture, vPosition is the value to be remapped to 0.5, vRange is the softness of that remap.
float LevelsScan( float vInValue, float vPosition, float vRange )
{
	return Levels( vInValue, vPosition - ( vRange / 2 ), vPosition + ( vRange / 2 ) );
}

float3 UnpackNormal( float4 NormalMapSample )
{
	float3 vNormalSample = NormalMapSample.rgb - 0.5;
	vNormalSample.g = -vNormalSample.g;
	return vNormalSample;
}

float3 UnpackNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackNormal( PdxTex2D( NormalTex, uv ) );
}

float4 IntToNiceColor( int TheInt )
{
	const int HueDivision = 6; // As in how many times the color wheel is divided
	const int SatDivision = 5;

	float Hue = mod( TheInt / (float)HueDivision, 1.0 );
	float Saturation = 1.0 - ( 1.0 / (float)SatDivision ) * ( TheInt / HueDivision );
	float Value = Saturation;
	return float4( HSVtoRGB( Hue, Saturation, Value ), 1 );
}

float3 UnpackRRxGNormal( float4 NormalMapSample )
{
	float x = NormalMapSample.g * 2.0 - 1.0;
	float y = NormalMapSample.a * 2.0 - 1.0;
	y = -y;
	float z = sqrt( saturate( 1.0 - x * x - y * y ) );
	return float3( x, y, z );
}

float3 UnpackRRxGNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackRRxGNormal( PdxTex2D( NormalTex, uv ) );
}

float3 ReorientNormal( float3 BaseNormal, float3 DetailNormal )
{
	float3 t = BaseNormal + float3( 0.0, 0.0, 1.0 );
	float3 u = DetailNormal * float3( -1.0, -1.0, 1.0 );
	float3 Normal = normalize( t * dot( t, u ) - u * t.z );
	return Normal;
}

float Fresnel( float NdotL, float FresnelBias, float FresnelPow )
{
	return saturate( FresnelBias + (1.0 - FresnelBias) * pow( 1.0 - NdotL, FresnelPow ) );
}

#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * ( (Value - OldMin) / (OldMax - OldMin) )
float Remap( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 Remap( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 Remap( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * saturate( (Value - OldMin) / (OldMax - OldMin) )
float RemapClamped( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 RemapClamped( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 RemapClamped( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
// These macros can be used as drop in replacements for their counterparts without the "Upscale" postfix.
// They will take care of using the correct lod bias when sampling the textures to account for rendering happening in lower resolution. (See https://gsg.pages.build.paradox-interactive.com/tech/cw/develop/clausewitz/pdx_gfx/upscaling/ for more information)
// Note that by default when using upscaling it will add an extra -1 lod bias, this is to try and boost the quality a bit, it works because the temporal anti aliasing component can take care of some of the aliasing artifacts that is introduced by the lod bias.
// This might not always be preferrable, in those cases the "UpscaleBias" postfix versions can be used to undo the extra lod bias, the provided bias should most likely be in the range (0.0, 1.0), for example doing PdxTex2DUpscaleBias( Tex, Uv, 1.0 ) will net you the same texture quality you would get rendering in native resolution.
// There is also a "UpscaleNative" that is basically the same as UpscaleBias with bias 1.0, but slightly more optimized.

#ifdef PDX_UPSCALING_ENABLED
	float2 ApplyUpscaleLodBiasMultiplier( float2 Derivative ) { return Derivative * _UpscaleLodBiasMultiplier; }
	float2 ApplyUpscaleNativeLodBiasMultiplier( float2 Derivative ) { return Derivative * _UpscaleLodBiasMultiplierNative; }
	
	#define PdxTex2DUpscale( TextureSampler, Uv ) PdxTex2DBias( (TextureSampler), (Uv), _UpscaleLodBias )
	#define PdxTex2DUpscaleNative( TextureSampler, Uv ) PdxTex2DBias( (TextureSampler), (Uv), _UpscaleLodBiasNative )
	#define PdxTex2DUpscaleBias( TextureSampler, Uv, Bias ) PdxTex2DBias( (TextureSampler), (Uv), (_UpscaleLodBias + (Bias) * _UpscaleLodBiasEnabled) )
	
	#define PdxTex2DGradUpscale( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleLodBiasMultiplier( Ddx ), ApplyUpscaleLodBiasMultiplier( Ddy ) )
	#define PdxTex2DGradUpscaleNative( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleNativeLodBiasMultiplier( Ddx ), ApplyUpscaleNativeLodBiasMultiplier( Ddy ) )
	#define PdxTex2DGradUpscaleBias( TextureSampler, Uv, Ddx, Ddy, Bias ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleLodBiasMultiplier( Ddx ) * exp2( (Bias) * _UpscaleLodBiasEnabled ), ApplyUpscaleLodBiasMultiplier( Ddy ) * exp2( (Bias) * _UpscaleLodBiasEnabled ) )
#else
	float2 ApplyUpscaleLodBiasMultiplier( float2 Derivative ) { return Derivative; }
	float2 ApplyUpscaleNativeLodBiasMultiplier( float2 Derivative ) { return Derivative; }
	
	#define PdxTex2DUpscale( TextureSampler, Uv ) PdxTex2D( (TextureSampler), (Uv) )
	#define PdxTex2DUpscaleNative( TextureSampler, Uv ) PdxTex2D( (TextureSampler), (Uv) )
	// We intentionally discard the Bias argument here since that is used to tweak the upscale added lodbias
	#define PdxTex2DUpscaleBias( TextureSampler, Uv, Bias ) PdxTex2D( (TextureSampler), (Uv) )
	
	#define PdxTex2DGradUpscale( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
	#define PdxTex2DGradUpscaleNative( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
	// We intentionally discard the Bias argument here since that is used to tweak the upscale added lodbias
	#define PdxTex2DGradUpscaleBias( TextureSampler, Uv, Ddx, Ddy, Bias ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
#endif
float GetLerpedHeight( float2 WorldSpacePosXZ, float2 LodDirection )
{
	float h1 = GetHeight( WorldSpacePosXZ - LodDirection );
	float h2 = GetHeight( WorldSpacePosXZ + LodDirection );

	//h1 = GetHeightMultisample( WorldSpacePosXZ - LodDirection, 0.25 );
	//h2 = GetHeightMultisample( WorldSpacePosXZ + LodDirection, 0.25 );

	return (h1 + h2) * 0.5;
}

float3 CalculateNormal( float2 WorldSpacePosXZ )
{
#ifdef TERRAIN_WRAP_X
	float TerrainSizeX = 1.0 / _WorldSpaceToTerrain0To1.x;

	float HeightMinX = GetHeight01( float2( mod( WorldSpacePosXZ.x + TerrainSizeX - _NormalStepSize.x, TerrainSizeX ), WorldSpacePosXZ.y ) );
	float HeightMaxX = GetHeight01( float2( mod( WorldSpacePosXZ.x + TerrainSizeX + _NormalStepSize.x, TerrainSizeX ), WorldSpacePosXZ.y ) );
#else
	float HeightMinX = GetHeight01( WorldSpacePosXZ + float2(-_NormalStepSize.x, 0) );
	float HeightMaxX = GetHeight01( WorldSpacePosXZ + float2(_NormalStepSize.x, 0) );
#endif
	float HeightMinZ = GetHeight01( WorldSpacePosXZ + float2(0, -_NormalStepSize.y) );
	float HeightMaxZ = GetHeight01( WorldSpacePosXZ + float2(0, _NormalStepSize.y) );

	//float2 LookupCoordinates = GetLookupCoordinates( WorldSpacePosXZ );
	//float2 NormalStepSizeInLookup = NormalStepSize * WorldSpaceToLookup * IndirectionSize;
	//
	//float2 FracCoordinates = frac( LookupCoordinates * IndirectionSize );
	//float2 MinFracCoordinatesScaled = min( FracCoordinates, vec2(1.0) - FracCoordinates );
	//bool2 InBorder = lessThan( MinFracCoordinatesScaled, NormalStepSizeInLookup );
    //
	//float HeightMinX = 0.0;
	//float HeightMaxX = 0.0;
	//float HeightMinZ = 0.0;
	//float HeightMaxZ = 0.0;
	//if ( any( InBorder ) )
	//{
	//	HeightMinX = GetHeight01( WorldSpacePosXZ + float2(-NormalStepSize.x, 0) );
	//	HeightMaxX = GetHeight01( WorldSpacePosXZ + float2(NormalStepSize.x, 0) );
	//	HeightMinZ = GetHeight01( WorldSpacePosXZ + float2(0, -NormalStepSize.y) );
	//	HeightMaxZ = GetHeight01( WorldSpacePosXZ + float2(0, NormalStepSize.y) );
	//}
	//else
	//{
	//	float4 IndirectionSample = SampleLookupTexture( LookupCoordinates );
	//
	//	float4 CurrentTileToHeightMapScaleAndOffset = TileToHeightMapScaleAndOffset[int(IndirectionSample.w)];
	//	float CurrentTileScale;
	//	float2 TileUV = GetTileUV( LookupCoordinates, IndirectionSample, CurrentTileScale );
	//
	//	float2 HeightMapCoord = TileUV * CurrentTileToHeightMapScaleAndOffset.xy + CurrentTileToHeightMapScaleAndOffset.zw; // 0 -> 1 in packed heightmap
	//	float2 NormalStepSizeInTile = NormalStepSizeInLookup * CurrentTileToHeightMapScaleAndOffset.xy * CurrentTileScale;
	//
	//	HeightMinX = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(-NormalStepSizeInTile.x, 0) );
	//	HeightMaxX = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(NormalStepSizeInTile.x, 0) );
	//	HeightMinZ = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(0, -NormalStepSizeInTile.y) );
	//	HeightMaxZ = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(0, NormalStepSizeInTile.y) );
	//}

	float3 Normal = float3( HeightMinX - HeightMaxX, 2.0, HeightMinZ - HeightMaxZ ) * _NormalScale;
	return normalize(Normal);
}

// Rotates normals to the heightmap terrain normal
float3 SimpleRotateNormalToTerrain( float3 Normal, float2 WorldSpacePosXZ )
{
	float3 TerrainNormal = CalculateNormal( WorldSpacePosXZ );
	float3 Up = float3( 0.0, 1.0, 0.0 );

	float3 Axis = cross( Up, TerrainNormal );
	float Angle = acos( dot( Up, TerrainNormal ) ) * abs( Normal.y );

	return lerp( dot( Axis, Normal ) * Axis, Normal, cos( Angle ) ) + cross( Axis, Normal ) * sin( Angle );
}

// For debugging
float GetTextureBorder( float2 UV, float2 TextureSize, float BorderSize )
{
	float2 FracScaledUV = frac( UV * TextureSize );
	if ( FracScaledUV.x < BorderSize || FracScaledUV.x > (1.0 - BorderSize) || FracScaledUV.y < BorderSize || FracScaledUV.y > (1.0 - BorderSize) )
	{
		return 1.0;
	}
	else
	{
		return 0.0;
	}
}

float GetModValue( float value, float vMod )
{
	return mod(round(value), vMod) * (1.0 / (vMod - 1.0));
}

float GetModValueFloor( float value, float vMod )
{
	return mod(floor(value), vMod) * (1.0 / (vMod - 1.0));
}

float GetMod2Value( float value )
{
	if ( abs( mod( round(value), 2.0 ) - 1.0 ) < 0.01 )
	{
		return 1.0;
	}
	else
	{
		return 0.0;
	}
}
// Sine wave, remapped to 0-1
float Sin01( float Angle )
{
	return ( sin( Angle ) * 0.5 ) + 0.5;
}

// Cubic bezier 	// Reference: https://www.tinaja.com/text/bezmath.html
float SlopeFromT (float T, float A, float B, float C)
{
	return 1.0 / ( 3.0 * A * T * T + 2.0 * B * T + C ); 
}
float XFromT ( float T, float A, float B, float C, float D )
{
	return A * ( T * T * T ) + B * ( T * T ) + C * T + D;
}
float YFromT ( float T, float E, float F, float G, float H )
{
	return E * ( T * T * T ) + F * ( T * T ) + G * T + H;
}
float CubicBezier( float Value, float2 Point1, float2 Point2 )
{
	float y0 = 0.0;
	float x0 = 0.0;
	float y1 = Point1.y;
	float x1 = Point1.x;
	float y2 = Point2.y;
	float x2 = Point2.x;
	float y3 = 1.0;
	float x3 = 1.0;

	float A = x3 - 3.0 * x2 + 3.0 * x1 - x0;
	float B = 3.0 * x2 - 6.0 * x1 + 3.0 * x0;
	float C = 3.0 * x1 - 3.0 * x0;
	float D = x0;

	float E = y3 - 3.0 * y2 + 3.0 * y1 - y0;
	float F = 3.0 * y2 - 6.0 * y1 + 3.0 * y0;
	float G = 3.0 * y1 - 3.0 * y0;
	float H = y0;

	float CurrentT = Value;
	for (int i = 0; i < 5; i++ )
	{
		float CurrentX = XFromT( CurrentT, A, B, C , D ); 
		float CurrentSlope = SlopeFromT ( CurrentT, A, B, C );
		CurrentT -= ( CurrentX - Value ) * ( CurrentSlope );
		CurrentT = clamp( CurrentT, 0.0, 1.0 ); 
	} 

	float y = YFromT ( CurrentT, E, F, G, H );
	return y;
}
float2 RotateDisc( float2 Disc, float2 Rotate )
{
	return float2( Disc.x * Rotate.x - Disc.y * Rotate.y, Disc.x * Rotate.y + Disc.y * Rotate.x );
}

float CalculateShadow( float4 ShadowProj, PdxTextureSampler2DCmp ShadowMap )
{
	ShadowProj.xyz = ShadowProj.xyz / ShadowProj.w;
	
	float RandomAngle = CalcRandom( round( ShadowScreenSpaceScale * ShadowProj.xy ) ) * 3.14159 * 2.0;
	float2 Rotate = float2( cos( RandomAngle ), sin( RandomAngle ) );

	// Sample each of them checking whether the pixel under test is shadowed or not
	float ShadowTerm = 0.0;
	for( int i = 0; i < NumSamples; i++ )
	{
		float4 Samples = DiscSamples[i] * KernelScale;
		ShadowTerm += PdxTex2DCmpLod0( ShadowMap, ShadowProj.xy + RotateDisc( Samples.xy, Rotate ), ShadowProj.z - Bias );
		ShadowTerm += PdxTex2DCmpLod0( ShadowMap, ShadowProj.xy + RotateDisc( Samples.zw, Rotate ), ShadowProj.z - Bias );
	}
	
	// Get the average
	ShadowTerm *= 0.5; // We have 2 samples per "sample"
	ShadowTerm = ShadowTerm / float(NumSamples);
	
	float3 FadeFactor = saturate( float3( 1.0 - abs( 0.5 - ShadowProj.xy ) * 2.0, 1.0 - ShadowProj.z ) * 32.0 ); // 32 is just a random strength on the fade
	ShadowTerm = lerp( 1.0, ShadowTerm, min( min( FadeFactor.x, FadeFactor.y ), FadeFactor.z ) );
	
	return lerp( 1.0, ShadowTerm, ShadowFadeFactor );
}
static const float TWO_PI = 6.28318530718f;

static const float SHADOW_AMBIENT_MIN_FACTOR = 0.0;
static const float SHADOW_AMBIENT_MAX_FACTOR = 0.3;
float4x4 GetWorldMatrixMapObject( in uint InstanceIndex )
{
	int i = int(InstanceIndex) * 4;
	return Create4x4( PdxReadBuffer4( MapObjectBuffer, i+0 ), PdxReadBuffer4( MapObjectBuffer, i+1 ), PdxReadBuffer4( MapObjectBuffer, i+2 ), PdxReadBuffer4( MapObjectBuffer, i+3 ) );
}
uint UnpackAndGetMapObjectInstanceIndex( in uint InstanceIndex24_Opacity8 )
{
	return ( InstanceIndex24_Opacity8 >> 8 ) & uint(0x00ffffff);
}
float UnpackAndGetMapObjectOpacity( in uint InstanceIndex24_Opacity8 )
{
	const float OpacityScale = 1.0f / float(0x0000007f);
	float Opacity = float(uint(InstanceIndex24_Opacity8 & uint(0x0000007f))) * OpacityScale;
	if( (InstanceIndex24_Opacity8 & uint(0x00000080) ) != 0 )
	{
		Opacity *= -1.0f;
	}
	return Opacity;
}
float4x4 UnpackAndGetMapObjectWorldMatrix( in uint InstanceIndex24_Opacity8 )
{
	uint InstanceIndex = UnpackAndGetMapObjectInstanceIndex( InstanceIndex24_Opacity8 );
	return GetWorldMatrixMapObject( InstanceIndex );
}
void UnpackMapObjectInstanceData( in uint InstanceIndex24_Opacity8, out uint InstanceIndex, out float Opacity )
{
	InstanceIndex = UnpackAndGetMapObjectInstanceIndex( InstanceIndex24_Opacity8 );
	Opacity = UnpackAndGetMapObjectOpacity( InstanceIndex24_Opacity8 );
}
float4 ColorSample( float2 Coord, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap )
{
	float2 ColorIndex = PdxTex2D( IndirectionMap, Coord ).rg;
	return PdxTex2DLoad0( ColorMap, int2( ColorIndex * IndirectionMapDepth + vec2(0.5f) ) );
}

float4 ColorSampleAtOffset( float2 Coord, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap, float2 Offset )
{
	float2 ColorIndex = PdxTex2D( IndirectionMap, Coord ).rg;
	return PdxTex2DLoad0( ColorMap, int2( ColorIndex * IndirectionMapDepth + vec2(0.5) + ( Offset ) ) );
}
    
float4 BilinearColorSample( float2 Coord, float2 TextureSize, float2 InvTextureSize, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap )
{
	float2 Pixel = Coord * TextureSize + 0.5;
	
	float2 FracCoord = frac(Pixel);
	Pixel = floor(Pixel) / TextureSize - InvTextureSize / 2.0;

	float4 C11 = ColorSample( Pixel, IndirectionMap, ColorMap );
	float4 C21 = ColorSample( Pixel + float2( InvTextureSize.x, 0.0), IndirectionMap, ColorMap );
	float4 C12 = ColorSample( Pixel + float2( 0.0, InvTextureSize.y), IndirectionMap, ColorMap );
	float4 C22 = ColorSample( Pixel + InvTextureSize, IndirectionMap, ColorMap );

	float4 x1 = lerp(C11, C21, FracCoord.x);
	float4 x2 = lerp(C12, C22, FracCoord.x);
	return lerp(x1, x2, FracCoord.y);
}

float4 BilinearColorSampleAtOffset( float2 Coord, float2 TextureSize, float2 InvTextureSize, PdxTextureSampler2D IndirectionMap, PdxTextureSampler2D ColorMap, float2 TextureOffset )
{
	float2 Pixel = ( Coord * TextureSize + 0.5 );
	
	float2 FracCoord = frac(Pixel);
	Pixel = floor(Pixel) / TextureSize - InvTextureSize / 2.0;

	float4 C11 = ColorSampleAtOffset( Pixel, IndirectionMap, ColorMap, TextureOffset );
	float4 C21 = ColorSampleAtOffset( Pixel + float2( InvTextureSize.x, 0.0), IndirectionMap, ColorMap, TextureOffset );
	float4 C12 = ColorSampleAtOffset( Pixel + float2( 0.0, InvTextureSize.y), IndirectionMap, ColorMap, TextureOffset );
	float4 C22 = ColorSampleAtOffset( Pixel + InvTextureSize, IndirectionMap, ColorMap, TextureOffset );

	float4 x1 = lerp(C11, C21, FracCoord.x);
	float4 x2 = lerp(C12, C22, FracCoord.x);
	return lerp(x1, x2, FracCoord.y);
}


float CalculateStripeMask( in float2 UV, float Offset )
{
	// diagonal
	float t = 3.14159 / 8.0;
	float w = 12000;			  // larger value gives smaller width
	
	float StripeMask = cos( ( UV.x * cos( t ) * w ) + ( UV.y * sin( t ) * w ) + Offset ); 
	StripeMask = smoothstep(0.0, 1.0, StripeMask * 2.2f );
	return StripeMask;
}	

void ApplyDiagonalStripes( inout float3 BaseColor, float3 StripeColor, float StripeAlpha, float2 WorldSpacePosXZ )
{
	float Mask = CalculateStripeMask( WorldSpacePosXZ, 0.f );
	float OffsetMask = CalculateStripeMask( WorldSpacePosXZ, -0.5f );
	float Shadow = 1 - saturate( Mask - OffsetMask ) ;
	Mask *= StripeAlpha;
	BaseColor = lerp( BaseColor, BaseColor * Shadow, StripeAlpha );
	BaseColor = lerp( BaseColor, StripeColor.rgb, Mask );
}

void ApplyDiagonalStripes( inout float4 BaseColor, float4 StripeColor, float ShadowAmount, float2 WorldSpacePosXZ )
{
	float Mask = CalculateStripeMask( WorldSpacePosXZ, 0.0f );
	float OffsetMask = CalculateStripeMask( WorldSpacePosXZ, -0.5f );
	float Shadow = 1.0f - saturate( Mask - OffsetMask );
	Mask *= StripeColor.a;
	BaseColor.rgb = lerp( BaseColor.rgb, BaseColor.rgb * Shadow, Mask * ShadowAmount );
	BaseColor = lerp( BaseColor, StripeColor, Mask );
}
float4 AlphaBlendAOverB( float4 A, float4 B )
{
	float Alpha = A.a + B.a * ( 1.0f - A.a );
	float3 Color = A.rgb * A.a + B.rgb * B.a * ( 1.0f - A.a );
	Color /= clamp( Alpha, 0.01f, 1.0f );
	return float4( Color, Alpha );
}

// Vertical Rays
float RayValue( in float2 coord, in float frequency, in float travelRate, in float maxStrength )
{
	float ny = 2.0f * ( coord.y - 0.5f );
	float ny2 = min( 1.0f, 2.5f - 2.5f * ny * ny );

	float xModifier = 1.0f * ( cos( GlobalTime * travelRate + coord.x * frequency ) - 0.5f );
	float yModifier = sin( coord.y );
	return maxStrength * xModifier * yModifier * ny2;
}

float Hash1_2( in float2 x )
{
	return frac( sin( dot( x, float2( 52.127f, 61.2871f) ) ) * 521.582f );
}

float2 Hash2_2( in float2 x )
{
	return frac( sin( mul( Create2x2( 20.52f, 24.1994f, 70.291f, 80.171f ),  x ) * 492.194 ) );
}

float2 Noise2_2( float2 uv )
{
	float2 f = smoothstep( 0.0f, 1.0f, frac( uv ) );

	float2 uv00 = floor( uv );
	float2 uv01 = uv00 + float2( 0, 1 );
	float2 uv10 = uv00 + float2( 1, 0 );
	float2 uv11 = uv00 + 1.0f;
	float2 v00 = Hash2_2( uv00 );
	float2 v01 = Hash2_2( uv01 );
	float2 v10 = Hash2_2( uv10 );
	float2 v11 = Hash2_2( uv11 );

	float2 v0 = lerp( v00, v01, f.y );
	float2 v1 = lerp ( v10, v11, f.y );
	float2 v = lerp( v0, v1, f.x );

	return v;
}

// Rotates point around 0,0
float2 Rotate( in float2 p, in float deg )
{
	float s = sin( deg );
	float c = cos( deg );
	p = mul( Create2x2( s, c, -c, s ), p );
	return p;
}

float CalculateStripeMask( float2 UV, float Offset, float Width )
{
	// Diagonal
	float t = 3.14159 / ( 8.0 );
	float w = 3000 * Width;			  // larger value gives smaller width

	float StripeMask = cos( ( UV.x * cos( t ) * w ) + ( UV.y * sin( t ) * w ) + Offset );
	StripeMask = smoothstep( 0.0, 1.0, StripeMask * 2.2f );
	return StripeMask;
}

float FadeCloseAlpha( float Alpha )
{
	// Close fade
	float FadeStart = ( _DistanceFadeStart - _DistanceFadeEnd );
	float CloseZoomBlend = FadeStart - CameraPosition.y + _DistanceFadeEnd;
	CloseZoomBlend = smoothstep( FadeStart, 0.0f, CloseZoomBlend );
	float FadedAlpha = Alpha * CloseZoomBlend;

	return FadedAlpha;
}
// WATER CANAL //
#define WATER_CANAL_DEPTH_MAX 0.35
#define WATER_CANAL_DEPTH_AMP 70.0

// DEVASTATION //
// Water
#define WATER_DEVASTATION_COLOR float3( 0.18, 0.125, 0.09 )
#define WATER_DEVASTATION_MULT 1.5
#define SHORE_DEVASTATION_COLOR float3( 0.172, 0.13, 0.11 )
#define SHORE_DEVASTATION_MULT 1.25

// Road
#define ROAD_DEVASTATION_COLOR float3( 0.172, 0.13, 0.11 )
#define ROAD_DEVASTATION_MULT 1.6
#define ROAD_DEVASTATION_MAX 0.66

// Building
#define BUILDING_DEVASTATION_MULT 2.0
#define BUILDING_DEVASTATION_UV_SCALE 30
#define BUILDING_DEVASTATION_HEIGHT_MIN 0.0
#define BUILDING_DEVASTATION_HEIGHT_MAX 1.2

// Decal
#define DECAL_DEVASTATION_COLOR float3( 0.172, 0.13, 0.11 )
#define DECAL_DEVASTATION_MULT 2.0

// OCCUPATION HIGHLIGHT
#define OCCUPATION_HIGHLIGHT_STRENGTH 3.0
#define OCCUPATION_HIGHLIGHT_ALPHA 0.9
#define OCCUPATION_HIGHLIGHT_COLOR_MULT 1.0
#define OCCUPATION_HIGHLIGHT_POSITION 0.0
#define OCCUPATION_HIGHLIGHT_CONTRAST 0.1

// MAPMODE TEXTURE
#define MAPMODE_UV_ROW_OFFSET 0
#define MAPMODE_UV_ROW_COUNT 0

// TREE SWAY MULTIPLIERS
// Bush Tree
#define BUSH_TREE_HEIGHT_IMPACT 2.0
#define BUSH_TREE_SWAY_SCALE 1.5

// Medium Tree
#define MEDIUM_TREE_SWAY_SPEED 1.3
#define MEDIUM_TREE_HEIGHT_IMPACT 3.0
#define MEDIUM_TREE_SWAY_SCALE 0.75

// Large Tree
#define TALL_TREE_SWAY_SPEED 2.0
#define TALL_TREE_HEIGHT_IMPACT 1.0
#define TALL_TREE_SWAY_SCALE 1.0
uint GetUserDataUint( uint InstanceIndex )
{
	return uint( Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 0 ].x );
}
float GetUserDataFloat( uint InstanceIndex )
{
	return uint( Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 0 ].x );
}
int GetUserDataCountryIndex( uint InstanceIndex )
{
	return int( Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 0 ].x );
}
float4 GetUserDataBuildingLightColor( uint InstanceIndex )
{
	return Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 0 ];
}
float GetUserDataPrettyValue( uint InstanceIndex )
{
	return Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 1 ].x;
}
float GetUserDataRandomValueCity( uint InstanceIndex )
{
	return Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 1 ].y;
}
float GetUserDataShouldLightActivate( uint InstanceIndex )
{
	return Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 1 ].z;
}

SStandardMeshUserData GetStandardMeshUserData( uint InstanceIndex )
{
	SStandardMeshUserData UserData;
	UserData._CountryIndex = Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 0 ].x;
	UserData._RandomValue = Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 0 ].y;
	UserData._OffsetAndScale = Data[ InstanceIndex + PDXMESH_USER_DATA_OFFSET + 1 ];
	return UserData;
}
float GameCalculateDistanceFogFactor( float3 WorldSpacePos )
{
	// Offset towards camera look direction
	float Scalar = CameraPosition.y / -CameraLookAtDir.y;
	float3 IntersectionPoint = CameraPosition + Scalar * CameraLookAtDir;
	float3 FogOffset = CameraLookAtDir * ( _FogCloseOffset + _FogFarOffset * saturate( smoothstep(0.0f, 600.0f, CameraPosition.y ) ) );
	FogOffset.y = 0.0f;	// Don't offset height

	// Rotate and scale with view
	float ScalingX = _FogWidthScale;
	float ScalingY = 1.0f + 1.0f * ( 1.0f + CameraLookAtDir.y );
	float2 secondaryPrincipal = float2( CameraRightDir.z, -CameraRightDir.x );
	float3 Diff = ( IntersectionPoint + FogOffset ) - WorldSpacePos;
	Diff.xz = float2( dot( Diff.xz, CameraRightDir.xz ) * ( 1.0 / ScalingX ), dot( Diff.xz, secondaryPrincipal ) * ( 1.0 / ScalingY ) );

	// Fog factor (amount)
	float vFogFactor = 1.0 - abs( normalize( Diff ).y ); // abs b/c of reflections
	float vSqDistance = dot( Diff, Diff );
	float vMin = ( vSqDistance - FogBegin2 ) / ( FogEnd2 - FogBegin2 );
	return saturate( vMin * vFogFactor * FogMax );
}

float3 GameApplyDistanceFog( float3 Color, float3 WorldSpacePos )
{
	float factor = GameCalculateDistanceFogFactor( WorldSpacePos ) ;
	return lerp( Color, HardLight( Color, FogColor ), factor );
}
float GameApplyDistanceFog( float Value, float3 WorldSpacePos )
{
	float factor = GameCalculateDistanceFogFactor( WorldSpacePos ) ;

	float FogValue_ = ( FogColor.x + FogColor.y + FogColor.z ) / 3;
	FogValue_ = HardLight( Value, FogValue_ );

	return lerp( Value, FogValue_, factor );
}
// Reference List of IGs
// IG_ARMED_FORCES
// IG_DEVOUT
// IG_INDUSTRIALISTS
// IG_INTELLIGENTSIA
// IG_LANDOWNERS
// IG_PETTY_BOURGEOISIE
// IG_RURAL_FOLK
// IG_TRADE_UNIONS

// Scripted IG colors in HSV //
#define COLOR_IG_DEFAULT			float4( 0.00, 0.00, 0.50, 1.0 )

#define INDEX_IG_ARMED_FORCES 0
#define COLOR_IG_ARMED_FORCES		float4( 0.09, 0.29, 0.39, 1.0 )

#define INDEX_IG_DEVOUT 1
#define COLOR_IG_DEVOUT 			float4( 0.50, 0.30, 0.67, 1.0 )

#define INDEX_IG_INDUSTRIALISTS 2
#define COLOR_IG_INDUSTRIALISTS 	float4( 0.06, 0.60, 0.89, 1.0 )

#define INDEX_IG_INTELLIGENTSIA 3
#define COLOR_IG_INTELLIGENTSIA 	float4( 0.13, 0.64, 0.99, 1.0 )

#define INDEX_IG_LANDOWNERS 4
#define COLOR_IG_LANDOWNERS 		float4( 0.63, 0.40, 0.69, 1.0 )

#define INDEX_IG_PETTY_BOURGEOISIE 5
#define COLOR_IG_PETTY_BOURGEOISIE 	float4( 0.65, 0.54, 0.52, 1.0 )

#define INDEX_IG_RURAL_FOLK 6
#define COLOR_IG_RURAL_FOLK 		float4( 0.32, 0.45, 0.47, 1.0 )

#define INDEX_IG_TRADE_UNIONS 7
#define COLOR_IG_TRADE_UNIONS 		float4( 0.00, 0.56, 0.58, 1.0 )

float4 GetInterestGroupColorDefine( )
{
	#if defined( IG_ARMED_FORCES )
		return COLOR_IG_ARMED_FORCES;
	#elif defined( IG_DEVOUT )
		return COLOR_IG_DEVOUT;
	#elif defined( IG_INDUSTRIALISTS )
		return COLOR_IG_INDUSTRIALISTS;
	#elif defined( IG_INTELLIGENTSIA )
		return COLOR_IG_INTELLIGENTSIA;
	#elif defined( IG_LANDOWNERS )
		return COLOR_IG_LANDOWNERS;
	#elif defined( IG_PETTY_BOURGEOISIE )
		return COLOR_IG_PETTY_BOURGEOISIE;
	#elif defined( IG_RURAL_FOLK )
		return COLOR_IG_RURAL_FOLK;
	#elif defined( IG_TRADE_UNIONS )
		return COLOR_IG_TRADE_UNIONS;
	#endif

	return COLOR_IG_DEFAULT;
}

float4 GetInterestGroupColorUserdata( uint InstanceIndex )
{
	if( InstanceIndex == INDEX_IG_ARMED_FORCES )
	{
		return COLOR_IG_ARMED_FORCES;
	}
	else if ( InstanceIndex == INDEX_IG_DEVOUT )
	{
		return COLOR_IG_DEVOUT;
	}
	else if ( InstanceIndex == INDEX_IG_INDUSTRIALISTS )
	{
		return COLOR_IG_INDUSTRIALISTS;
	}
	else if ( InstanceIndex == INDEX_IG_INTELLIGENTSIA )
	{
		return COLOR_IG_INTELLIGENTSIA;
	}
	else if ( InstanceIndex == INDEX_IG_LANDOWNERS )
	{
		return COLOR_IG_LANDOWNERS;
	}
	else if ( InstanceIndex == INDEX_IG_PETTY_BOURGEOISIE )
	{
		return COLOR_IG_PETTY_BOURGEOISIE;
	}
	else if ( InstanceIndex == INDEX_IG_RURAL_FOLK )
	{
		return COLOR_IG_RURAL_FOLK;
	}
	else if ( InstanceIndex == INDEX_IG_TRADE_UNIONS )
	{
		return COLOR_IG_TRADE_UNIONS;
	}

	return COLOR_IG_DEFAULT;
}

float GetFloatAt( uint FloatIndex )
{
	uint VectorIndex = FloatIndex / 4;
	uint ComponentIndex = FloatIndex % 4;

	return BlendShapeDataInstanced[ VectorIndex ][ ComponentIndex ];
}

uint GetUintAt( uint LookupIndex )
{
	return uint( GetFloatAt( LookupIndex ) );
}

uint CalcLinearBlendBufferIndex( uint VertexIndex, uint VertexDataIndex )
{
	return ( VertexDataIndex * BlendShapeVertexCount + VertexIndex );
}

float3 ReadBlendBufferTextureFloat3( uint AtVectorIndex )
{
	int AtFloat = int( AtVectorIndex ) * 3;
	float X = PdxReadBuffer( BlendShapeDataBuffer, AtFloat );
	float Y = PdxReadBuffer( BlendShapeDataBuffer, AtFloat + 1 );
	float Z = PdxReadBuffer( BlendShapeDataBuffer, AtFloat + 2 );
	
	return float3( X, Y, Z );
}

void ApplyBlendShapes( inout float3 PositionOut, inout float3 NormalOut, inout float3 TangentOut, in uint BlendShapeInstanceIndex, in uint ObjectInstanceIndex, in uint VertexID )
{
	uint VertexIndex = VertexID + BlendShapesVertexOffset;
			
	uint VectorIndex = 0;
	uint VectorElement = 0;

	uint ActiveBlendShapes = GetActiveBlendShapes( ObjectInstanceIndex );

	uint IndicesOffset = BlendShapeInstanceIndex;
	uint WeightsOffset = IndicesOffset + ActiveBlendShapes;

	for (uint CurrentBlendShapeIndex = 0; CurrentBlendShapeIndex < ActiveBlendShapes; ++CurrentBlendShapeIndex) 
	{
		float Weight = GetFloatAt( WeightsOffset + CurrentBlendShapeIndex );
		uint BlendShapeOffsetIndex = GetUintAt( IndicesOffset + CurrentBlendShapeIndex );

		uint VertexDataIndex = BlendShapeOffsetIndex * 3;
			
		PositionOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VertexDataIndex;
		NormalOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VertexDataIndex;
		TangentOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VertexDataIndex;
		++VectorElement;
		if (VectorElement == 4)
		{
			VectorElement = 0;
			++VectorIndex;
		}
	}

	NormalOut = normalize( NormalOut );
	TangentOut = normalize( TangentOut );
}

void ApplyBlendShapesPositionOnly( inout float3 PositionOut, in uint BlendShapeInstanceIndex, in uint ObjectInstanceIndex, in uint VertexID )
{
	uint VertexIndex = VertexID + BlendShapesVertexOffset;
	uint VectorIndex = 0; 
	uint VectorElement = 0;

	uint ActiveBlendShapes = GetActiveBlendShapes( ObjectInstanceIndex );

	uint IndicesOffset = BlendShapeInstanceIndex;
	uint WeightsOffset = IndicesOffset + ActiveBlendShapes;

	for ( uint CurrentBlendShapeIndex = 0; CurrentBlendShapeIndex < ActiveBlendShapes; ++CurrentBlendShapeIndex )
	{
		float Weight = GetFloatAt( WeightsOffset + CurrentBlendShapeIndex );
		uint BlendShapeOffsetIndex = GetUintAt( IndicesOffset + CurrentBlendShapeIndex );

		uint VertexDataIndex = BlendShapeOffsetIndex * 3;

		PositionOut += ReadBlendBufferTextureFloat3( CalcLinearBlendBufferIndex( VertexIndex, VertexDataIndex ) ).xyz * Weight;
		++VectorElement;
		if ( VectorElement == 4 )
		{
			VectorElement = 0;
			++VectorIndex;
		}
	}
}

	struct VS_OUTPUT_PDXMESH
	{
		float4 Position;
		float3 WorldSpacePos;
		float3 Normal;
		float3 Tangent;
		float3 Bitangent;
		float2 UV0;
		float2 UV1;
		float2 UV2;
	};
	
	struct VS_INPUT_PDXMESH
	{
		float3 Position;
		float3 Normal;
		float4 Tangent;
		float2 UV0;
	#ifdef PDX_MESH_UV1
		float2 UV1;
	#endif
	#ifdef PDX_MESH_UV2
		float2 UV2;
	#endif
	#ifdef PDX_MESH_SKINNED
		uint4 BoneIndex;
		float3 BoneWeight;
	#endif
	#ifdef PDX_MESH_BLENDSHAPES
		uint ObjectInstanceIndex;
		uint BlendShapeInstanceIndex;
		uint VertexID;
	#endif
	};
	
	VS_INPUT_PDXMESH PdxMeshConvertInput( in VS_INPUT_PDXMESHSTANDARD Input )
	{
		VS_INPUT_PDXMESH Out;
		Out.Position = Input.Position;
		Out.Normal = Input.Normal;
		Out.Tangent = Input.Tangent;
		Out.UV0 = Input.UV0;
	#ifdef PDX_MESH_UV1
		Out.UV1 = Input.UV1;
	#endif
	#ifdef PDX_MESH_UV2
		Out.UV2 = Input.UV2;
	#endif
	#ifdef PDX_MESH_SKINNED
		Out.BoneIndex = Input.BoneIndex;
		Out.BoneWeight = Input.BoneWeight;
	#endif
	#ifdef PDX_MESH_BLENDSHAPES
		Out.ObjectInstanceIndex = Input.InstanceIndices.y;
		Out.BlendShapeInstanceIndex = Input.InstanceIndices.z;
		Out.VertexID = Input.VertexID;
	#endif

		return Out;
	}
	
// This depends on the heightmap.fxh, the shader that enables this define will need to include that fxh
#ifdef PDX_MESH_SNAP_VERTICES_TO_TERRAIN
	float3 SnapVerticesToTerrain( float2 WorldSpacePosXZ, float VertexY, float4x4 WorldMatrix )
	{
		float YScale = length( float3( GetMatrixData( WorldMatrix, 0, 1 ), GetMatrixData( WorldMatrix, 1, 1 ), GetMatrixData( WorldMatrix, 2, 1 ) ) );
		return float3( WorldSpacePosXZ.x, GetHeight( WorldSpacePosXZ ) + VertexY * YScale, WorldSpacePosXZ.y );
	}
#endif
	
#ifdef PDX_MESH_SKINNED
	VS_OUTPUT_PDXMESH PdxMeshVertexShader( VS_INPUT_PDXMESH Input, uint JointsInstanceIndex, float4x4 WorldMatrix )
	{
		VS_OUTPUT_PDXMESH Out;

		float4 Position = float4( Input.Position.xyz, 1.0 );
		float3 BaseNormal = Input.Normal;
		float3 BaseTangent = Input.Tangent.xyz;

	#ifdef PDX_MESH_BLENDSHAPES
		ApplyBlendShapes( Position.xyz, BaseNormal, BaseTangent, Input.BlendShapeInstanceIndex, Input.ObjectInstanceIndex, Input.VertexID );
	#endif

		float4 SkinnedPosition = vec4( 0.0 );
		float3 SkinnedNormal = vec3( 0.0 );
		float3 SkinnedTangent = vec3( 0.0 );
		float3 SkinnedBitangent = vec3( 0.0 );

		float4 Weights = float4( Input.BoneWeight.xyz, 1.0 - Input.BoneWeight.x - Input.BoneWeight.y - Input.BoneWeight.z );
		for( int i = 0; i < PDXMESH_MAX_INFLUENCE; ++i )
		{
			uint BoneIndex = Input.BoneIndex[i];
			uint OffsetIndex = BoneIndex + JointsInstanceIndex;

			float4x4 VertexMatrix = PdxMeshGetJointVertexMatrix( OffsetIndex );

			SkinnedPosition += mul( VertexMatrix, Position ) * Weights[ i ];

			float3 XAxis = float3( GetMatrixData( VertexMatrix, 0, 0 ), GetMatrixData( VertexMatrix, 0, 1 ), GetMatrixData( VertexMatrix, 0, 2 ) );
			float3 YAxis = float3( GetMatrixData( VertexMatrix, 1, 0 ), GetMatrixData( VertexMatrix, 1, 1 ), GetMatrixData( VertexMatrix, 1, 2 ) );
			float3 ZAxis = float3( GetMatrixData( VertexMatrix, 2, 0 ), GetMatrixData( VertexMatrix, 2, 1 ), GetMatrixData( VertexMatrix, 2, 2 ) );
			
			float XSqMagnitude = dot( XAxis, XAxis );
			float YSqMagnitude = dot( YAxis, YAxis );
			float ZSqMagnitude = dot( ZAxis, ZAxis );
			
			float3 SqScale = float3( XSqMagnitude, YSqMagnitude, ZSqMagnitude );
			float3 SqScaleReciprocal = float3( 1.f, 1.f, 1.f ) / SqScale;
			
			float3 ScaledNormal = BaseNormal * SqScaleReciprocal;
			float3 ScaledTangent = BaseTangent * SqScaleReciprocal;
			
			float3x3 VertexRotationMatrix = CastTo3x3( VertexMatrix );
			
			float3 Normal = mul( VertexRotationMatrix, ScaledNormal );
			float3 Tangent = mul( VertexRotationMatrix, ScaledTangent );
			float3 Bitangent = cross( Normal, Tangent ) * Input.Tangent.w;

			Normal = normalize( Normal );
			Tangent = normalize( Tangent );
			Bitangent = normalize( Bitangent );

			SkinnedNormal += Normal * Weights[i];
			SkinnedTangent += Tangent * Weights[i];
			SkinnedBitangent += Bitangent * Weights[i];
		}

		Out.Position = mul( WorldMatrix, SkinnedPosition );
		Out.WorldSpacePos = Out.Position.xyz;
		Out.WorldSpacePos /= WorldMatrix[3][3];
		Out.Position = FixProjectionAndMul( ViewProjectionMatrix, Out.Position );

		Out.Normal = normalize( mul( CastTo3x3(WorldMatrix), normalize( SkinnedNormal ) ) );
		Out.Tangent = normalize( mul( CastTo3x3(WorldMatrix), normalize( SkinnedTangent ) ) );
		Out.Bitangent = normalize( mul( CastTo3x3(WorldMatrix), normalize( SkinnedBitangent ) ) );

		Out.UV0 = Input.UV0;
	#ifdef PDX_MESH_UV1
		Out.UV1 = Input.UV1;
	#else
		Out.UV1 = vec2( 0.0 );
	#endif
	#ifdef PDX_MESH_UV2
		Out.UV2 = Input.UV2;
	#else
		Out.UV2 = vec2( 0.0 );
	#endif

		return Out;
	}
	
#else

	VS_OUTPUT_PDXMESH PdxMeshVertexShader( VS_INPUT_PDXMESH Input, uint JointsInstanceIndex, float4x4 WorldMatrix )
	{
		VS_OUTPUT_PDXMESH Out;

		float4 Position = float4( Input.Position.xyz, 1.0 );
		float3 Normal = Input.Normal;
		float3 Tangent = Input.Tangent.xyz;

	#ifdef PDX_MESH_BLENDSHAPES
		ApplyBlendShapes( Position.xyz, Normal, Tangent, Input.BlendShapeInstanceIndex, Input.ObjectInstanceIndex, Input.VertexID );
	#endif

		Out.Normal = normalize( mul( CastTo3x3( WorldMatrix ), Normal ) );
		Out.Tangent = normalize( mul( CastTo3x3( WorldMatrix ), Tangent ) );
		Out.Bitangent = normalize( cross( Out.Normal, Out.Tangent ) * Input.Tangent.w );
		Out.Position = mul( WorldMatrix, Position );
		
	#ifdef PDX_MESH_SNAP_VERTICES_TO_TERRAIN
		Out.Position.xyz = SnapVerticesToTerrain( Out.Position.xz, Input.Position.y, WorldMatrix );
	#endif
	
		Out.WorldSpacePos = Out.Position.xyz;
		Out.WorldSpacePos /= WorldMatrix[3][3];
		Out.Position = FixProjectionAndMul( ViewProjectionMatrix, Out.Position );

		Out.UV0 = Input.UV0;
	#ifdef PDX_MESH_UV1
		Out.UV1 = Input.UV1;
	#else
		Out.UV1 = vec2( 0.0 );
	#endif
	#ifdef PDX_MESH_UV2
		Out.UV2 = Input.UV2;
	#else
		Out.UV2 = vec2( 0.0 );
	#endif

		return Out;
	}
	
#endif

VS_OUTPUT_PDXMESH PdxMeshVertexShaderStandard( VS_INPUT_PDXMESHSTANDARD Input )
{
	return PdxMeshVertexShader( PdxMeshConvertInput( Input ), Input.InstanceIndices.x, PdxMeshGetWorldMatrix( Input.InstanceIndices.y ) );
}

VS_OUTPUT_PDXMESHSHADOW PdxMeshVertexShaderShadow( VS_INPUT_PDXMESH Input, uint JointsInstanceIndex, float4x4 WorldMatrix )
{
	VS_OUTPUT_PDXMESHSHADOW Out;
			
	float4 Position = float4( Input.Position.xyz, 1.0 );

#ifdef PDX_MESH_BLENDSHAPES
	ApplyBlendShapesPositionOnly( Position.xyz, Input.BlendShapeInstanceIndex, Input.ObjectInstanceIndex, Input.VertexID );
#endif
	
#ifdef PDX_MESH_SKINNED
	float4 vWeight = float4( Input.BoneWeight.xyz, 1.0 - Input.BoneWeight.x - Input.BoneWeight.y - Input.BoneWeight.z );
	float4 vSkinnedPosition = vec4( 0.0 );
	for( int i = 0; i < PDXMESH_MAX_INFLUENCE; ++i )
	{
		int nIndex = int( Input.BoneIndex[i] );
		float4x4 VertexMatrix = PdxMeshGetJointVertexMatrix( nIndex + JointsInstanceIndex );
		vSkinnedPosition += mul( VertexMatrix, Position ) * vWeight[ i ];
	}
	Out.Position = mul( WorldMatrix, vSkinnedPosition );
#else
	Out.Position = mul( WorldMatrix, Position );
	
	#ifdef PDX_MESH_SNAP_VERTICES_TO_TERRAIN
		Out.Position.xyz = SnapVerticesToTerrain( Out.Position.xz, Input.Position.y, WorldMatrix );
	#endif
#endif
	Out.Position = FixProjectionAndMul( ViewProjectionMatrix, Out.Position );
	Out.UV = Input.UV0;
	return Out;
}
VS_OUTPUT_PDXMESHSHADOWSTANDARD PdxMeshVertexShaderShadowStandard( VS_INPUT_PDXMESHSTANDARD Input )
{
	VS_OUTPUT_PDXMESHSHADOW CommonOut = PdxMeshVertexShaderShadow( PdxMeshConvertInput(Input), Input.InstanceIndices.x, PdxMeshGetWorldMatrix( Input.InstanceIndices.y ) );
	VS_OUTPUT_PDXMESHSHADOWSTANDARD Out;
	Out.Position = CommonOut.Position;
	Out.UV_InstanceIndex.xy = CommonOut.UV;
	Out.UV_InstanceIndex.z = Input.InstanceIndices.y;
	
	return Out;
}

struct STerrainVertex
{
	float3 WorldSpacePos;
};

STerrainVertex CalcTerrainVertex( float2 WithinNodePos, float2 NodeOffset, float NodeScale, float2 LodDirection, float LodLerpFactor )
{
	STerrainVertex Out;

	NodeScale = 1.0 / NodeScale;
	NodeOffset = NodeOffset * NodeScale;

	float2 QuadtreePosition = WithinNodePos * NodeScale + NodeOffset;

	float2 WorldSpacePosXZ = QuadtreePosition * _NormQuadtreeToWorld;

	// The world will always have an overshoot of half a terrain quadtree cell's worth of vertices. Everything works fine if we just clamp those vertices to world extents here.
	WorldSpacePosXZ = clamp(WorldSpacePosXZ, float2(0.f, 0.f), _WorldExtents);

	#ifdef PDX_TERRAIN_HEIGHT_MULTISAMPLE
		float Height = GetHeightMultisample( WorldSpacePosXZ, 0.25 );
	#else
		float Height = GetHeight( WorldSpacePosXZ );
	#endif

	float2 ScaledLodDirection = ( LodDirection * NodeScale / _QuadtreeLeafNodeScale ) * OriginalHeightmapToWorldSpace;
	float LerpedHeight = GetLerpedHeight( WorldSpacePosXZ, ScaledLodDirection );
	Height = lerp( Height, LerpedHeight, LodLerpFactor / UINT16_MAX );

	Out.WorldSpacePos = float3( WorldSpacePosXZ.x, Height, WorldSpacePosXZ.y );

	return Out;
}

float3 FixPositionForSkirt( float3 WorldSpacePosition, uint nVertexID )
{
	WorldSpacePosition.y += _SkirtSize * ((nVertexID + 1) % 2);
	return WorldSpacePosition;
}

VS_INPUT_PDXMESH PdxMeshConvertInput( in VS_INPUT_PDXMESH_MAPOBJECT Input )
{
	VS_INPUT_PDXMESH Out;		
	Out.Position = Input.Position;
	Out.Normal = Input.Normal;
	Out.Tangent = Input.Tangent;
	Out.UV0 = Input.UV0;
#ifdef PDX_MESH_UV1
	Out.UV1 = Input.UV1;
#endif
#ifdef PDX_MESH_UV2
	Out.UV2 = Input.UV2;
#endif
#ifdef PDX_MESH_SKINNED
	Out.BoneIndex = uint4(0,0,0,0);
	Out.BoneWeight = float3(0,0,0);	//Animated map objects not supported
#endif
	return Out;
}

VS_OUTPUT_MAPOBJECT_SHADOW ConvertOutputMapObjectShadow( in VS_OUTPUT_PDXMESHSHADOW Output )
{
	VS_OUTPUT_MAPOBJECT_SHADOW Out;
	Out.Position 					= Output.Position;
	Out.UV							= Output.UV;
	Out.InstanceIndex24_Opacity8 	= 0;
	return Out;
}


void CalculateSineAnimation( float2 UV, inout float3 Position, inout float3 Normal, inout float4 Tangent, float Seed )
{
	float AnimSeed = UV.x;
	const float LARGE_WAVE_FREQUENCY = 3.14f;	// Higher values simulates higher wind speeds / more turbulence
	const float SMALL_WAVE_FREQUENCY = 9.0f;	// Higher values simulates higher wind speeds / more turbulence
	const float WAVE_LENGTH_POW = 1.0f;			// Higher values gives higher frequency at the end of the flag
	const float WAVE_LENGTH_INV_SCALE = 7.0f;	// Higher values gives higher frequency overall
	const float WAVE_SCALE = 0.2f;				// Higher values gives a stretchier flag
	const float ANIMATION_SPEED = 0.5f;			// Speed

	float RandomOffset = CalcRandom( Seed );
	float Time = ( GlobalTime + RandomOffset ) * ANIMATION_SPEED;

	float LargeWave = sin( Time * LARGE_WAVE_FREQUENCY );
	float SmallWaveV = Time * SMALL_WAVE_FREQUENCY - pow( AnimSeed, WAVE_LENGTH_POW ) * WAVE_LENGTH_INV_SCALE;
	float SmallWaveD = -( WAVE_LENGTH_POW * pow( AnimSeed, WAVE_LENGTH_POW ) * WAVE_LENGTH_INV_SCALE );
	float SmallWave = sin( SmallWaveV );
	float CombinedWave = SmallWave + LargeWave;

	float Wave = WAVE_SCALE * AnimSeed * CombinedWave;
	float Derivative = WAVE_SCALE * ( LargeWave + SmallWave + cos( SmallWaveV ) * SmallWaveD );
	float3 AnimationDir = cross( Tangent.xyz, float3( 0.0, 1.0, 0.0 ) );

	Position += AnimationDir * Wave;

	float2 WaveTangent = normalize( float2( 1.0f, Derivative ) );
	float3 WaveNormal = normalize( float3( WaveTangent.y, 0.0f, -WaveTangent.x ));
	Normal = normalize( WaveNormal ); // wave normal strength
}

float3 WindTransform( float3 Position, float4x4 WorldMatrix )
{
	float3 WorldSpacePos = mul( WorldMatrix, float4( Position, 1.0f ) ).xyz;
	float2 MapCoords = float2( WorldSpacePos.x / MapSize.x, 1.0 - WorldSpacePos.z / MapSize.y );

	float3 FlowMap = PdxTex2DLod0( FlowMapTexture, MapCoords ).rgb;
	float3 FlowDir = FlowMap.xyz * 2.0 - 1.0;
	FlowDir = FlowDir / ( length( FlowDir ) + 0.000001 ); // Intel did not like normalize()

	float WindMap = PdxTex2DLod0( WindMapTree, MapCoords ).r;

	float WorldX = GetMatrixData( WorldMatrix, 0, 3 );
	float WorldY = GetMatrixData( WorldMatrix, 2, 3 );
	float Noise = CalcNoise( GlobalTime * TreeSwayLoopSpeed + TreeSwayWindStrengthSpatialModifier * float2( WorldX, WorldY ) );
	float WindSpeed = Noise * Noise;
	float Phase = GlobalTime * TreeSwaySpeed + TreeSwayWindClusterSizeModifier * ( WorldX + WorldY );
	float3 Offset = normalize( float3( FlowDir.x, 0.0f, FlowDir.z ) );
	Offset = mul( Offset, CastTo3x3( WorldMatrix ) );
	float HeightFactor = saturate( Position.y * TreeHeightImpactOnSway );
	HeightFactor *= HeightFactor;

	float wave = sin( Phase ) + 0.5f;
	Position += TreeSwayScale * WindMap * HeightFactor * wave * Offset * WindSpeed;

	return Position;
}

float3 WindTransformBush( float3 Position, float4x4 WorldMatrix )
{
	float3 WorldSpacePos = mul( WorldMatrix, float4( Position, 1.0f ) ).xyz;
	float2 MapCoords = float2( WorldSpacePos.x / MapSize.x, 1.0 - WorldSpacePos.z / MapSize.y );

	float3 FlowMap = PdxTex2DLod0( FlowMapTexture, MapCoords ).rgb;
	float3 FlowDir = FlowMap.xyz * 2.0 - 1.0;
	FlowDir = FlowDir / ( length( FlowDir ) + 0.000001 ); // Intel did not like normalize()

	float WindMap = PdxTex2DLod0( WindMapTree, MapCoords ).r;

	float WorldX = GetMatrixData( WorldMatrix, 0, 3 );
	float WorldY = GetMatrixData( WorldMatrix, 2, 3 );
	float Noise = CalcNoise( GlobalTime * TreeSwayLoopSpeed + TreeSwayWindStrengthSpatialModifier * float2( WorldX, WorldY ) );
	float WindSpeed = Noise * Noise;
	float Phase = GlobalTime * TreeSwaySpeed + TreeSwayWindClusterSizeModifier * ( WorldX + WorldY );
	float3 Offset = normalize( float3( FlowDir.x, 0.0f, FlowDir.z ) );
	Offset = mul( Offset, CastTo3x3( WorldMatrix ) );
	float HeightFactor = saturate( Position.y * TreeHeightImpactOnSway * BUSH_TREE_HEIGHT_IMPACT );
	HeightFactor *= HeightFactor;

	float wave = sin( Phase ) + 0.5f;
	Position += TreeSwayScale * BUSH_TREE_SWAY_SCALE * WindMap * HeightFactor * wave * Offset * WindSpeed;

	return Position;
}

float3 WindTransformMedium( float3 Position, float4x4 WorldMatrix )
{
	float3 WorldSpacePos = mul( WorldMatrix, float4( Position, 1.0f ) ).xyz;
	float2 MapCoords = float2( WorldSpacePos.x / MapSize.x, 1.0 - WorldSpacePos.z / MapSize.y );

	float3 FlowMap = PdxTex2DLod0( FlowMapTexture, MapCoords ).rgb;
	float3 FlowDir = FlowMap.xyz * 2.0 - 1.0;
	FlowDir = FlowDir / ( length( FlowDir ) + 0.000001 ); // Intel did not like normalize()

	float WindMap = PdxTex2DLod0( WindMapTree, MapCoords ).r;

	float WorldX = GetMatrixData( WorldMatrix, 0, 3 );
	float WorldY = GetMatrixData( WorldMatrix, 2, 3 );
	float Noise = CalcNoise( GlobalTime * TreeSwayLoopSpeed + TreeSwayWindStrengthSpatialModifier * float2( WorldX, WorldY ) );
	float WindSpeed = Noise * Noise;
	float Phase = GlobalTime * TreeSwaySpeed * MEDIUM_TREE_SWAY_SPEED + TreeSwayWindClusterSizeModifier * ( WorldX + WorldY );
	float3 Offset = normalize( float3( FlowDir.x, 0.0f, FlowDir.z ) );
	Offset = mul( Offset, CastTo3x3( WorldMatrix ) );
	float HeightFactor = saturate( Position.y * TreeHeightImpactOnSway * MEDIUM_TREE_HEIGHT_IMPACT );
	HeightFactor *= HeightFactor;

	float wave = sin( Phase ) + 0.5f;
	Position += TreeSwayScale * MEDIUM_TREE_SWAY_SCALE * WindMap * HeightFactor * wave * Offset * WindSpeed;

	return Position;
}

float3 WindTransformTall( float3 Position, float4x4 WorldMatrix )
{
	float3 WorldSpacePos = mul( WorldMatrix, float4( Position, 1.0f ) ).xyz;
	float2 MapCoords = float2( WorldSpacePos.x / MapSize.x, 1.0 - WorldSpacePos.z / MapSize.y );

	float3 FlowMap = PdxTex2DLod0( FlowMapTexture, MapCoords ).rgb;
	float3 FlowDir = FlowMap.xyz * 2.0 - 1.0;
	FlowDir = FlowDir / ( length( FlowDir ) + 0.000001 ); // Intel did not like normalize()

	float WindMap = PdxTex2DLod0( WindMapTree, MapCoords ).r;

	float WorldX = GetMatrixData( WorldMatrix, 0, 3 );
	float WorldY = GetMatrixData( WorldMatrix, 2, 3 );
	float Noise = CalcNoise( GlobalTime * TreeSwayLoopSpeed + TreeSwayWindStrengthSpatialModifier * float2( WorldX, WorldY ) );
	float WindSpeed = Noise * Noise;
	float Phase = GlobalTime * TreeSwaySpeed * TALL_TREE_SWAY_SPEED + TreeSwayWindClusterSizeModifier * ( WorldX + WorldY );
	float3 Offset = normalize( float3( FlowDir.x, 0.0f, FlowDir.z ) );
	Offset = mul( Offset, CastTo3x3( WorldMatrix ) );
	float HeightFactor = saturate( Position.y * TreeHeightImpactOnSway * TALL_TREE_HEIGHT_IMPACT );
	HeightFactor *= HeightFactor;

	float wave = sin( Phase ) + 0.5f;
	Position += TreeSwayScale * TALL_TREE_SWAY_SCALE * WindMap * HeightFactor * wave * Offset * WindSpeed;

	return Position;
}

float3 SnapToWaterLevel( float3 PositionY, float4x4 WorldMatrix )
{
	float3 WorldSpacePos = mul( WorldMatrix, float4( float3( 0.0f, 0.0f, 0.0f ), 1.0f ) ).xyz;

	float Height = GetHeight( WorldSpacePos.xz );
	PositionY += ( _WaterHeight - WorldSpacePos.y );

	return PositionY;
}


VS_OUTPUT ConvertOutput( VS_OUTPUT_PDXMESH In )
{
	VS_OUTPUT Out;

	Out.Position = In.Position;
	Out.Normal = In.Normal;
	Out.Tangent = In.Tangent;
	Out.Bitangent = In.Bitangent;
	Out.UV0 = In.UV0;
	Out.UV1 = In.UV1;
	Out.WorldSpacePos = In.WorldSpacePos;
	return Out;
}



// === Main Code === 

VS_OUTPUT_PDXMESHSHADOWSTANDARD main( VS_INPUT_PDXMESHSTANDARD Input )
{
	VS_OUTPUT_PDXMESHSHADOWSTANDARD Out;

	#ifdef SNAP_TO_WATER
		float4x4 WorldMatrix = PdxMeshGetWorldMatrix( Input.InstanceIndices.y );
		Input.Position.y = SnapToWaterLevel( Input.Position.y, WorldMatrix );
	#endif

	Out = PdxMeshVertexShaderShadowStandard( Input );
	return Out;
}

