

// === Shader Info === 

// Shader file: gfx/FX/pdxguieditor_pushbutton.shader
// Effect: Up
// ===ShaderInfo End===



// === Defines === 

#define PDX_DIRECTX_11
#define PIXEL_SHADER
#define PDX_HLSL
#define PDX_MAX_HEIGHTMAP_COMPRESS_LEVELS 5
#define JOMINI_REFRACTION_ENABLED
#define HIGH_QUALITY_SHADERS


// === HLSL Macros === 

#define PDX_POSITION SV_Position
#define PDX_COLOR SV_Target
#define PDX_COLOR0 SV_Target0
#define PDX_COLOR0_SRC1 SV_Target1 // Use this when doing dual source blending, currently only supports that for render target #0
#define PDX_COLOR1 SV_Target1
#define PDX_COLOR2 SV_Target2
#define PDX_COLOR3 SV_Target3
#define PDX_COLOR4 SV_Target4
#define PDX_COLOR5 SV_Target5
#define PDX_COLOR6 SV_Target6
#define PDX_COLOR7 SV_Target7
#define PDX_VertexID SV_VertexID
#define PDX_InstanceID SV_InstanceID
#define PDX_DispatchThreadID SV_DispatchThreadID
#define PDX_GroupThreadID SV_GroupThreadID
#define PDX_GroupID SV_GroupID
#define PDX_GroupIndex SV_GroupIndex
#define PDX_TessFactor SV_TessFactor
#define PDX_InsideTessFactor SV_InsideTessFactor
#define PDX_OutputControlPointID SV_OutputControlPointID
#define PDX_DomainLocation SV_DomainLocation
#define PDX_RenderTargetArrayIndex SV_RenderTargetArrayIndex
#define PDX_ViewportArrayIndex SV_ViewportArrayIndex

#define PdxDomainTypeTriangle "tri"
#define PdxDomainTypeQuad "quad"
#define PdxDomainTypeIsoline "isoline"

#define PdxPartitioningModeInteger "integer"
#define PdxPartitioningModeFractionalEven "fractional_even"
#define PdxPartitioningModeFractionalOdd "fractional_odd"

#define PdxPrimitiveTypePoint point
#define PdxPrimitiveTypeLine line
#define PdxPrimitiveTypeTriangle triangle
#define PdxPrimitiveTypeLineAdjacency lineadj
#define PdxPrimitiveTypeTriangleAdjacency triangleadj

#define PdxTessellatorOutputTopologyPoint "point"
#define PdxTessellatorOutputTopologyLine "line"
#define PdxTessellatorOutputTopologyTriangleCw "triangle_cw"
#define PdxTessellatorOutputTopologyTriangleCcw "triangle_ccw"

#define PdxMeshShaderOutputTopologyLine "line"
#define PdxMeshShaderOutputTopologyTriangle "triangle"

#define mod( X, Y ) ( (X) % (Y) )

float2x2 Create2x2( in float2 x, in float2 y )
{
	return transpose( float2x2( x, y ) );
}
// TODO, Create3x3 should be transposed in hlsl, and not in glsl, and then the mul() arguments should be reversed
#define Create3x3 float3x3
float4x4 Create4x4( in float4 x, in float4 y, in float4 z, in float4 w )
{
	return transpose( float4x4( x, y, z, w ) );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}

#define lessThan( a, b ) ( (a) < (b) )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct PdxTextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
struct PdxTextureSampler2DMS
{
    Texture2DMS<float4>		_Texture;
};

struct PdxTextureSampler2DArray
{
    Texture2DArray	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler3D
{
    Texture3D 		_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler2DCmp
{
    Texture2D 				_Texture;
    SamplerComparisonState 	_Sampler;
};

// These are for separate Texture/Sampler objects
#define PdxSampleTex2D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex2DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )
#define PdxSampleTex2DGrad(tex,samp,uv,ddx,ddy) (tex).SampleGrad( (samp), (uv), (ddx), (ddy) )
#define PdxSampleTex2DGather(tex,samp,uv) (tex).Gather( (samp), (uv) )

#define PdxSampleTex3D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex3DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )

#define PdxTexture2DSize(tex,size) (tex).GetDimensions( (size).x, (size).y )
#define PdxTexture2DLoad(tex,uv,lod) (tex).Load( int3((uv), (lod)) )

#define PdxTexture2DArraySize(tex,size,elements) (tex).GetDimensions( (size).x, (size).y, elements )
#define PdxTexture2DArrayLoad(tex,uv,arrayindex,lod) (tex).Load( int4((uv), (arrayindex), (lod)) )

#define PdxTexture3DSize(tex,size) (tex).GetDimensions( (size).x, (size).y, (size).z )
#define PdxTexture3DLoad(tex,uv,lod) (tex).Load( int4((uv), (lod)) )

// These are for the combined TextureSampler objects
#define PdxTex2DSize(samp,size) PdxTexture2DSize( (samp)._Texture, (size) )
#define PdxTex2D(samp,uv) PdxSampleTex2D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLod(samp,uv,lod) PdxSampleTex2DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex2DLodOffset(samp,uv,lod,offset) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod), (offset) )
#define PdxTex2DBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )
#define PdxTex2DGrad(samp,uv,ddx,ddy) PdxSampleTex2DGrad( (samp)._Texture, (samp)._Sampler, (uv), (ddx), (ddy) )
#define PdxTex2DGather(samp,uv) PdxSampleTex2DGather( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLoad(samp,uv,lod) PdxTexture2DLoad( (samp)._Texture, (uv), (lod) )
#define PdxTex2DMultiSampled(samp,texelcoord,sampleidx) (samp)._Texture.Load( (texelcoord), (sampleidx) )
#define PdxTex2DMSSize(samp,size,samples) (samp)._Texture.GetDimensions( (size).x, (size).y, (samples) )

#define PdxTex3D(samp,uv) PdxSampleTex3D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex3DLod(samp,uv,lod) PdxSampleTex3DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex3DLoad(samp,uv,lod) PdxTexture3DLoad( (samp)._Texture, (uv), (lod) )

#define PdxTexCube(samp,uv) (samp)._Texture.Sample( (samp)._Sampler, (uv) )
#define PdxTexCubeLod(samp,uv,lod) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod) )
#define PdxTexCubeBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )

#define PdxTex2DCmpLod0(samp,uv,value) (samp)._Texture.SampleCmpLevelZero( (samp)._Sampler, (uv), (value) )

// Vulkan fails to compile shaders with this function call properly
// Commenting it out until we can fix this issue
//#define PdxCalculateLod(samp,uv) (samp)._Texture.CalculateLevelOfDetail( (samp)._Sampler, (uv) )

float4x4 FixProjection( float4x4 ProjectionMatrix )
{
	// Enable for "debug" drawing to see if some objects is missing fix
	#if 0
	for ( int i = 0; i < 4; ++i )
	{
		GetMatrixData( ProjectionMatrix, 0, i ) *= 0.5;
		GetMatrixData( ProjectionMatrix, 1, i ) *= 0.5;
	}
	#endif
	
	return ProjectionMatrix;
}

#define PdxBufferFloat  Buffer<float>
#define PdxBufferFloat2	Buffer<float2>
#define PdxBufferFloat3	Buffer<float3>
#define PdxBufferFloat4	Buffer<float4>
#define PdxBufferInt  	Buffer<int>
#define PdxBufferInt2	Buffer<int2>
#define PdxBufferInt3	Buffer<int3>
#define PdxBufferInt4	Buffer<int4>
#define PdxBufferUint   Buffer<uint>
#define PdxBufferUint2	Buffer<uint2>
#define PdxBufferUint3	Buffer<uint3>
#define PdxBufferUint4	Buffer<uint4>

#define PdxStructuredBuffer StructuredBuffer
#define PdxRWStructuredBuffer RWStructuredBuffer
#define PdxRasterizerOrderedBuffer RasterizerOrderedBuffer
#define PdxRasterizerOrderedStructuredBuffer RasterizerOrderedStructuredBuffer

float 	PdxReadBuffer( in PdxBufferFloat Buf, int Index )  		{ return Buf.Load( Index ); }
float2	PdxReadBuffer2( in PdxBufferFloat2 Buf, int Index )		{ return Buf.Load( Index ); }
float3	PdxReadBuffer3( in PdxBufferFloat3 Buf, int Index )		{ return Buf.Load( Index ); }
float4	PdxReadBuffer4( in PdxBufferFloat4 Buf, int Index )		{ return Buf.Load( Index ); }

int  	PdxReadBuffer( in PdxBufferInt Buf, int Index ) 		{ return Buf.Load( Index ); }
int2 	PdxReadBuffer2( in PdxBufferInt2 Buf, int Index )		{ return Buf.Load( Index ); }
int3 	PdxReadBuffer3( in PdxBufferInt3 Buf, int Index )    	{ return Buf.Load( Index ); }
int4 	PdxReadBuffer4( in PdxBufferInt4 Buf, int Index )    	{ return Buf.Load( Index ); }

uint  	PdxReadBuffer( in PdxBufferUint Buf, int Index )    	{ return Buf.Load( Index ); }
uint2 	PdxReadBuffer2( in PdxBufferUint2 Buf, int Index )  	{ return Buf.Load( Index ); }
uint3 	PdxReadBuffer3( in PdxBufferUint3 Buf, int Index )  	{ return Buf.Load( Index ); }
uint4 	PdxReadBuffer4( in PdxBufferUint4 Buf, int Index )  	{ return Buf.Load( Index ); }

#define PdxReadRWBuffer(buffer,index) (buffer)[(index)]
#define PdxWriteRWBuffer(buffer,index,value) (buffer)[(index)] = (value)

#define Quaternion float4

#define UINT16_MAX 0xffff
#define UINT32_MAX 0xffffffff
#define PI 3.14159265359

float2x2 Create2x2( float a, float b, float c, float d ) { return Create2x2( float2( a, b ), float2( c, d ) ); }

#define PdxSampleTex2DLod0(tex,samp,uv) PdxSampleTex2DLod( (tex), (samp), (uv), 0 )

#define PdxTexture2DLoad0(tex,uv) PdxTexture2DLoad( (tex), (uv), 0 )

#define PdxTexture2DArrayLoad0(tex,uv,arrayindex) PdxTexture2DArrayLoad( (tex), (uv), (arrayindex), 0)

#define PdxTex2DProj(samp,uv_proj) PdxTex2DLod0( (samp), (uv_proj).xy / (uv_proj).w )
#define PdxTex2DLod0(samp,uv) PdxTex2DLod( (samp), (uv), 0 )
#define PdxTex2DLod0Offset(samp,uv,offset) PdxTex2DLodOffset( (samp), (uv), 0, (offset) )
#define PdxTex2DLoad0(samp,uv) PdxTex2DLoad( (samp), (uv), 0 )

#define PdxTex3DLod0(samp,uv) PdxTex3DLod( (samp), (uv), 0 )
#define PdxTex3DLoad0(samp,uv) PdxTex3DLoad( (samp), (uv), 0 )

float4 FixProjectionAndMul( float4x4 ProjectionMatrix, float4 Vector )
{
	return mul( FixProjection( ProjectionMatrix ), Vector );
}



// === Vertex Structs === 

struct VS_INPUT_PDX_GUI
{
	float2 Position : POSITION;
	float4 LeftTop_WidthHeight : TEXCOORD0;
	float4 UVLeftTop_WidthHeight : TEXCOORD1;
	float4 Color : COLOR0;
};
struct VS_INPUT_PDX_GUI_PROFILER
{
	float2 Position : POSITION;
	float4 LeftTop_WidthHeight : TEXCOORD0;
	float4 UVLeftTop_WidthHeight : TEXCOORD1;
	float4 Color : COLOR0;
	uint VertexID : PDX_VertexID;
};
struct VS_OUTPUT_PDX_GUI
{
	float4 Position : PDX_POSITION;
	float2 UV0 : TEXCOORD0;
	float4 Color : COLOR0;
};


// === Constant Buffers === 

cbuffer pdx_hlsl_cbPdxGuiConstants
{
	float2 ScreenDimension;
	float GuiTime;
}
cbuffer pdx_hlsl_cbPdxGuiWidgetConstants
{
	float4 TextTintColor;
	float4 TextOutlineColor;
	float2 WidgetLeftTop;
	int TextOutlineWidth;
}
cbuffer pdx_hlsl_cbPdxConstantBuffer2
{
	float3 HighlightColor;
}
cbuffer pdx_hlsl_cbPdxGuiSpriteConstants
{
	float4 SpriteTextureAndFrameUVSize[11];
	float4 SpriteBorder[11];
	float4 SpriteTranslateRotateUVAndAlpha[11];
	float4 SpriteSize;
	float4 SpriteUVRect;
	int4 SpriteFramesTypeBlendMode[11];
	int4 SpriteFrameAndGridSize[11];
	float4 SpriteModifyTexturesColors[11];
	float4 SpriteFrameBlendAlpha[11/4+11%2];
	uint4 MirrorFlags[11/4+11%2];
	int ModifyTexturesCount;
	float SamplerBias;
}


// === Samplers === 

SamplerState _sampler_0_ : register(s0);


// === Textures === 

Texture2D ModifyTexture0_Texture;
static PdxTextureSampler2D ModifyTexture0 = { ModifyTexture0_Texture, _sampler_0_ };
Texture2D ModifyTexture1_Texture;
static PdxTextureSampler2D ModifyTexture1 = { ModifyTexture1_Texture, _sampler_0_ };
Texture2D ModifyTexture2_Texture;
static PdxTextureSampler2D ModifyTexture2 = { ModifyTexture2_Texture, _sampler_0_ };
Texture2D ModifyTexture3_Texture;
static PdxTextureSampler2D ModifyTexture3 = { ModifyTexture3_Texture, _sampler_0_ };
Texture2D ModifyTexture4_Texture;
static PdxTextureSampler2D ModifyTexture4 = { ModifyTexture4_Texture, _sampler_0_ };
Texture2D ModifyTexture5_Texture;
static PdxTextureSampler2D ModifyTexture5 = { ModifyTexture5_Texture, _sampler_0_ };
Texture2D ModifyTexture6_Texture;
static PdxTextureSampler2D ModifyTexture6 = { ModifyTexture6_Texture, _sampler_0_ };
Texture2D ModifyTexture7_Texture;
static PdxTextureSampler2D ModifyTexture7 = { ModifyTexture7_Texture, _sampler_0_ };
Texture2D ModifyTexture8_Texture;
static PdxTextureSampler2D ModifyTexture8 = { ModifyTexture8_Texture, _sampler_0_ };
Texture2D ModifyTexture9_Texture;
static PdxTextureSampler2D ModifyTexture9 = { ModifyTexture9_Texture, _sampler_0_ };
Texture2D Texture_Texture;
static PdxTextureSampler2D Texture = { Texture_Texture, _sampler_0_ };


// === RW Textures === 



// === Buffer Textures === 



// === RW Buffer Textures === 



// === Shader Code === 

float4 PixelToScreenSpace( float2 PixelPos )
{
	float2 Pos = PixelPos * 2.0 - ScreenDimension;
	Pos /= ScreenDimension;
	Pos.y = -Pos.y;
  
	return float4( Pos, 0.0, 1.0 );
}
// Gamma correction utility
float ToGamma(float aLinear)
{
	return pow(aLinear, 1.0/2.2);
}
float3 ToGamma(float3 aLinear)
{
	return pow(aLinear, vec3(1.0/2.2));
}
float ToLinear(float aGamma)
{
	return pow(aGamma, 2.2);
}
float3 ToLinear(float3 aGamma)
{
	return pow(aGamma, vec3(2.2));
}
float4 ToLinear(float4 aGamma)
{
	return float4(pow(aGamma.rgb, vec3(2.2)), aGamma.a);
}

// Color value conversions
float3 RGBtoHSV( float3 RGB )
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = RGB.g < RGB.b ? float4(RGB.bg, K.wz) : float4(RGB.gb, K.xy);
	float4 q = RGB.r < p.x ? float4(p.xyw, RGB.r) : float4(RGB.r, p.yzx);

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x );
}
float3 HSVtoRGB( float3 HSV )
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs( frac(HSV.xxx + K.xyz) * 6.0 - K.www );
	return HSV.z * lerp( K.xxx, clamp(p - K.xxx, 0.0, 1.0), HSV.y );
}
float3 HSVtoRGB( float H, float S, float V )
{
	return HSVtoRGB( float3( H, S, V ) );
}
float4 RGBtoHSV( float4 RGBa )
{
	return float4( RGBtoHSV( RGBa.rgb ), RGBa.a );
}
float4 HSVtoRGB( float4 HSVa )
{
	return float4( HSVtoRGB( HSVa.xyz ), HSVa.a );
}
float4 HSVtoRGB( float H, float S, float V, float a )
{
	return HSVtoRGB( float4( H, S, V, a ) );
}

// Below are multiple blend mode utilities (See: https://en.wikipedia.org/wiki/Blend_modes)
// Most of these uses a typical implementation unless stated otherwise

// Multiply blend mode
float3 Multiply( float3 Base, float3 Blend, float Opacity )
{
	return Base * Blend * Opacity + Base * ( 1.0 - Opacity );
}

// Screen blend mode
float3 Screen( float3 Base, float3 Blend )
{
	return 1.0 - ( ( 1.0 - Base ) * ( 1.0 - Blend ) );
}

// Overlay blend mode
float Overlay( float Base, float Blend )
{
	return (Base < 0.5) ? (2.0 * Base * Blend) : (1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend));
}
float3 Overlay( float3 Base, float3 Blend )
{
	return float3( Overlay(Base.r, Blend.r), Overlay(Base.g, Blend.g), Overlay(Base.b, Blend.b) );
}
float Overlay( float Base, float Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 Overlay( float3 Base, float3 Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 GetOverlay( float3 Color, float3 OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}
float GetOverlay( float Color, float OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}

// Color dodge blend mode (Dodge and burn)
float ColorDodge( float Base, float Blend )
{
	return (Blend == 1.0) ? Blend : min( Base / (1.0 - Blend), 1.0 );
}
float3 ColorDodge( float3 Base, float3 Blend )
{
	return float3( ColorDodge(Base.r, Blend.r), ColorDodge(Base.g, Blend.g), ColorDodge(Base.b, Blend.b) );
}
float3 ColorDodge( float3 Base, float3 Blend, float Opacity )
{
	return ColorDodge( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Pegtop's SoftLight blend formula
float SoftLight( float Base, float Blend )
{
	return ( 1 - 2 * Blend ) * Base * Base + 2 * Base * Blend;
}
float3 SoftLight( float3 Base, float3 Blend )
{
	return float3( SoftLight( Base.r, Blend.r ), SoftLight( Base.g, Blend.g ), SoftLight( Base.b, Blend.b ) );
}
float SoftLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}
float3 SoftLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}

// Hardlight blend mode
float HardLight(float Base, float Blend)
{
	return Blend >= 0.5 ? 1.0 - 2 * ( 1.0 - Blend ) * ( 1.0 - Base ) : 2.0 * Base * Blend;
}
float3 HardLight( float3 Base, float3 Blend )
{
	return float3( HardLight( Base.r, Blend.r ), HardLight( Base.g, Blend.g ), HardLight( Base.b, Blend.b ) );
}
float HardLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}
float3 HardLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}

// Simple arithmetic blend modes (See: https://en.wikipedia.org/wiki/Blend_modes#Simple_arithmetic_blend_modes)
// Lighten only blend mode
float3 Add( float3 Base, float3 Blend, float Opacity )
{
	return ( Base + Blend ) * Opacity + Base * ( 1.0 - Opacity );
}
float Lighten( float Base, float Blend )
{
	return max( Base, Blend );
}
float3 Lighten( float3 Base, float3 Blend )
{
	return float3( Lighten(Base.r, Blend.r), Lighten(Base.g, Blend.g), Lighten(Base.b, Blend.b) );
}
float3 Lighten( float3 Base, float3 Blend, float Opacity )
{
	return Lighten( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Darken only blend mode
float Darken( float Base, float Blend )
{
	return min( Base, Blend );
}
float3 Darken( float3 Base, float3 Blend )
{
	return float3( Darken(Base.r, Blend.r), Darken(Base.g, Blend.g), Darken(Base.b, Blend.b) );
}
float3 Darken( float3 Base, float3 Blend, float Opacity )
{
	return Darken( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

float3 Levels( float3 vInColor, float3 vMinInput, float3 vMaxInput )
{
	float3 vRet = saturate( vInColor - vMinInput );
	vRet /= vMaxInput - vMinInput;
	return saturate( vRet );
}
float Levels( float vInValue, float vMinValue, float vMaxValue )
{
	return saturate( ( vInValue - vMinValue ) / ( vMaxValue - vMinValue ) );
}

// Intuitive way to dynamically grow and shrink masks, similar to Histogram Scan in Substance Designer.
// vInValue is typically a mask texture, vPosition is the value to be remapped to 0.5, vRange is the softness of that remap.
float LevelsScan( float vInValue, float vPosition, float vRange )
{
	return Levels( vInValue, vPosition - ( vRange / 2 ), vPosition + ( vRange / 2 ) );
}

float3 UnpackNormal( float4 NormalMapSample )
{
	float3 vNormalSample = NormalMapSample.rgb - 0.5;
	vNormalSample.g = -vNormalSample.g;
	return vNormalSample;
}

float3 UnpackNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackNormal( PdxTex2D( NormalTex, uv ) );
}

float3 UnpackRRxGNormal( float4 NormalMapSample )
{
	float x = NormalMapSample.g * 2.0 - 1.0;
	float y = NormalMapSample.a * 2.0 - 1.0;
	y = -y;
	float z = sqrt( saturate( 1.0 - x * x - y * y ) );
	return float3( x, y, z );
}

float3 UnpackRRxGNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackRRxGNormal( PdxTex2D( NormalTex, uv ) );
}

float3 ReorientNormal( float3 BaseNormal, float3 DetailNormal )
{
	float3 t = BaseNormal + float3( 0.0, 0.0, 1.0 );
	float3 u = DetailNormal * float3( -1.0, -1.0, 1.0 );
	float3 Normal = normalize( t * dot( t, u ) - u * t.z );
	return Normal;
}

float Fresnel( float NdotL, float FresnelBias, float FresnelPow )
{
	return saturate( FresnelBias + (1.0 - FresnelBias) * pow( 1.0 - NdotL, FresnelPow ) );
}

#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * ( (Value - OldMin) / (OldMax - OldMin) )
float Remap( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 Remap( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 Remap( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * saturate( (Value - OldMin) / (OldMax - OldMin) )
float RemapClamped( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 RemapClamped( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 RemapClamped( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
// Previously PDX_GUI_MAX_NUM_SPRITES, however this is just a hard coded constant and is directly reflected here instead. 
// See NPdxGuiHelpers::MaxSprites in code..

static const int MaxSprites = 11;

float3 DisableColor( float3 Color )
{
	float Grey = dot( Color.rgb, float3( 0.212671, 0.715160, 0.072169 ) ); 
	return float3( Grey, Grey, Grey );
}

float4 DisableColorReturn( float4 Color )
{
	#ifdef DISABLED
		Color.rgb = DisableColor( Color.rgb );
		return Color;			
	#else
		return Color;
	#endif
}

		float CalcBorderUV( float UV, float UVEdge, float UVScale )
		{
			float Offset = UV - UVEdge;
			Offset *= UVScale;
			return Offset + UVEdge;
			
			// Could be just multiply and add?
			//return UV * UVScale + UVEdge - UVEdge * UVScale; // 'UVEdge - UVEdge * UVScale' constant
		}
		
		float CalcInternalUV( float UV, float UVCutoff, float UVTileFactor, float UVScale, float UVOffset )
		{
			float Offset = UV - UVCutoff;
			Offset *= UVTileFactor;
			Offset = mod( Offset, 1.0 );
			Offset *= UVScale;
			return Offset + UVOffset;
		}
		
		float4 SampleSpriteTexture(
			in PdxTextureSampler2D SpriteTexture,
			float2 uv,
			float4 UVRect,
			float2 BorderUVScale,
			float4 BorderUVCutoff,
			float2 MiddleUVTileFactor,
			float2 MiddleUVScale,
			float2 MiddleUVOffset,
			float2 TranslateUV,
			float RotateUV,
			float2 Dimension )
		{
#ifdef PDX_GUI_SPRITE_EFFECT
			uv = lerp( UVRect.xy, UVRect.zw, uv );

			float2 texDdx = ddx(uv * BorderUVScale);
			float2 texDdy = ddy(uv * BorderUVScale);

			if ( uv.x <= BorderUVCutoff.x )
			{
				uv.x = CalcBorderUV( uv.x, UVRect.x, BorderUVScale.x );
			}
			else if ( uv.x >= BorderUVCutoff.z )
			{
				uv.x = CalcBorderUV( uv.x, UVRect.z, BorderUVScale.x );
			}
			else
			{
				uv.x = CalcInternalUV( uv.x, BorderUVCutoff.x, MiddleUVTileFactor.x, MiddleUVScale.x, MiddleUVOffset.x );
			}
			
			if ( uv.y <= BorderUVCutoff.y )
			{
				uv.y = CalcBorderUV( uv.y, UVRect.y, BorderUVScale.y );
			}
			else if ( uv.y >= BorderUVCutoff.w )
			{
				uv.y = CalcBorderUV( uv.y, UVRect.w, BorderUVScale.y );
			}
			else
			{
				uv.y = CalcInternalUV( uv.y, BorderUVCutoff.y, MiddleUVTileFactor.y, MiddleUVScale.y, MiddleUVOffset.y );
			}

			uv += TranslateUV;

			{
				float s = sin( RotateUV );
				float c = cos( RotateUV );

				uv.x = uv.x * Dimension.x - Dimension.x * 0.5;
				uv.y = uv.y * Dimension.y - Dimension.y * 0.5;

				float UVx = uv.x;
				float UVy = uv.y;

				uv.x = UVx * c - UVy * s;
				uv.y = UVy * c + UVx * s;

				uv.x = uv.x / Dimension.x + 0.5;
				uv.y = uv.y / Dimension.y + 0.5;
			}

			return PdxTex2DGrad( SpriteTexture, uv, texDdx, texDdy );			
#else			
			return PdxTex2DBias( SpriteTexture, uv, SamplerBias );
#endif
		}

		float4 CalcSpriteUV( int Index, int Frame )
		{
			int2 FrameSize     = SpriteFrameAndGridSize[Index].xy;

			if ( FrameSize.x <= 0 || FrameSize.y <= 0 )
				return float4( 0.0, 0.0, 1.0, 1.0 );

			int2 GridSize = SpriteFrameAndGridSize[Index].zw;
			if ( GridSize.x <= 0 || GridSize.y <= 0 )
				return float4( 0.0, 0.0, 1.0, 1.0 );

			int2 GridPos;
			GridPos.y = min( Frame / GridSize.x, GridSize.y - 1 );
			GridPos.x = min( Frame - GridPos.y * GridSize.x, GridSize.x - 1 );

			float2 FrameUVSize = SpriteTextureAndFrameUVSize[Index].zw;

			float4 UVRect;
			UVRect.xy = GridPos * FrameUVSize;
			UVRect.zw = FrameUVSize;

			return UVRect;
		}

		float4 SampleSpriteTexture( 
			in PdxTextureSampler2D SpriteTexture, 
			float2 UV, 
			int Index, 
			int Frame, 
			int Type )
		{
			float4 UVRect             = float4( 0.0, 0.0, 1.0, 1.0 );
			float4 BorderUVRect       = float4( 0.0, 0.0, 1.0, 1.0 );
			float2 BorderUVScale      = float2( 1.0, 1.0 );
			float2 MiddleUVScale      = float2( 1.0, 1.0 );
			float2 MiddleUVOffset     = float2( 0.0, 0.0 );
			float2 MiddleUVTileFactor = float2( 1.0, 1.0 );
			float4 BorderSize         = float4( 0.0, 0.0, 0.0, 0.0 );
			float4 BorderUV           = float4( 0.0, 0.0, 0.0, 0.0 );
			float4 BorderUVCutoff     = float4( 0.0, 0.0, 1.0, 1.0 );

#ifdef PDX_GUI_SPRITE_EFFECT
			UVRect = CalcSpriteUV( Index, Frame );
			float2 UVRectSize = UVRect.zw;
			float2 UVRectBR   = UVRect.xy + UVRectSize;
			float2 UVRectTL   = UVRect.xy;

			BorderUVRect = float4( UVRectTL, UVRectBR );

			float2 ImageSize = float2( SpriteFrameAndGridSize[Index].xy );
			if ( SpriteFrameAndGridSize[Index].x <= 0 || SpriteFrameAndGridSize[Index].y <= 0 )
			{
				ImageSize = SpriteTextureAndFrameUVSize[Index].xy;
			}

			if ( Type != 0 )
			{
				BorderUVScale = SpriteSize.xy / ImageSize;
				BorderSize    = SpriteBorder[Index];

				float BorderWidth = BorderSize.x + BorderSize.z;
				if ( BorderWidth > SpriteSize.x )
				{
					float ScaleFactor = SpriteSize.x / BorderWidth;
					BorderSize.x = BorderSize.x * ScaleFactor;
					BorderSize.z = SpriteSize.x - BorderSize.x;
				}

				float BorderHeight = BorderSize.y + BorderSize.w;
				if ( BorderHeight > SpriteSize.y )
				{
					float ScaleFactor = SpriteSize.y / BorderHeight;
					BorderSize.y = BorderSize.y * ScaleFactor;
					BorderSize.w = SpriteSize.y - BorderSize.y;
				}

				BorderUV.xy = ( BorderSize.xy / ImageSize ) * UVRectSize.xy;
				BorderUV.zw = ( BorderSize.zw / ImageSize ) * UVRectSize.xy;

				float2 TextureMiddle = ImageSize - BorderSize.xy - BorderSize.zw;
				if ( Type == 1 && TextureMiddle.x > 0.0 && TextureMiddle.x > 0.0 )
				{
					float2 Middle = SpriteSize.xy - BorderSize.xy - BorderSize.zw;
					MiddleUVScale.xy = Middle / TextureMiddle;
				}
			}

			BorderUVCutoff.xy = UVRectTL + BorderUV.xy / BorderUVScale.xy;
			BorderUVCutoff.zw = UVRectBR - BorderUV.zw / BorderUVScale.xy;

			MiddleUVTileFactor = MiddleUVScale;
			MiddleUVTileFactor.x = MiddleUVTileFactor.x / ( BorderUVCutoff.z - BorderUVCutoff.x );
			MiddleUVTileFactor.y = MiddleUVTileFactor.y / ( BorderUVCutoff.w - BorderUVCutoff.y );

			MiddleUVScale = UVRectSize.xy - BorderUV.xy - BorderUV.zw;
			MiddleUVOffset = UVRect.xy + BorderUV.xy;

#endif // PDX_GUI_SPRITE_EFFECT

			float2 TranslateUV = SpriteTranslateRotateUVAndAlpha[Index].xy;
			float  RotateUV    = SpriteTranslateRotateUVAndAlpha[Index].z;

			return SampleSpriteTexture(
				SpriteTexture,
				UV,
				BorderUVRect,
				BorderUVScale,
				BorderUVCutoff,
				MiddleUVTileFactor,
				MiddleUVScale,
				MiddleUVOffset,
				TranslateUV,
				RotateUV,
				SpriteSize.xy );
		}

		float4 SampleSpriteTexture( in PdxTextureSampler2D SpriteTexture, float2 UV, int Index )
		{
			int Frame0 = SpriteFramesTypeBlendMode[Index].x;
			int Type   = SpriteFramesTypeBlendMode[Index].z;
			float4 Color0 = SampleSpriteTexture( SpriteTexture, UV, Index, Frame0, Type );
#if defined(PDX_GUI_FRAME_BLEND_EFFECT)
			int Frame1 = SpriteFramesTypeBlendMode[Index].y;

			float4 Color1 = SampleSpriteTexture( SpriteTexture, UV, Index, Frame1, Type );
			return lerp( Color0, Color1, SpriteFrameBlendAlpha[Index/4][Index%4] );
#else
			return Color0;
#endif
		}

		
		// This needs to be in sync with "CPdxGuiImageSprite::EBlendMode"
		float4 Blend( float4 Base, float4 Blend, float Opacity, inout float BlendMask, int Mode )
		{			
			float4 ReturnBlend = Base;

			int ModeId = Mode & 0xf;

			if ( ModeId == 0 ) // Add 
			{
				ReturnBlend = float4( Add( Base.rgb, Blend.rgb, Opacity ), Base.a );
			}
			else if ( ModeId == 1 ) // Overlay
			{
				ReturnBlend = float4( Overlay( Base.rgb, Blend.rgb, Opacity ), Base.a );
			}
			else if ( ModeId == 2 ) // Multiply
			{
				ReturnBlend = float4( Multiply( Base.rgb, Blend.rgb, Opacity ), Base.a);
			}
			else if ( ModeId == 3 ) // ColorDodge
			{
				ReturnBlend = float4( ColorDodge( Base.rgb, Blend.rgb, Opacity ), Base.a );
			}
			else if ( ModeId == 4 ) // Lighten
			{
				ReturnBlend = float4( Lighten( Base.rgb, Blend.rgb, Opacity ), Base.a );
			}
			else if ( ModeId == 5 ) // Darken
			{
				ReturnBlend = float4( Darken( Base.rgb, Blend.rgb, Opacity ), Base.a );
			}
			else if ( ModeId == 6 ) // Mask
			{
				int ChannelIdx = ( 0xf & ( Mode >> 4 ) );
				BlendMask = Blend[ChannelIdx] * Opacity;
			}
			else if ( ModeId == 7 ) // Normal
			{
				ReturnBlend = float4( lerp( Base, Blend, Opacity * Blend.a ).rgb, Base.a );
			}
			else if ( ModeId == 8 ) // AlphaMultiply
			{				
				int ChannelIdx = ( 0xf & ( Mode >> 4 ) );
				ReturnBlend = float4( Base.rgb, Base.a * lerp( 1.0, Blend[ ChannelIdx ], Opacity ) );
			}
			
			return ReturnBlend;
		}

		float2 GetUVForIndex( int Index, float2 UV )
		{
			// NOTE: The bits *must* correspond to the "PdxGui::MirrorFlags" enum

			uint Flags = MirrorFlags[Index/4][Index%4];

			if ( ( Flags & 1u ) != 0 ) // First bit set is a horizontal flip
			{
				UV.x = 1.0 - UV.x;
			}

			if ( ( Flags & 2u ) != 0 ) // Second bit set is a vertical flip
			{
				UV.y = 1.0 - UV.y;
			}

			return UV;
		}
		
		void ApplyModifyTextures( inout float4 Base, float2 UV )
		{
#ifdef PDX_GUI_SPRITE_EFFECT			
			float4 ModifyTextures[MaxSprites-1];

			float BlendMask = 1.0f;

		if ( MaxSprites > 10 )
		{
			if ( ModifyTexturesCount > 9 )
			{
				ModifyTextures[9] = SampleSpriteTexture( ModifyTexture9, GetUVForIndex( 10, UV ), 10 );
			}
		}
		if ( MaxSprites > 9 )
		{
			if ( ModifyTexturesCount > 8 )
			{
				ModifyTextures[8] = SampleSpriteTexture( ModifyTexture8, GetUVForIndex( 9, UV ), 9 );
			}
		}
		if ( MaxSprites > 8 )
		{
			if ( ModifyTexturesCount > 7 )
			{
				ModifyTextures[7] = SampleSpriteTexture( ModifyTexture7, GetUVForIndex( 8, UV ), 8 );
			}
		}
		if ( MaxSprites > 7 )
		{
			if ( ModifyTexturesCount > 6 )
			{
				ModifyTextures[6] = SampleSpriteTexture( ModifyTexture6, GetUVForIndex( 7, UV ), 7 );
			}
		}
		if ( MaxSprites > 6 )
		{
			if ( ModifyTexturesCount > 5)
			{
				ModifyTextures[5] = SampleSpriteTexture( ModifyTexture5, GetUVForIndex( 6, UV ), 6 );
			}
		}
		if ( MaxSprites > 5 )
		{
			if ( ModifyTexturesCount > 4 )
			{
				ModifyTextures[4] = SampleSpriteTexture( ModifyTexture4, GetUVForIndex( 5, UV ), 5 );
			}
		}
		if ( MaxSprites > 4 )
		{
			if ( ModifyTexturesCount> 3 )
			{
				ModifyTextures[3] = SampleSpriteTexture( ModifyTexture3, GetUVForIndex( 4, UV ), 4 );
			}
		}
		if ( MaxSprites > 3 )
		{
			if ( ModifyTexturesCount > 2 )
			{
				ModifyTextures[2] = SampleSpriteTexture( ModifyTexture2, GetUVForIndex( 3, UV ), 3 );
			}
		}
		if ( MaxSprites > 2 )
		{
			if ( ModifyTexturesCount > 1 )
			{
				ModifyTextures[1] = SampleSpriteTexture( ModifyTexture1, GetUVForIndex( 2, UV ), 2 );
			}
		}
		if ( MaxSprites > 10 )
		{
			if ( ModifyTexturesCount > 0 )
			{
				ModifyTextures[0] = SampleSpriteTexture( ModifyTexture0, GetUVForIndex( 1, UV ), 1 );
			}
		}
				
			for ( int i = 0; i < ModifyTexturesCount; ++i )
			{
				float4 ModifyTextureBase = ModifyTextures[i];
				ModifyTextureBase = ModifyTextureBase * SpriteModifyTexturesColors[i+1];
				
				Base = Blend( 
					Base, 
					ModifyTextureBase, 
					BlendMask * SpriteTranslateRotateUVAndAlpha[i+1].w, 
					BlendMask, 
					SpriteFramesTypeBlendMode[i+1].w );
			}
#endif // PDX_GUI_SPRITE_EFFECT
		}
		
		float4 SampleImageSprite( in PdxTextureSampler2D SpriteTexture, float2 UV )
		{
			float4 Base = SampleSpriteTexture( SpriteTexture, UV, 0 );

			UV = (UV - SpriteUVRect.xy) / SpriteUVRect.zw;

			ApplyModifyTextures( Base, UV );

			return Base;
		}
	

// === Main Code === 

float4 main( VS_OUTPUT_PDX_GUI Input, bool PDX_IsFrontFace : SV_IsFrontFace ) : PDX_COLOR
{			
	float4 OutColor = SampleImageSprite( Texture, Input.UV0 );

	OutColor *= Input.Color;
	#ifdef DISABLED
		float Grey = 0.615; 
		OutColor.rgb = float3( Grey, Grey, Grey );
	#endif
    return OutColor;
}

