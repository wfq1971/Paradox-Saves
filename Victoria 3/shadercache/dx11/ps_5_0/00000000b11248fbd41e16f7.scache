

// === Shader Info === 

// Shader file: gfx/FX/pdxborder.shader
// Effect: ImpassableBorder
// ===ShaderInfo End===



// === Defines === 

#define PDX_DIRECTX_11
#define PIXEL_SHADER
#define PDX_HLSL
#define IMPASSABLE_BORDER
#define PDX_MAX_HEIGHTMAP_COMPRESS_LEVELS 5
#define JOMINI_REFRACTION_ENABLED
#define HIGH_QUALITY_SHADERS


// === HLSL Macros === 

#define PDX_POSITION SV_Position
#define PDX_COLOR SV_Target
#define PDX_COLOR0 SV_Target0
#define PDX_COLOR0_SRC1 SV_Target1 // Use this when doing dual source blending, currently only supports that for render target #0
#define PDX_COLOR1 SV_Target1
#define PDX_COLOR2 SV_Target2
#define PDX_COLOR3 SV_Target3
#define PDX_COLOR4 SV_Target4
#define PDX_COLOR5 SV_Target5
#define PDX_COLOR6 SV_Target6
#define PDX_COLOR7 SV_Target7
#define PDX_VertexID SV_VertexID
#define PDX_InstanceID SV_InstanceID
#define PDX_DispatchThreadID SV_DispatchThreadID
#define PDX_GroupThreadID SV_GroupThreadID
#define PDX_GroupID SV_GroupID
#define PDX_GroupIndex SV_GroupIndex
#define PDX_TessFactor SV_TessFactor
#define PDX_InsideTessFactor SV_InsideTessFactor
#define PDX_OutputControlPointID SV_OutputControlPointID
#define PDX_DomainLocation SV_DomainLocation
#define PDX_RenderTargetArrayIndex SV_RenderTargetArrayIndex
#define PDX_ViewportArrayIndex SV_ViewportArrayIndex
#define PDX_Depth SV_Depth

#define PdxDomainTypeTriangle "tri"
#define PdxDomainTypeQuad "quad"
#define PdxDomainTypeIsoline "isoline"

#define PdxPartitioningModeInteger "integer"
#define PdxPartitioningModeFractionalEven "fractional_even"
#define PdxPartitioningModeFractionalOdd "fractional_odd"

#define PdxPrimitiveTypePoint point
#define PdxPrimitiveTypeLine line
#define PdxPrimitiveTypeTriangle triangle
#define PdxPrimitiveTypeLineAdjacency lineadj
#define PdxPrimitiveTypeTriangleAdjacency triangleadj

#define PdxTessellatorOutputTopologyPoint "point"
#define PdxTessellatorOutputTopologyLine "line"
#define PdxTessellatorOutputTopologyTriangleCw "triangle_cw"
#define PdxTessellatorOutputTopologyTriangleCcw "triangle_ccw"

#define PdxMeshShaderOutputTopologyLine "line"
#define PdxMeshShaderOutputTopologyTriangle "triangle"

#define mod( X, Y ) ( (X) % (Y) )

float2x2 Create2x2( in float2 x, in float2 y )
{
	return transpose( float2x2( x, y ) );
}
// TODO, Create3x3 should be transposed in hlsl, and not in glsl, and then the mul() arguments should be reversed
#define Create3x3 float3x3
float4x4 Create4x4( in float4 x, in float4 y, in float4 z, in float4 w )
{
	return transpose( float4x4( x, y, z, w ) );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}

#define lessThan( a, b ) ( (a) < (b) )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct PdxTextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
struct PdxTextureSampler2DMS
{
    Texture2DMS<float4>		_Texture;
};

struct PdxTextureSampler2DArray
{
    Texture2DArray	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler3D
{
    Texture3D 		_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};

struct PdxTextureSampler2DCmp
{
    Texture2D 				_Texture;
    SamplerComparisonState 	_Sampler;
};

// These are for separate Texture/Sampler objects
#define PdxSampleTex2D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex2DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )
#define PdxSampleTex2DGrad(tex,samp,uv,ddx,ddy) (tex).SampleGrad( (samp), (uv), (ddx), (ddy) )
#define PdxSampleTex2DGather(tex,samp,uv) (tex).Gather( (samp), (uv) )

#define PdxSampleTex3D(tex,samp,uv) (tex).Sample( (samp), (uv) )
#define PdxSampleTex3DLod(tex,samp,uv,lod) (tex).SampleLevel( (samp), (uv), (lod) )

#define PdxTexture2DSize(tex,size) (tex).GetDimensions( (size).x, (size).y )
#define PdxTexture2DLoad(tex,uv,lod) (tex).Load( int3((uv), (lod)) )

#define PdxTexture2DArraySize(tex,size,elements) (tex).GetDimensions( (size).x, (size).y, elements )
#define PdxTexture2DArrayLoad(tex,uv,arrayindex,lod) (tex).Load( int4((uv), (arrayindex), (lod)) )

#define PdxTexture3DSize(tex,size) (tex).GetDimensions( (size).x, (size).y, (size).z )
#define PdxTexture3DLoad(tex,uv,lod) (tex).Load( int4((uv), (lod)) )

// These are for the combined TextureSampler objects
#define PdxTex2DSize(samp,size) PdxTexture2DSize( (samp)._Texture, (size) )
#define PdxTex2D(samp,uv) PdxSampleTex2D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLod(samp,uv,lod) PdxSampleTex2DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex2DLodOffset(samp,uv,lod,offset) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod), (offset) )
#define PdxTex2DBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )
#define PdxTex2DGrad(samp,uv,ddx,ddy) PdxSampleTex2DGrad( (samp)._Texture, (samp)._Sampler, (uv), (ddx), (ddy) )
#define PdxTex2DGather(samp,uv) PdxSampleTex2DGather( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex2DLoad(samp,uv,lod) PdxTexture2DLoad( (samp)._Texture, (uv), (lod) )
#define PdxTex2DMultiSampled(samp,texelcoord,sampleidx) (samp)._Texture.Load( (texelcoord), (sampleidx) )
#define PdxTex2DMSSize(samp,size,samples) (samp)._Texture.GetDimensions( (size).x, (size).y, (samples) )

#define PdxTex3D(samp,uv) PdxSampleTex3D( (samp)._Texture, (samp)._Sampler, (uv) )
#define PdxTex3DLod(samp,uv,lod) PdxSampleTex3DLod( (samp)._Texture, (samp)._Sampler, (uv), (lod) )
#define PdxTex3DLoad(samp,uv,lod) PdxTexture3DLoad( (samp)._Texture, (uv), (lod) )

#define PdxTexCube(samp,uv) (samp)._Texture.Sample( (samp)._Sampler, (uv) )
#define PdxTexCubeLod(samp,uv,lod) (samp)._Texture.SampleLevel( (samp)._Sampler, (uv), (lod) )
#define PdxTexCubeBias(samp,uv,bias) (samp)._Texture.SampleBias( (samp)._Sampler, (uv), (bias) )

#define PdxTex2DCmpLod0(samp,uv,value) (samp)._Texture.SampleCmpLevelZero( (samp)._Sampler, (uv), (value) )

// Vulkan fails to compile shaders with this function call properly
// Commenting it out until we can fix this issue
//#define PdxCalculateLod(samp,uv) (samp)._Texture.CalculateLevelOfDetail( (samp)._Sampler, (uv) )

float4x4 FixProjection( float4x4 ProjectionMatrix )
{
	// Enable for "debug" drawing to see if some objects is missing fix
	#if 0
	for ( int i = 0; i < 4; ++i )
	{
		GetMatrixData( ProjectionMatrix, 0, i ) *= 0.5;
		GetMatrixData( ProjectionMatrix, 1, i ) *= 0.5;
	}
	#endif
	
	return ProjectionMatrix;
}

#define PdxBufferFloat  Buffer<float>
#define PdxBufferFloat2	Buffer<float2>
#define PdxBufferFloat3	Buffer<float3>
#define PdxBufferFloat4	Buffer<float4>
#define PdxBufferInt  	Buffer<int>
#define PdxBufferInt2	Buffer<int2>
#define PdxBufferInt3	Buffer<int3>
#define PdxBufferInt4	Buffer<int4>
#define PdxBufferUint   Buffer<uint>
#define PdxBufferUint2	Buffer<uint2>
#define PdxBufferUint3	Buffer<uint3>
#define PdxBufferUint4	Buffer<uint4>

#define PdxStructuredBuffer StructuredBuffer
#define PdxRWStructuredBuffer RWStructuredBuffer
#define PdxRasterizerOrderedBuffer RasterizerOrderedBuffer
#define PdxRasterizerOrderedStructuredBuffer RasterizerOrderedStructuredBuffer

float 	PdxReadBuffer( in PdxBufferFloat Buf, int Index )  		{ return Buf.Load( Index ); }
float2	PdxReadBuffer2( in PdxBufferFloat2 Buf, int Index )		{ return Buf.Load( Index ); }
float3	PdxReadBuffer3( in PdxBufferFloat3 Buf, int Index )		{ return Buf.Load( Index ); }
float4	PdxReadBuffer4( in PdxBufferFloat4 Buf, int Index )		{ return Buf.Load( Index ); }

int  	PdxReadBuffer( in PdxBufferInt Buf, int Index ) 		{ return Buf.Load( Index ); }
int2 	PdxReadBuffer2( in PdxBufferInt2 Buf, int Index )		{ return Buf.Load( Index ); }
int3 	PdxReadBuffer3( in PdxBufferInt3 Buf, int Index )    	{ return Buf.Load( Index ); }
int4 	PdxReadBuffer4( in PdxBufferInt4 Buf, int Index )    	{ return Buf.Load( Index ); }

uint  	PdxReadBuffer( in PdxBufferUint Buf, int Index )    	{ return Buf.Load( Index ); }
uint2 	PdxReadBuffer2( in PdxBufferUint2 Buf, int Index )  	{ return Buf.Load( Index ); }
uint3 	PdxReadBuffer3( in PdxBufferUint3 Buf, int Index )  	{ return Buf.Load( Index ); }
uint4 	PdxReadBuffer4( in PdxBufferUint4 Buf, int Index )  	{ return Buf.Load( Index ); }

#define PdxReadRWBuffer(buffer,index) (buffer)[(index)]
#define PdxWriteRWBuffer(buffer,index,value) (buffer)[(index)] = (value)

#define Quaternion float4

#define UINT16_MAX 0xffff
#define UINT32_MAX 0xffffffff
#define PI 3.14159265359

float2x2 Create2x2( float a, float b, float c, float d ) { return Create2x2( float2( a, b ), float2( c, d ) ); }

#define PdxSampleTex2DLod0(tex,samp,uv) PdxSampleTex2DLod( (tex), (samp), (uv), 0 )

#define PdxTexture2DLoad0(tex,uv) PdxTexture2DLoad( (tex), (uv), 0 )

#define PdxTexture2DArrayLoad0(tex,uv,arrayindex) PdxTexture2DArrayLoad( (tex), (uv), (arrayindex), 0)

#define PdxTex2DProj(samp,uv_proj) PdxTex2DLod0( (samp), (uv_proj).xy / (uv_proj).w )
#define PdxTex2DLod0(samp,uv) PdxTex2DLod( (samp), (uv), 0 )
#define PdxTex2DLod0Offset(samp,uv,offset) PdxTex2DLodOffset( (samp), (uv), 0, (offset) )
#define PdxTex2DLoad0(samp,uv) PdxTex2DLoad( (samp), (uv), 0 )

#define PdxTex3DLod0(samp,uv) PdxTex3DLod( (samp), (uv), 0 )
#define PdxTex3DLoad0(samp,uv) PdxTex3DLoad( (samp), (uv), 0 )

float4 FixProjectionAndMul( float4x4 ProjectionMatrix, float4 Vector )
{
	return mul( FixProjection( ProjectionMatrix ), Vector );
}



// === Vertex Structs === 

struct VS_INPUT_PDX_TERRAIN
{
	float2 UV : TEXCOORD0;
	float2 LodDirection : TEXCOORD1;
	uint4 NodeOffset_Scale_Lerp : TEXCOORD2;
};
struct VS_INPUT_PDX_TERRAIN_SKIRT
{
	float2 UV : TEXCOORD0;
	float2 LodDirection : TEXCOORD1;
	uint4 NodeOffset_Scale_Lerp : TEXCOORD2;
	uint VertexID : PDX_VertexID;
};
struct VS_INPUT_PDX_BORDER
{
	float3 Position : TEXCOORD0;
	float2 UV : TEXCOORD1;
};
struct PS_COLOR_SSAO
{
	float4 Color : PDX_COLOR0;
	float4 SSAOColor : PDX_COLOR1;
};
struct VS_OUTPUT_PDX_BORDER
{
	float4 Position : PDX_POSITION;
	float3 WorldSpacePos : TEXCOORD0;
	float2 UV : TEXCOORD1;
};


// === Constant Buffers === 

cbuffer pdx_hlsl_cbPdxHeightmapConstants
{
	float4 TileToHeightMapScaleAndOffset[5];
	float2 WorldSpaceToLookup;
	float2 OriginalHeightmapToWorldSpace;
	float2 IndirectionSize;
	float2 PackedHeightMapSize;
	float BaseTileSize;
	float HeightScale;
}
cbuffer pdx_hlsl_cbPdxCamera
{
	float4x4 ViewProjectionMatrix;
	float4x4 InvViewProjectionMatrix;
	float4x4 ViewMatrix;
	float4x4 InvViewMatrix;
	float4x4 ProjectionMatrix;
	float4x4 InvProjectionMatrix;
	float4x4 ShadowMapTextureMatrix;
	float3 CameraPosition;
	float ZNear;
	float3 CameraLookAtDir;
	float ZFar;
	float3 CameraUpDir;
	float CameraFoV;
	float3 CameraRightDir;
	float _UpscaleLodBias;
	float _UpscaleLodBiasNative;
	float _UpscaleLodBiasMultiplier;
	float _UpscaleLodBiasMultiplierNative;
	float _UpscaleLodBiasEnabled;
}
cbuffer pdx_hlsl_cbPdxTerrainConstants
{
	float3 _NormalScale;
	float _QuadtreeLeafNodeScale;
	float2 _NormalStepSize;
	float2 _DetailTileFactor;
	float _DetailBlendRange;
	float _SkirtSize;
	float2 _NormQuadtreeToWorld;
	float2 _WorldSpaceToTerrain0To1;
	float2 _WorldSpaceToDetail;
	float2 _DetailTexelSize;
	float2 _DetailTextureSize;
	float2 _WorldExtents;
}
cbuffer pdx_hlsl_cbPdxShadowmap
{
	float ShadowFadeFactor;
	float Bias;
	float KernelScale;
	float ShadowScreenSpaceScale;
	int NumSamples;
	float4 DiscSamples[8];
}
cbuffer pdx_hlsl_cbPdxConstantBuffer01
{
	float _HeightOffset;
	uint _UserId;
	float _Alpha;
}
cbuffer pdx_hlsl_cbJominiEnvironment
{
	float3 AmbientPosX;
	float CubemapIntensity;
	float3 AmbientNegX;
	float3 AmbientPosY;
	float3 AmbientNegY;
	float3 AmbientPosZ;
	float3 AmbientNegZ;
	float3 ShadowAmbientPosX;
	float3 ShadowAmbientNegX;
	float3 ShadowAmbientPosY;
	float3 ShadowAmbientNegY;
	float3 ShadowAmbientPosZ;
	float3 ShadowAmbientNegZ;
	float FogMax;
	float3 SunDiffuse;
	float SunIntensity;
	float3 ToSunDir;
	float FogBegin2;
	float3 FogColor;
	float FogEnd2;
	float4x4 CubemapYRotation;
	float TreeSwayLoopSpeed;
	float TreeSwayWindStrengthSpatialModifier;
	float TreeSwaySpeed;
	float TreeSwayWindClusterSizeModifier;
	float3 TreeSwayWorldDirection;
	float TreeHeightImpactOnSway;
	float TreeSwayScale;
}
cbuffer pdx_hlsl_cbGameSharedConstants
{
	float2 MapSize;
	float2 _ProvinceMapSize;
	float4 _SSAOColorMesh;
	float4 _MeshTintColor;
	float4 _DecentralizedCountryColor;
	float4 _ImpassableTerrainColor;
	float4 _NightLightColor;
	float4 _FlatmapFoldsColor;
	float4 _FlatmapLinesColor;
	float4 _FlatmapDetailsColor;
	float3 _SecondSunDiffuse;
	float _SecondSunIntensity;
	float3 _SecondSunDir;
	float GlobalTime;
	float _FlatmapHeight;
	float _FlatmapLerp;
	float _ShorelineMaskBlur;
	float _ShorelineExtentStr;
	float _ShorelineAlpha;
	int _ShoreLinesUVScale;
	float _FlatmapOverlayLandOpacity;
	float _FlatmapEquatorPosition;
	int _FlatmapEquatorTiling;
	int _ImpassableTerrainTiling;
	float _ImpassableTerrainHeight;
	float _DistanceFadeStart;
	float _DistanceFadeEnd;
	float _WaterShadowMultiplier;
	float _MeshTintHeightMin;
	float _MeshTintHeightMax;
	float _SSAOAlphaTrees;
	float _SSAOAlphaTerrain;
	float _FogCloseOffset;
	float _FogFarOffset;
	float _FogWidthScale;
	float _DistanceRoughnessPosition;
	float _DistanceRoughnessBlend;
	float _DistanceRoughnessScale;
	float _OverlayOpacity;
	int _MapPaintingTextureTiling;
	int _MapPaintingFlatmapTextureTiling;
	bool _UseMapmodeTextures;
	bool _UsePrimaryRedAsGradient;
	bool _UseStripeOccupation;
	float _NightWaterAdjustment;
	float _DayNightBrightness;
	float _DayNightValue;
	float _DayValue;
	float _NightValue;
	float _LightsFadeTime;
	float _LightsActivateBegin;
	float _LightsActivateEnd;
}
cbuffer pdx_hlsl_cbJominiFogOfWar
{
	float2 FogOfWarAlphaMapSize;
	float2 InverseWorldSize;
	float2 FogOfWarPatternSpeed;
	float FogOfWarPatternStrength;
	float FogOfWarPatternTiling;
	float FogOfWarTime;
	float FogOfWarAlphaMin;
}
cbuffer pdx_hlsl_cbGameFogOfWar
{
	float4 _FoWShadowColor;
	float4 _FoWCloudsColor;
	float4 _FoWCloudsColorGradient;
	float4 _FoWCloudsColorSunset;
	float4 _FoWCloudsColorSunsetGradient;
	float4 _FoWCloudsColorNight;
	float4 _FoWCloudsColorNightGradient;
	float2 _FoWMasterUVScale;
	float2 _FoWMasterUVSpeed;
	float2 _FoWLayer1Speed;
	float2 _FoWLayer2Speed;
	float2 _FoWLayer3Speed;
	float _FoWCloudsColorDayGradientMin;
	float _FoWCloudsColorDayGradientMax;
	float _FoWCloudsColorSunsetGradientMin;
	float _FoWCloudsColorSunsetGradientMax;
	float _FoWCloudsColorNightGradientMin;
	float _FoWCloudsColorNightGradientMax;
	float _FoWCloudHeight;
	float _CloudNormalStrength;
	float _CloudAmbientValue;
	float _CloudLightMultiplier;
	float _CloudLightMin;
	float _CloudLightMax;
	float _CloudSunsetColorValueMin;
	float _CloudSunsetColorValueMax;
	float _FoWShadowMult;
	float _FoWShadowTexStart;
	float _FoWShadowTexStop;
	float _FoWShadowAlphaStart;
	float _FoWShadowAlphaStop;
	float _FowShadowLayer1Min;
	float _FowShadowLayer1Max;
	float _FowShadowLayer2Min;
	float _FowShadowLayer2Max;
	float _FowShadowLayer3Min;
	float _FowShadowLayer3Max;
	float _FoWCloudsAlphaStart;
	float _FoWCloudsAlphaStop;
	float _FoWMasterStart;
	float _FoWMasterStop;
	int _FoWMasterUVTiling;
	float _FoWMasterUVRotation;
	float _FoWLayer1Min;
	float _FoWLayer1Max;
	int _FoWLayer1Tiling;
	float _FoWLayer2Min;
	float _FoWLayer2Max;
	float _FoWLayer2Balance;
	int _FoWLayer2Tiling;
	float _FoWLayer3Min;
	float _FoWLayer3Max;
	float _FoWLayer3Balance;
	int _FoWLayer3Tiling;
	float _FoWShowAlphaMask;
}
cbuffer pdx_hlsl_cbDevastationConstants
{
	float2 DevastationBezierPoint1;
	float2 DevastationBezierPoint2;
	int DevastationTexIndex;
	int DevastationTexIndexOffset;
	int DevastationNoiseTiling;
	int DevastationTextureTiling;
	float DevastationHue;
	float DevastationSaturation;
	float DevastationValue;
	float DevastationTreeHue;
	float DevastationTreeSaturation;
	float DevastationTreeValue;
	float DevastationAreaPosition;
	float DevastationAreaContrast;
	float DevastationAreaMax;
	float DevastationHeightWeight;
	float DevastationHeightContrast;
	float DevastationExclusionMaskMin;
	float DevastationExclusionMaskMax;
	float DevastationTreeAlphaReduce;
	float DevastationForceAdd;
}
cbuffer pdx_hlsl_cbPollutionConstants
{
	float3 IridescenseRimlightDirection;
	float _Padding1;
	float2 PollutionBezierPoint1;
	float2 PollutionBezierPoint2;
	int PollutionTexIndex;
	int PollutionTexIndexOffset;
	int PollutionNoiseTiling;
	int PollutionTextureTiling;
	float PollutionHue;
	float PollutionSaturation;
	float PollutionValue;
	float PollutionAlpha;
	float PollutionTreeHue;
	float PollutionTreeSaturation;
	float PollutionTreeValue;
	float PollutionAreaPosition;
	float PollutionAreaContrast;
	float PollutionAreaMax;
	float PollutionHeightWeight;
	float PollutionHeightContrast;
	float PollutionExclusionMaskMin;
	float PollutionExclusionMaskMax;
	float PollutionTreeAlphaReduce;
	float PollutionForceAdd;
	float IridescenseOpacity;
	float IridescenseNoiseTiling;
	float IridescensePosition;
	float IridescenseContrast;
	float IridescenseRoughness;
	float IridescenseRed;
	float IridescenseGreen;
	float IridescenseBlue;
	float IridescenseRimlightStrength;
	float IridescenseThicknessMin;
	float IridescenseThicknessmax;
	float IridescenseMediumn;
	float IridescenseFilmn;
	float Iridescenseinternaln;
}


// === Samplers === 

SamplerState _sampler_0_ : register(s0);
SamplerState _sampler_1_ : register(s1);
SamplerState _sampler_2_ : register(s2);
SamplerState _sampler_3_ : register(s3);
SamplerComparisonState _sampler_4_ : register(s4);


// === Textures === 

Texture2D HeightLookupTexture_Texture;
static PdxTextureSampler2D HeightLookupTexture = { HeightLookupTexture_Texture, _sampler_0_ };
Texture2D PackedHeightTexture_Texture;
static PdxTextureSampler2D PackedHeightTexture = { PackedHeightTexture_Texture, _sampler_1_ };
TextureCube EnvironmentMap_Texture;
static PdxTextureSamplerCube EnvironmentMap = { EnvironmentMap_Texture, _sampler_1_ };
Texture2DArray DetailTextures_Texture;
static PdxTextureSampler2DArray DetailTextures = { DetailTextures_Texture, _sampler_2_ };
Texture2DArray NormalTextures_Texture;
static PdxTextureSampler2DArray NormalTextures = { NormalTextures_Texture, _sampler_2_ };
Texture2DArray MaterialTextures_Texture;
static PdxTextureSampler2DArray MaterialTextures = { MaterialTextures_Texture, _sampler_2_ };
Texture2D DetailIndexTexture_Texture;
static PdxTextureSampler2D DetailIndexTexture = { DetailIndexTexture_Texture, _sampler_0_ };
Texture2D DetailMaskTexture_Texture;
static PdxTextureSampler2D DetailMaskTexture = { DetailMaskTexture_Texture, _sampler_0_ };
Texture2D ColorTexture_Texture;
static PdxTextureSampler2D ColorTexture = { ColorTexture_Texture, _sampler_3_ };
Texture2D FogOfWarAlpha_Texture;
static PdxTextureSampler2D FogOfWarAlpha = { FogOfWarAlpha_Texture, _sampler_2_ };
Texture2D FogOfWarNoise_Texture;
static PdxTextureSampler2D FogOfWarNoise = { FogOfWarNoise_Texture, _sampler_2_ };
Texture2D FogOfWarNormal_Texture;
static PdxTextureSampler2D FogOfWarNormal = { FogOfWarNormal_Texture, _sampler_2_ };
Texture2D VerticalBorderLUT_Texture;
static PdxTextureSampler2D VerticalBorderLUT = { VerticalBorderLUT_Texture, _sampler_1_ };
Texture2D DevastationPollution_Texture;
static PdxTextureSampler2D DevastationPollution = { DevastationPollution_Texture, _sampler_2_ };
Texture2D DevastationVFXLUT_Texture;
static PdxTextureSampler2D DevastationVFXLUT = { DevastationVFXLUT_Texture, _sampler_1_ };
Texture2D BorderTexture_Texture;
static PdxTextureSampler2D BorderTexture = { BorderTexture_Texture, _sampler_2_ };
Texture2D CountryColors_Texture;
static PdxTextureSampler2D CountryColors = { CountryColors_Texture, _sampler_0_ };
Texture2D ShadowMap_Texture;
static PdxTextureSampler2DCmp ShadowMap = { ShadowMap_Texture, _sampler_4_ };
Texture2D BorderTexture0_Texture;
static PdxTextureSampler2D BorderTexture0 = { BorderTexture0_Texture, _sampler_2_ };


// === RW Textures === 



// === Buffer Textures === 



// === RW Buffer Textures === 



// === Shader Code === 

float2 GetLookupCoordinates( float2 WorldSpacePosXZ )
{
	return clamp( WorldSpacePosXZ * WorldSpaceToLookup, vec2( 0.0 ), vec2( 0.999999 ) );
}

float4 SampleLookupTexture( float2 LookupCoordinates )
{
	float4 IndirectionSample = PdxTex2DLod0( HeightLookupTexture, ( floor( LookupCoordinates * IndirectionSize ) + vec2( 0.5 ) ) / IndirectionSize ) * 255.0;
	return IndirectionSample;
}

float2 GetTileUV( float2 LookupCoordinates, float4 IndirectionSample, out float CurrentTileScale )
{
	float CurrentTileSize = (BaseTileSize - 1.0) / IndirectionSample.z + 1;
	float CurrentTileOffset = 0.5 / CurrentTileSize;
	CurrentTileScale = (CurrentTileSize - 1.0) / CurrentTileSize;

	float2 WithinTileZeroToOne = frac( LookupCoordinates * IndirectionSize );
	float2 WithinTileUV = vec2( CurrentTileOffset ) + WithinTileZeroToOne * CurrentTileScale;
	float2 TileUV = IndirectionSample.rg + WithinTileUV;

	return TileUV;
}

float2 GetHeightMapCoordinates( float2 WorldSpacePosXZ )
{
	float2 LookupCoordinates = GetLookupCoordinates( WorldSpacePosXZ );
	float4 IndirectionSample = SampleLookupTexture( LookupCoordinates );

	float4 CurrentTileToHeightMapScaleAndOffset = TileToHeightMapScaleAndOffset[int(IndirectionSample.w)];
	float CurrentTileScale;
	float2 TileUV = GetTileUV( LookupCoordinates, IndirectionSample, CurrentTileScale );

	float2 HeightMapCoord = TileUV * CurrentTileToHeightMapScaleAndOffset.xy + CurrentTileToHeightMapScaleAndOffset.zw; // 0 -> 1 in packed heightmap
	return HeightMapCoord;
}

float GetHeight01( float2 WorldSpacePosXZ )
{
	float2 HeightMapCoord = GetHeightMapCoordinates( WorldSpacePosXZ );
	return PdxTex2DLod0( PackedHeightTexture, HeightMapCoord ).r;
}

float GetHeight( float2 WorldSpacePosXZ )
{
	return GetHeight01( WorldSpacePosXZ ) * HeightScale;
}

float GetHeightMultisample01( float2 WorldSpacePosXZ, float FilterSize )
{
	float2 LookupCoordinates = GetLookupCoordinates( WorldSpacePosXZ );
	float2 FilterSizeInWorldSpace = FilterSize * OriginalHeightmapToWorldSpace;
	float2 FilterSizeInLookup = FilterSizeInWorldSpace * WorldSpaceToLookup * IndirectionSize;

	float2 FracCoordinates = frac( LookupCoordinates * IndirectionSize );
	float2 MinFracCoordinatesScaled = min( FracCoordinates, vec2(1.0) - FracCoordinates );
	bool2 InBorder = lessThan( MinFracCoordinatesScaled, FilterSizeInLookup );

	float Height = 0.0;
	if ( any( InBorder ) )
	{
		Height = GetHeight01( WorldSpacePosXZ );
		Height += GetHeight01( WorldSpacePosXZ + float2( -FilterSizeInWorldSpace.x, 0 ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( 0, -FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( FilterSizeInWorldSpace.x, 0 ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( 0, FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( -FilterSizeInWorldSpace.x, -FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2(  FilterSizeInWorldSpace.x, -FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2(  FilterSizeInWorldSpace.x,  FilterSizeInWorldSpace.y ) );
		Height += GetHeight01( WorldSpacePosXZ + float2( -FilterSizeInWorldSpace.x,  FilterSizeInWorldSpace.y ) );
	}
	else
	{
		float4 IndirectionSample = SampleLookupTexture( LookupCoordinates );

		float4 CurrentTileToHeightMapScaleAndOffset = TileToHeightMapScaleAndOffset[int(IndirectionSample.w)];
		float CurrentTileScale;
		float2 TileUV = GetTileUV( LookupCoordinates, IndirectionSample, CurrentTileScale );

		float2 HeightMapCoord = TileUV * CurrentTileToHeightMapScaleAndOffset.xy + CurrentTileToHeightMapScaleAndOffset.zw; // 0 -> 1 in packed heightmap
		float2 FilterSizeInTile = FilterSizeInLookup * CurrentTileToHeightMapScaleAndOffset.xy * CurrentTileScale;

		Height = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( -FilterSizeInTile.x, 0 ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( 0, -FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( FilterSizeInTile.x, 0 ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( 0, FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( -FilterSizeInTile.x, -FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(  FilterSizeInTile.x, -FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(  FilterSizeInTile.x,  FilterSizeInTile.y ) ).r;
		Height += PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2( -FilterSizeInTile.x,  FilterSizeInTile.y ) ).r;
	}

	Height /= 9.0;
	return Height;
}

float GetHeightMultisample( float2 WorldSpacePosXZ, float FilterSize )
{
	return GetHeightMultisample01( WorldSpacePosXZ, FilterSize ) * HeightScale;
}

static const float c_x0 = -1.0;
static const float c_x1 =  0.0;
static const float c_x2 =  1.0;
static const float c_x3 =  2.0;

float CubicLagrange(float A, float B, float C, float D, float t)
{
	return
		A *
		(
			(t - c_x1) / (c_x0 - c_x1) *
			(t - c_x2) / (c_x0 - c_x2) *
			(t - c_x3) / (c_x0 - c_x3)
		) +
		B *
		(
			(t - c_x0) / (c_x1 - c_x0) *
			(t - c_x2) / (c_x1 - c_x2) *
			(t - c_x3) / (c_x1 - c_x3)
		) +
		C *
		(
			(t - c_x0) / (c_x2 - c_x0) *
			(t - c_x1) / (c_x2 - c_x1) *
			(t - c_x3) / (c_x2 - c_x3)
		) +
		D *
		(
			(t - c_x0) / (c_x3 - c_x0) *
			(t - c_x1) / (c_x3 - c_x1) *
			(t - c_x2) / (c_x3 - c_x2)
		);
}

float BicubicLagrangeBilinearGetHeight01( float2 WorldSpacePosXZ )
{
	float2 Pixel = WorldSpacePosXZ - 0.5;

	float2 FracCoord = frac(Pixel);
	Pixel = floor(Pixel) + 0.5;

	float C00 = GetHeight01( float2( Pixel.x - 1, Pixel.y - 1 ) );
	float C10 = GetHeight01( float2( Pixel.x - 0, Pixel.y - 1 ) );
	float C20 = GetHeight01( float2( Pixel.x + 1, Pixel.y - 1 ) );
	float C30 = GetHeight01( float2( Pixel.x + 2, Pixel.y - 1 ) );

	float C01 = GetHeight01( float2( Pixel.x - 1, Pixel.y - 0 ) );
	float C11 = GetHeight01( float2( Pixel.x - 0, Pixel.y - 0 ) );
	float C21 = GetHeight01( float2( Pixel.x + 1, Pixel.y - 0 ) );
	float C31 = GetHeight01( float2( Pixel.x + 2, Pixel.y - 0 ) );

	float C02 = GetHeight01( float2( Pixel.x - 1, Pixel.y + 1 ) );
	float C12 = GetHeight01( float2( Pixel.x - 0, Pixel.y + 1 ) );
	float C22 = GetHeight01( float2( Pixel.x + 1, Pixel.y + 1 ) );
	float C32 = GetHeight01( float2( Pixel.x + 2, Pixel.y + 1 ) );

	float C03 = GetHeight01( float2( Pixel.x - 1, Pixel.y + 2 ) );
	float C13 = GetHeight01( float2( Pixel.x - 0, Pixel.y + 2 ) );
	float C23 = GetHeight01( float2( Pixel.x + 1, Pixel.y + 2 ) );
	float C33 = GetHeight01( float2( Pixel.x + 2, Pixel.y + 2 ) );

	float CP0X = CubicLagrange(C00, C10, C20, C30, FracCoord.x);
	float CP1X = CubicLagrange(C01, C11, C21, C31, FracCoord.x);
	float CP2X = CubicLagrange(C02, C12, C22, C32, FracCoord.x);
	float CP3X = CubicLagrange(C03, C13, C23, C33, FracCoord.x);

	return CubicLagrange(CP0X, CP1X, CP2X, CP3X, FracCoord.y);
}

// /SAMPLING API
// Gamma correction utility
float ToGamma(float aLinear)
{
	return pow(aLinear, 1.0/2.2);
}
float3 ToGamma(float3 aLinear)
{
	return pow(aLinear, vec3(1.0/2.2));
}
float ToLinear(float aGamma)
{
	return pow(aGamma, 2.2);
}
float3 ToLinear(float3 aGamma)
{
	return pow(aGamma, vec3(2.2));
}
float4 ToLinear(float4 aGamma)
{
	return float4(pow(aGamma.rgb, vec3(2.2)), aGamma.a);
}

// Color value conversions
float3 RGBtoHSV( float3 RGB )
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = RGB.g < RGB.b ? float4(RGB.bg, K.wz) : float4(RGB.gb, K.xy);
	float4 q = RGB.r < p.x ? float4(p.xyw, RGB.r) : float4(RGB.r, p.yzx);

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x );
}
float3 HSVtoRGB( float3 HSV )
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs( frac(HSV.xxx + K.xyz) * 6.0 - K.www );
	return HSV.z * lerp( K.xxx, clamp(p - K.xxx, 0.0, 1.0), HSV.y );
}
float3 HSVtoRGB( float H, float S, float V )
{
	return HSVtoRGB( float3( H, S, V ) );
}
float4 RGBtoHSV( float4 RGBa )
{
	return float4( RGBtoHSV( RGBa.rgb ), RGBa.a );
}
float4 HSVtoRGB( float4 HSVa )
{
	return float4( HSVtoRGB( HSVa.xyz ), HSVa.a );
}
float4 HSVtoRGB( float H, float S, float V, float a )
{
	return HSVtoRGB( float4( H, S, V, a ) );
}

// Below are multiple blend mode utilities (See: https://en.wikipedia.org/wiki/Blend_modes)
// Most of these uses a typical implementation unless stated otherwise

// Multiply blend mode
float3 Multiply( float3 Base, float3 Blend, float Opacity )
{
	return Base * Blend * Opacity + Base * ( 1.0 - Opacity );
}

// Screen blend mode
float3 Screen( float3 Base, float3 Blend )
{
	return 1.0 - ( ( 1.0 - Base ) * ( 1.0 - Blend ) );
}

// Overlay blend mode
float Overlay( float Base, float Blend )
{
	return (Base < 0.5) ? (2.0 * Base * Blend) : (1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend));
}
float3 Overlay( float3 Base, float3 Blend )
{
	return float3( Overlay(Base.r, Blend.r), Overlay(Base.g, Blend.g), Overlay(Base.b, Blend.b) );
}
float Overlay( float Base, float Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 Overlay( float3 Base, float3 Blend, float Opacity )
{
	return Overlay( Base, Blend ) * Opacity + Base * (1.0 - Opacity );
}
float3 GetOverlay( float3 Color, float3 OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}
float GetOverlay( float Color, float OverlayColor, float OverlayPercent )
{
	// Flip OverlayColor/BaseColor since that was how it was before
	return lerp( Color, Overlay( OverlayColor, Color ), OverlayPercent );
}

// Color dodge blend mode (Dodge and burn)
float ColorDodge( float Base, float Blend )
{
	return (Blend == 1.0) ? Blend : min( Base / (1.0 - Blend), 1.0 );
}
float3 ColorDodge( float3 Base, float3 Blend )
{
	return float3( ColorDodge(Base.r, Blend.r), ColorDodge(Base.g, Blend.g), ColorDodge(Base.b, Blend.b) );
}
float3 ColorDodge( float3 Base, float3 Blend, float Opacity )
{
	return ColorDodge( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Pegtop's SoftLight blend formula
float SoftLight( float Base, float Blend )
{
	return ( 1 - 2 * Blend ) * Base * Base + 2 * Base * Blend;
}
float3 SoftLight( float3 Base, float3 Blend )
{
	return float3( SoftLight( Base.r, Blend.r ), SoftLight( Base.g, Blend.g ), SoftLight( Base.b, Blend.b ) );
}
float SoftLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}
float3 SoftLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, SoftLight( Base, Blend ), Opacity );
}

// Hardlight blend mode
float HardLight(float Base, float Blend)
{
	return Blend >= 0.5 ? 1.0 - 2 * ( 1.0 - Blend ) * ( 1.0 - Base ) : 2.0 * Base * Blend;
}
float3 HardLight( float3 Base, float3 Blend )
{
	return float3( HardLight( Base.r, Blend.r ), HardLight( Base.g, Blend.g ), HardLight( Base.b, Blend.b ) );
}
float HardLight( float Base, float Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}
float3 HardLight( float3 Base, float3 Blend, float Opacity )
{
	return lerp( Base, HardLight( Base, Blend ), Opacity );
}

// Simple arithmetic blend modes (See: https://en.wikipedia.org/wiki/Blend_modes#Simple_arithmetic_blend_modes)
// Lighten only blend mode
float3 Add( float3 Base, float3 Blend, float Opacity )
{
	return ( Base + Blend ) * Opacity + Base * ( 1.0 - Opacity );
}
float Lighten( float Base, float Blend )
{
	return max( Base, Blend );
}
float3 Lighten( float3 Base, float3 Blend )
{
	return float3( Lighten(Base.r, Blend.r), Lighten(Base.g, Blend.g), Lighten(Base.b, Blend.b) );
}
float3 Lighten( float3 Base, float3 Blend, float Opacity )
{
	return Lighten( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

// Darken only blend mode
float Darken( float Base, float Blend )
{
	return min( Base, Blend );
}
float3 Darken( float3 Base, float3 Blend )
{
	return float3( Darken(Base.r, Blend.r), Darken(Base.g, Blend.g), Darken(Base.b, Blend.b) );
}
float3 Darken( float3 Base, float3 Blend, float Opacity )
{
	return Darken( Base, Blend ) * Opacity + Base * ( 1.0 - Opacity );
}

float3 Levels( float3 vInColor, float3 vMinInput, float3 vMaxInput )
{
	float3 vRet = saturate( vInColor - vMinInput );
	vRet /= vMaxInput - vMinInput;
	return saturate( vRet );
}
float Levels( float vInValue, float vMinValue, float vMaxValue )
{
	return saturate( ( vInValue - vMinValue ) / ( vMaxValue - vMinValue ) );
}

// Intuitive way to dynamically grow and shrink masks, similar to Histogram Scan in Substance Designer.
// vInValue is typically a mask texture, vPosition is the value to be remapped to 0.5, vRange is the softness of that remap.
float LevelsScan( float vInValue, float vPosition, float vRange )
{
	return Levels( vInValue, vPosition - ( vRange / 2 ), vPosition + ( vRange / 2 ) );
}

float3 UnpackNormal( float4 NormalMapSample )
{
	float3 vNormalSample = NormalMapSample.rgb - 0.5;
	vNormalSample.g = -vNormalSample.g;
	return vNormalSample;
}

float3 UnpackNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackNormal( PdxTex2D( NormalTex, uv ) );
}

float3 UnpackRRxGNormal( float4 NormalMapSample )
{
	float x = NormalMapSample.g * 2.0 - 1.0;
	float y = NormalMapSample.a * 2.0 - 1.0;
	y = -y;
	float z = sqrt( saturate( 1.0 - x * x - y * y ) );
	return float3( x, y, z );
}

float3 UnpackRRxGNormal( in PdxTextureSampler2D NormalTex, float2 uv )
{
	return UnpackRRxGNormal( PdxTex2D( NormalTex, uv ) );
}

float3 ReorientNormal( float3 BaseNormal, float3 DetailNormal )
{
	float3 t = BaseNormal + float3( 0.0, 0.0, 1.0 );
	float3 u = DetailNormal * float3( -1.0, -1.0, 1.0 );
	float3 Normal = normalize( t * dot( t, u ) - u * t.z );
	return Normal;
}

float Fresnel( float NdotL, float FresnelBias, float FresnelPow )
{
	return saturate( FresnelBias + (1.0 - FresnelBias) * pow( 1.0 - NdotL, FresnelPow ) );
}

#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * ( (Value - OldMin) / (OldMax - OldMin) )
float Remap( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 Remap( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 Remap( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
#define REMAP_IMPL NewMin + ( NewMax - NewMin ) * saturate( (Value - OldMin) / (OldMax - OldMin) )
float RemapClamped( float Value, float OldMin, float OldMax, float NewMin, float NewMax ) { return REMAP_IMPL; }
float2 RemapClamped( float2 Value, float2 OldMin, float2 OldMax, float2 NewMin, float2 NewMax ) { return REMAP_IMPL; }
float3 RemapClamped( float3 Value, float3 OldMin, float3 OldMax, float3 NewMin, float3 NewMax ) { return REMAP_IMPL; }
#undef REMAP_IMPL
float CalcViewSpaceDepth( float Depth )
{
	Depth = 2.0 * Depth - 1.0;
	float ZLinear = 2.0 * ZNear * ZFar / (ZFar + ZNear - Depth * (ZFar - ZNear));
	return ZLinear;
}

float3 ViewSpacePosFromDepth( float Depth, float2 UV )
{
	float x = UV.x * 2.0 - 1.0;
	float y = (1.0 - UV.y) * 2.0 - 1.0;
	
	float4 ProjectedPos = float4( x, y, Depth, 1.0 );
	
	float4 ViewSpacePos = mul( InvProjectionMatrix, ProjectedPos );
	
	return ViewSpacePos.xyz / ViewSpacePos.w;
}

float3 WorldSpacePositionFromDepth( float Depth, float2 UV )
{
	float3 WorldSpacePos = mul( InvViewMatrix, float4( ViewSpacePosFromDepth( Depth, UV ), 1.0 ) ).xyz;		
	return WorldSpacePos;  
}
// These macros can be used as drop in replacements for their counterparts without the "Upscale" postfix.
// They will take care of using the correct lod bias when sampling the textures to account for rendering happening in lower resolution. (See https://gsg.pages.build.paradox-interactive.com/tech/cw/develop/clausewitz/pdx_gfx/upscaling/ for more information)
// Note that by default when using upscaling it will add an extra -1 lod bias, this is to try and boost the quality a bit, it works because the temporal anti aliasing component can take care of some of the aliasing artifacts that is introduced by the lod bias.
// This might not always be preferrable, in those cases the "UpscaleBias" postfix versions can be used to undo the extra lod bias, the provided bias should most likely be in the range (0.0, 1.0), for example doing PdxTex2DUpscaleBias( Tex, Uv, 1.0 ) will net you the same texture quality you would get rendering in native resolution.
// There is also a "UpscaleNative" that is basically the same as UpscaleBias with bias 1.0, but slightly more optimized.

#ifdef PDX_UPSCALING_ENABLED
	float2 ApplyUpscaleLodBiasMultiplier( float2 Derivative ) { return Derivative * _UpscaleLodBiasMultiplier; }
	float2 ApplyUpscaleNativeLodBiasMultiplier( float2 Derivative ) { return Derivative * _UpscaleLodBiasMultiplierNative; }
	
	#define PdxTex2DUpscale( TextureSampler, Uv ) PdxTex2DBias( (TextureSampler), (Uv), _UpscaleLodBias )
	#define PdxTex2DUpscaleNative( TextureSampler, Uv ) PdxTex2DBias( (TextureSampler), (Uv), _UpscaleLodBiasNative )
	#define PdxTex2DUpscaleBias( TextureSampler, Uv, Bias ) PdxTex2DBias( (TextureSampler), (Uv), (_UpscaleLodBias + (Bias) * _UpscaleLodBiasEnabled) )
	
	#define PdxTex2DGradUpscale( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleLodBiasMultiplier( Ddx ), ApplyUpscaleLodBiasMultiplier( Ddy ) )
	#define PdxTex2DGradUpscaleNative( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleNativeLodBiasMultiplier( Ddx ), ApplyUpscaleNativeLodBiasMultiplier( Ddy ) )
	#define PdxTex2DGradUpscaleBias( TextureSampler, Uv, Ddx, Ddy, Bias ) PdxTex2DGrad( (TextureSampler), (Uv), ApplyUpscaleLodBiasMultiplier( Ddx ) * exp2( (Bias) * _UpscaleLodBiasEnabled ), ApplyUpscaleLodBiasMultiplier( Ddy ) * exp2( (Bias) * _UpscaleLodBiasEnabled ) )
#else
	float2 ApplyUpscaleLodBiasMultiplier( float2 Derivative ) { return Derivative; }
	float2 ApplyUpscaleNativeLodBiasMultiplier( float2 Derivative ) { return Derivative; }
	
	#define PdxTex2DUpscale( TextureSampler, Uv ) PdxTex2D( (TextureSampler), (Uv) )
	#define PdxTex2DUpscaleNative( TextureSampler, Uv ) PdxTex2D( (TextureSampler), (Uv) )
	// We intentionally discard the Bias argument here since that is used to tweak the upscale added lodbias
	#define PdxTex2DUpscaleBias( TextureSampler, Uv, Bias ) PdxTex2D( (TextureSampler), (Uv) )
	
	#define PdxTex2DGradUpscale( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
	#define PdxTex2DGradUpscaleNative( TextureSampler, Uv, Ddx, Ddy ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
	// We intentionally discard the Bias argument here since that is used to tweak the upscale added lodbias
	#define PdxTex2DGradUpscaleBias( TextureSampler, Uv, Ddx, Ddy, Bias ) PdxTex2DGrad( (TextureSampler), (Uv), Ddx, Ddy )
#endif
float GetLerpedHeight( float2 WorldSpacePosXZ, float2 LodDirection )
{
	float h1 = GetHeight( WorldSpacePosXZ - LodDirection );
	float h2 = GetHeight( WorldSpacePosXZ + LodDirection );

	//h1 = GetHeightMultisample( WorldSpacePosXZ - LodDirection, 0.25 );
	//h2 = GetHeightMultisample( WorldSpacePosXZ + LodDirection, 0.25 );

	return (h1 + h2) * 0.5;
}

float3 CalculateNormal( float2 WorldSpacePosXZ )
{
#ifdef TERRAIN_WRAP_X
	float TerrainSizeX = 1.0 / _WorldSpaceToTerrain0To1.x;

	float HeightMinX = GetHeight01( float2( mod( WorldSpacePosXZ.x + TerrainSizeX - _NormalStepSize.x, TerrainSizeX ), WorldSpacePosXZ.y ) );
	float HeightMaxX = GetHeight01( float2( mod( WorldSpacePosXZ.x + TerrainSizeX + _NormalStepSize.x, TerrainSizeX ), WorldSpacePosXZ.y ) );
#else
	float HeightMinX = GetHeight01( WorldSpacePosXZ + float2(-_NormalStepSize.x, 0) );
	float HeightMaxX = GetHeight01( WorldSpacePosXZ + float2(_NormalStepSize.x, 0) );
#endif
	float HeightMinZ = GetHeight01( WorldSpacePosXZ + float2(0, -_NormalStepSize.y) );
	float HeightMaxZ = GetHeight01( WorldSpacePosXZ + float2(0, _NormalStepSize.y) );

	//float2 LookupCoordinates = GetLookupCoordinates( WorldSpacePosXZ );
	//float2 NormalStepSizeInLookup = NormalStepSize * WorldSpaceToLookup * IndirectionSize;
	//
	//float2 FracCoordinates = frac( LookupCoordinates * IndirectionSize );
	//float2 MinFracCoordinatesScaled = min( FracCoordinates, vec2(1.0) - FracCoordinates );
	//bool2 InBorder = lessThan( MinFracCoordinatesScaled, NormalStepSizeInLookup );
    //
	//float HeightMinX = 0.0;
	//float HeightMaxX = 0.0;
	//float HeightMinZ = 0.0;
	//float HeightMaxZ = 0.0;
	//if ( any( InBorder ) )
	//{
	//	HeightMinX = GetHeight01( WorldSpacePosXZ + float2(-NormalStepSize.x, 0) );
	//	HeightMaxX = GetHeight01( WorldSpacePosXZ + float2(NormalStepSize.x, 0) );
	//	HeightMinZ = GetHeight01( WorldSpacePosXZ + float2(0, -NormalStepSize.y) );
	//	HeightMaxZ = GetHeight01( WorldSpacePosXZ + float2(0, NormalStepSize.y) );
	//}
	//else
	//{
	//	float4 IndirectionSample = SampleLookupTexture( LookupCoordinates );
	//
	//	float4 CurrentTileToHeightMapScaleAndOffset = TileToHeightMapScaleAndOffset[int(IndirectionSample.w)];
	//	float CurrentTileScale;
	//	float2 TileUV = GetTileUV( LookupCoordinates, IndirectionSample, CurrentTileScale );
	//
	//	float2 HeightMapCoord = TileUV * CurrentTileToHeightMapScaleAndOffset.xy + CurrentTileToHeightMapScaleAndOffset.zw; // 0 -> 1 in packed heightmap
	//	float2 NormalStepSizeInTile = NormalStepSizeInLookup * CurrentTileToHeightMapScaleAndOffset.xy * CurrentTileScale;
	//
	//	HeightMinX = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(-NormalStepSizeInTile.x, 0) );
	//	HeightMaxX = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(NormalStepSizeInTile.x, 0) );
	//	HeightMinZ = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(0, -NormalStepSizeInTile.y) );
	//	HeightMaxZ = PdxTex2DLod0( PackedHeightTexture, HeightMapCoord + float2(0, NormalStepSizeInTile.y) );
	//}

	float3 Normal = float3( HeightMinX - HeightMaxX, 2.0, HeightMinZ - HeightMaxZ ) * _NormalScale;
	return normalize(Normal);
}

// Rotates normals to the heightmap terrain normal
float3 SimpleRotateNormalToTerrain( float3 Normal, float2 WorldSpacePosXZ )
{
	float3 TerrainNormal = CalculateNormal( WorldSpacePosXZ );
	float3 Up = float3( 0.0, 1.0, 0.0 );

	float3 Axis = cross( Up, TerrainNormal );
	float Angle = acos( dot( Up, TerrainNormal ) ) * abs( Normal.y );

	return lerp( dot( Axis, Normal ) * Axis, Normal, cos( Angle ) ) + cross( Axis, Normal ) * sin( Angle );
}

// For debugging
float GetTextureBorder( float2 UV, float2 TextureSize, float BorderSize )
{
	float2 FracScaledUV = frac( UV * TextureSize );
	if ( FracScaledUV.x < BorderSize || FracScaledUV.x > (1.0 - BorderSize) || FracScaledUV.y < BorderSize || FracScaledUV.y > (1.0 - BorderSize) )
	{
		return 1.0;
	}
	else
	{
		return 0.0;
	}
}

float GetModValue( float value, float vMod )
{
	return mod(round(value), vMod) * (1.0 / (vMod - 1.0));
}

float GetModValueFloor( float value, float vMod )
{
	return mod(floor(value), vMod) * (1.0 / (vMod - 1.0));
}

float GetMod2Value( float value )
{
	if ( abs( mod( round(value), 2.0 ) - 1.0 ) < 0.01 )
	{
		return 1.0;
	}
	else
	{
		return 0.0;
	}
}
float CalcRandom( float Seed )
{
	float DotProduct = float( Seed ) * 12.9898;
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcRandom( float2 Seed )
{
	float DotProduct = dot( Seed, float2( 12.9898, 78.233 ) );
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcRandom( float3 Seed )
{
	float DotProduct = dot( Seed, float3( 12.9898,78.233,144.7272 ) );
	return frac( sin( DotProduct ) * 43758.5453 );
}

float CalcNoise( float2 Pos ) 
{
	int2 i = int2( floor( Pos ) );
	float2 f = frac( Pos );

	float a = CalcRandom( i );
	float b = CalcRandom( i + int2( 1, 0 ) );
	float c = CalcRandom( i + int2( 0, 1 ) );
	float d = CalcRandom( i + int2( 1, 1 ) );
	
	float2 u = f*f*(3.0-2.0*f);
	return lerp(a, b, u.x) + 
			(c - a)* u.y * (1.0 - u.x) + 
			(d - b) * u.x * u.y;
}
float2 RotateDisc( float2 Disc, float2 Rotate )
{
	return float2( Disc.x * Rotate.x - Disc.y * Rotate.y, Disc.x * Rotate.y + Disc.y * Rotate.x );
}

float CalculateShadow( float4 ShadowProj, PdxTextureSampler2DCmp ShadowMap )
{
	ShadowProj.xyz = ShadowProj.xyz / ShadowProj.w;
	
	float RandomAngle = CalcRandom( round( ShadowScreenSpaceScale * ShadowProj.xy ) ) * 3.14159 * 2.0;
	float2 Rotate = float2( cos( RandomAngle ), sin( RandomAngle ) );

	// Sample each of them checking whether the pixel under test is shadowed or not
	float ShadowTerm = 0.0;
	for( int i = 0; i < NumSamples; i++ )
	{
		float4 Samples = DiscSamples[i] * KernelScale;
		ShadowTerm += PdxTex2DCmpLod0( ShadowMap, ShadowProj.xy + RotateDisc( Samples.xy, Rotate ), ShadowProj.z - Bias );
		ShadowTerm += PdxTex2DCmpLod0( ShadowMap, ShadowProj.xy + RotateDisc( Samples.zw, Rotate ), ShadowProj.z - Bias );
	}
	
	// Get the average
	ShadowTerm *= 0.5; // We have 2 samples per "sample"
	ShadowTerm = ShadowTerm / float(NumSamples);
	
	float3 FadeFactor = saturate( float3( 1.0 - abs( 0.5 - ShadowProj.xy ) * 2.0, 1.0 - ShadowProj.z ) * 32.0 ); // 32 is just a random strength on the fade
	ShadowTerm = lerp( 1.0, ShadowTerm, min( min( FadeFactor.x, FadeFactor.y ), FadeFactor.z ) );
	
	return lerp( 1.0, ShadowTerm, ShadowFadeFactor );
}
static const float TWO_PI = 6.28318530718f;

static const float SHADOW_AMBIENT_MIN_FACTOR = 0.0;
static const float SHADOW_AMBIENT_MAX_FACTOR = 0.3;
float4 AlphaBlendAOverB( float4 A, float4 B )
{
	float Alpha = A.a + B.a * ( 1.0f - A.a );
	float3 Color = A.rgb * A.a + B.rgb * B.a * ( 1.0f - A.a );
	Color /= clamp( Alpha, 0.01f, 1.0f );
	return float4( Color, Alpha );
}

// Vertical Rays
float RayValue( in float2 coord, in float frequency, in float travelRate, in float maxStrength )
{
	float ny = 2.0f * ( coord.y - 0.5f );
	float ny2 = min( 1.0f, 2.5f - 2.5f * ny * ny );

	float xModifier = 1.0f * ( cos( GlobalTime * travelRate + coord.x * frequency ) - 0.5f );
	float yModifier = sin( coord.y );
	return maxStrength * xModifier * yModifier * ny2;
}

float Hash1_2( in float2 x )
{
	return frac( sin( dot( x, float2( 52.127f, 61.2871f) ) ) * 521.582f );
}

float2 Hash2_2( in float2 x )
{
	return frac( sin( mul( Create2x2( 20.52f, 24.1994f, 70.291f, 80.171f ),  x ) * 492.194 ) );
}

float2 Noise2_2( float2 uv )
{
	float2 f = smoothstep( 0.0f, 1.0f, frac( uv ) );

	float2 uv00 = floor( uv );
	float2 uv01 = uv00 + float2( 0, 1 );
	float2 uv10 = uv00 + float2( 1, 0 );
	float2 uv11 = uv00 + 1.0f;
	float2 v00 = Hash2_2( uv00 );
	float2 v01 = Hash2_2( uv01 );
	float2 v10 = Hash2_2( uv10 );
	float2 v11 = Hash2_2( uv11 );

	float2 v0 = lerp( v00, v01, f.y );
	float2 v1 = lerp ( v10, v11, f.y );
	float2 v = lerp( v0, v1, f.x );

	return v;
}

// Rotates point around 0,0
float2 Rotate( in float2 p, in float deg )
{
	float s = sin( deg );
	float c = cos( deg );
	p = mul( Create2x2( s, c, -c, s ), p );
	return p;
}

float CalculateStripeMask( float2 UV, float Offset, float Width )
{
	// Diagonal
	float t = 3.14159 / ( 8.0 );
	float w = 3000 * Width;			  // larger value gives smaller width

	float StripeMask = cos( ( UV.x * cos( t ) * w ) + ( UV.y * sin( t ) * w ) + Offset );
	StripeMask = smoothstep( 0.0, 1.0, StripeMask * 2.2f );
	return StripeMask;
}

float GameCalculateDistanceFogFactor( float3 WorldSpacePos )
{
	// Offset towards camera look direction
	float Scalar = CameraPosition.y / -CameraLookAtDir.y;
	float3 IntersectionPoint = CameraPosition + Scalar * CameraLookAtDir;
	float3 FogOffset = CameraLookAtDir * ( _FogCloseOffset + _FogFarOffset * saturate( smoothstep(0.0f, 600.0f, CameraPosition.y ) ) );
	FogOffset.y = 0.0f;	// Don't offset height

	// Rotate and scale with view
	float ScalingX = _FogWidthScale;
	float ScalingY = 1.0f + 1.0f * ( 1.0f + CameraLookAtDir.y );
	float2 secondaryPrincipal = float2( CameraRightDir.z, -CameraRightDir.x );
	float3 Diff = ( IntersectionPoint + FogOffset ) - WorldSpacePos;
	Diff.xz = float2( dot( Diff.xz, CameraRightDir.xz ) * ( 1.0 / ScalingX ), dot( Diff.xz, secondaryPrincipal ) * ( 1.0 / ScalingY ) );

	// Fog factor (amount)
	float vFogFactor = 1.0 - abs( normalize( Diff ).y ); // abs b/c of reflections
	float vSqDistance = dot( Diff, Diff );
	float vMin = ( vSqDistance - FogBegin2 ) / ( FogEnd2 - FogBegin2 );
	return saturate( vMin * vFogFactor * FogMax );
}

float3 GameApplyDistanceFog( float3 Color, float3 WorldSpacePos )
{
	float factor = GameCalculateDistanceFogFactor( WorldSpacePos ) ;
	return lerp( Color, HardLight( Color, FogColor ), factor );
}
float GameApplyDistanceFog( float Value, float3 WorldSpacePos )
{
	float factor = GameCalculateDistanceFogFactor( WorldSpacePos ) ;

	float FogValue_ = ( FogColor.x + FogColor.y + FogColor.z ) / 3;
	FogValue_ = HardLight( Value, FogValue_ );

	return lerp( Value, FogValue_, factor );
}
// Sine wave, remapped to 0-1
float Sin01( float Angle )
{
	return ( sin( Angle ) * 0.5 ) + 0.5;
}

// Cubic bezier 	// Reference: https://www.tinaja.com/text/bezmath.html
float SlopeFromT (float T, float A, float B, float C)
{
	return 1.0 / ( 3.0 * A * T * T + 2.0 * B * T + C ); 
}
float XFromT ( float T, float A, float B, float C, float D )
{
	return A * ( T * T * T ) + B * ( T * T ) + C * T + D;
}
float YFromT ( float T, float E, float F, float G, float H )
{
	return E * ( T * T * T ) + F * ( T * T ) + G * T + H;
}
float CubicBezier( float Value, float2 Point1, float2 Point2 )
{
	float y0 = 0.0;
	float x0 = 0.0;
	float y1 = Point1.y;
	float x1 = Point1.x;
	float y2 = Point2.y;
	float x2 = Point2.x;
	float y3 = 1.0;
	float x3 = 1.0;

	float A = x3 - 3.0 * x2 + 3.0 * x1 - x0;
	float B = 3.0 * x2 - 6.0 * x1 + 3.0 * x0;
	float C = 3.0 * x1 - 3.0 * x0;
	float D = x0;

	float E = y3 - 3.0 * y2 + 3.0 * y1 - y0;
	float F = 3.0 * y2 - 6.0 * y1 + 3.0 * y0;
	float G = 3.0 * y1 - 3.0 * y0;
	float H = y0;

	float CurrentT = Value;
	for (int i = 0; i < 5; i++ )
	{
		float CurrentX = XFromT( CurrentT, A, B, C , D ); 
		float CurrentSlope = SlopeFromT ( CurrentT, A, B, C );
		CurrentT -= ( CurrentX - Value ) * ( CurrentSlope );
		CurrentT = clamp( CurrentT, 0.0, 1.0 ); 
	} 

	float y = YFromT ( CurrentT, E, F, G, H );
	return y;
}
// WATER CANAL //
#define WATER_CANAL_DEPTH_MAX 0.35
#define WATER_CANAL_DEPTH_AMP 70.0

// DEVASTATION //
// Water
#define WATER_DEVASTATION_COLOR float3( 0.18, 0.125, 0.09 )
#define WATER_DEVASTATION_MULT 1.5
#define SHORE_DEVASTATION_COLOR float3( 0.172, 0.13, 0.11 )
#define SHORE_DEVASTATION_MULT 1.25

// Road
#define ROAD_DEVASTATION_COLOR float3( 0.172, 0.13, 0.11 )
#define ROAD_DEVASTATION_MULT 1.6
#define ROAD_DEVASTATION_MAX 0.66

// Building
#define BUILDING_DEVASTATION_MULT 2.0
#define BUILDING_DEVASTATION_UV_SCALE 30
#define BUILDING_DEVASTATION_HEIGHT_MIN 0.0
#define BUILDING_DEVASTATION_HEIGHT_MAX 1.2

// Decal
#define DECAL_DEVASTATION_COLOR float3( 0.172, 0.13, 0.11 )
#define DECAL_DEVASTATION_MULT 2.0

// OCCUPATION HIGHLIGHT
#define OCCUPATION_HIGHLIGHT_STRENGTH 3.0
#define OCCUPATION_HIGHLIGHT_ALPHA 0.9
#define OCCUPATION_HIGHLIGHT_COLOR_MULT 1.0
#define OCCUPATION_HIGHLIGHT_POSITION 0.0
#define OCCUPATION_HIGHLIGHT_CONTRAST 0.1

// MAPMODE TEXTURE
#define MAPMODE_UV_ROW_OFFSET 0
#define MAPMODE_UV_ROW_COUNT 0

// TREE SWAY MULTIPLIERS
// Bush Tree
#define BUSH_TREE_HEIGHT_IMPACT 2.0
#define BUSH_TREE_SWAY_SCALE 1.5

// Medium Tree
#define MEDIUM_TREE_SWAY_SPEED 1.3
#define MEDIUM_TREE_HEIGHT_IMPACT 3.0
#define MEDIUM_TREE_SWAY_SCALE 0.75

// Large Tree
#define TALL_TREE_SWAY_SPEED 2.0
#define TALL_TREE_HEIGHT_IMPACT 1.0
#define TALL_TREE_SWAY_SCALE 1.0

float4 CalcHeightBlendFactors( float4 MaterialHeights, float4 MaterialFactors, float BlendRange )
{
	float4 Mat = MaterialHeights + MaterialFactors;
	float BlendStart = max( max( Mat.x, Mat.y ), max( Mat.z, Mat.w ) ) - BlendRange;

	float4 MatBlend = max( Mat - vec4( BlendStart ), vec4( 0.0 ) );

	float Epsilon = 0.00001;
	return float4( MatBlend ) / ( dot( MatBlend, vec4( 1.0 ) ) + Epsilon );
}

float2 CalcDetailUV( float2 WorldSpacePosXZ )
{
	return WorldSpacePosXZ * _DetailTileFactor;
}

void CalculateDetails( float2 WorldSpacePosXZ, out float4 DetailDiffuseHeight, out float3 DetailNormal, out float4 DetailMaterial )
{
	float2 DetailCoordinates = WorldSpacePosXZ * _WorldSpaceToDetail;
	float2 DetailCoordinatesScaled = DetailCoordinates * _DetailTextureSize;
	float2 DetailCoordinatesScaledFloored = floor( DetailCoordinatesScaled );
	float2 DetailCoordinatesFrac = DetailCoordinatesScaled - DetailCoordinatesScaledFloored;
	DetailCoordinates = DetailCoordinatesScaledFloored * _DetailTexelSize + _DetailTexelSize * 0.5;

	float4 Factors = float4(
		(1.0 - DetailCoordinatesFrac.x) * (1.0 - DetailCoordinatesFrac.y),
		DetailCoordinatesFrac.x * (1.0 - DetailCoordinatesFrac.y),
		(1.0 - DetailCoordinatesFrac.x) * DetailCoordinatesFrac.y,
		DetailCoordinatesFrac.x * DetailCoordinatesFrac.y
	);

	float4 DetailIndex = PdxTex2D( DetailIndexTexture, DetailCoordinates ) * 255.0;
	float4 DetailMask = PdxTex2D( DetailMaskTexture, DetailCoordinates ) * Factors[0];

	float2 Offsets[3];
	Offsets[0] = float2( _DetailTexelSize.x, 0.0 );
	Offsets[1] = float2( 0.0, _DetailTexelSize.y );
	Offsets[2] = float2( _DetailTexelSize.x, _DetailTexelSize.y );

	for ( int k = 0; k < 3; ++k )
	{
		float2 DetailCoordinates2 = DetailCoordinates + Offsets[k];

		float4 DetailIndices = PdxTex2DLod0( DetailIndexTexture, DetailCoordinates2 ) * 255.0;
		float4 DetailMasks = PdxTex2DLod0( DetailMaskTexture, DetailCoordinates2 ) * Factors[k+1];

		for ( int i = 0; i < 4; ++i )
		{
			for ( int j = 0; j < 4; ++j )
			{
				if ( DetailIndex[j] == DetailIndices[i] )
				{
					DetailMask[j] += DetailMasks[i];
				}
			}
		}
	}

	float2 DetailUV = CalcDetailUV( WorldSpacePosXZ );
	
	float2 DDX = ApplyUpscaleLodBiasMultiplier( ddx(DetailUV) );
	float2 DDY = ApplyUpscaleLodBiasMultiplier( ddy(DetailUV) );

	float4 DetailTexture0 = PdxTex2DGrad( DetailTextures, float3( DetailUV, DetailIndex[0] ), DDX, DDY ) * smoothstep( 0.0, 0.1, DetailMask[0] );
	float4 DetailTexture1 = PdxTex2DGrad( DetailTextures, float3( DetailUV, DetailIndex[1] ), DDX, DDY ) * smoothstep( 0.0, 0.1, DetailMask[1] );
	float4 DetailTexture2 = PdxTex2DGrad( DetailTextures, float3( DetailUV, DetailIndex[2] ), DDX, DDY ) * smoothstep( 0.0, 0.1, DetailMask[2] );
	float4 DetailTexture3 = PdxTex2DGrad( DetailTextures, float3( DetailUV, DetailIndex[3] ), DDX, DDY ) * smoothstep( 0.0, 0.1, DetailMask[3] );

	float4 BlendFactors = CalcHeightBlendFactors( float4( DetailTexture0.a, DetailTexture1.a, DetailTexture2.a, DetailTexture3.a ), DetailMask, _DetailBlendRange );
	//BlendFactors = DetailMask;

	DetailDiffuseHeight = DetailTexture0 * BlendFactors.x +
					DetailTexture1 * BlendFactors.y +
					DetailTexture2 * BlendFactors.z +
					DetailTexture3 * BlendFactors.w;

	DetailMaterial = vec4( 0.0 );
	float4 DetailNormalSample = vec4( 0.0 );

	for ( int i = 0; i < 4; ++i )
	{
		float BlendFactor = BlendFactors[i];
		if ( BlendFactor > 0.0 )
		{
			float3 ArrayUV = float3( DetailUV, DetailIndex[i] );
			float4 NormalTexture = PdxTex2DGrad( NormalTextures, ArrayUV, DDX, DDY );
			float4 MaterialTexture = PdxTex2DGrad( MaterialTextures, ArrayUV, DDX, DDY );

			DetailNormalSample += NormalTexture * BlendFactor;
			DetailMaterial += MaterialTexture * BlendFactor;
		}
	}

	DetailNormal = UnpackRRxGNormal( DetailNormalSample ).xyz;
}

//-------------------------------
// Debugging --------------------
//-------------------------------
float3 GetNumMaterials( float4 Index )
{
	int nNumMaterials = 0;
	for ( int i = 0; i < 4; ++i )
	{
		if ( Index[i] < 1.0 )
		{
			nNumMaterials++;
		}
	}

	if ( nNumMaterials == 1 )
		return float3( 1, 0, 0 );
	else if ( nNumMaterials == 2 )
		return float3( 0, 1, 0 );
	else if ( nNumMaterials == 3 )
		return float3( 0, 0, 1 );
	else if ( nNumMaterials == 4 )
		return float3( 1, 1, 0 );

	return float3( 0, 0, 0 );
}


//#define TERRAIN_DEBUG
//#define TERRAIN_DEBUG_WIREFRAME
//#define TERRAIN_DEBUG_HEIGHT
//#define TERRAIN_DEBUG_LOOKUP_BORDER
//#define TERRAIN_DEBUG_HEIGHTMAP_BORDER
//#define TERRAIN_DEBUG_NORMAL
//#define TERRAIN_DEBUG_NUM_MATERIALS
//#define TERRAIN_DEBUG_DETAIL_BORDER
//#define TERRAIN_DEBUG_DETAIL_MASK
//#define TERRAIN_DEBUG_DETAIL_INDEX
void TerrainDebug( inout float3 Color, float3 WorldSpacePos )
{
#ifdef TERRAIN_DEBUG
	float3 Result = float3(0,0,0);

	float2 LookupCoordinates = GetLookupCoordinates( WorldSpacePos.xz );
#ifdef TERRAIN_DEBUG_WIREFRAME
	float3 Wireframe = vec3( GetTextureBorder( LookupCoordinates, IndirectionSize * (BaseTileSize - 1), 0.02 ) );
	Result += Wireframe;
#endif

#ifdef TERRAIN_DEBUG_HEIGHT
	Result += float3( GetHeight01( WorldSpacePos.xz ), 0, 0 );
#endif

#ifdef TERRAIN_DEBUG_LOOKUP_BORDER
	float3 LookupBorder = float3( 0.0, 0.0, GetTextureBorder( LookupCoordinates, IndirectionSize, 0.0006 ) );
	Result += LookupBorder;
#endif
#ifdef TERRAIN_DEBUG_HEIGHTMAP_BORDER
	float2 HeightMapCoord = GetHeightMapCoordinates( WorldSpacePos.xz );
	float3 HeightMapBorder = float3( GetTextureBorder( HeightMapCoord, PackedHeightMapSize, 0.02 ), 0.0, 0.0 );
	Result += HeightMapBorder;
#endif

#ifdef TERRAIN_DEBUG_NORMAL
	Result = saturate( CalculateNormal( WorldSpacePos.xz ) );
#endif

	float2 DetailCoordinates = WorldSpacePos.xz * _WorldSpaceToDetail + _DetailTexelSize * 0.5;
	float4 DetailMask = PdxTex2D( DetailMaskTexture, DetailCoordinates );
	float4 DetailIndex = PdxTex2D( DetailIndexTexture, DetailCoordinates );
#ifdef TERRAIN_DEBUG_NUM_MATERIALS
	Result = GetNumMaterials( DetailIndex );
#endif
#ifdef TERRAIN_DEBUG_DETAIL_BORDER
	float3 IndexBorder = float3( 0.0, 0.0, GetTextureBorder( DetailCoordinates, _DetailTextureSize, 0.05 ) );
	Result += IndexBorder; // * GetModValueFloor( DetailCoordinates.y * (_DetailTextureSize.y), 4 );
#endif
#ifdef TERRAIN_DEBUG_DETAIL_MASK
	DetailMask /= dot( DetailMask, vec4( 1.0 ) );
	Result += DetailMask.rgb;
#endif

#ifdef TERRAIN_DEBUG_DETAIL_INDEX
	Result += DetailIndex.rgb;
#endif

	Color = Result;
#endif
}

float CalcLightFalloff( float LightRadius, float Distance, float Falloff )
{
	// TODO other, square, falloff?
	return saturate( (LightRadius - Distance) / Falloff );
}

float CalcLightFalloff( float LightRadius, float Distance )
{
	// This is basically the unreal method, square distance falloff but capped at "LightRadius" distance and capped at intensity 1 at distance 0.
	return pow( saturate( 1.0 - pow( Distance / LightRadius, 4.0 ) ), 2.0 ) / ( Distance * Distance + 1.0 );
}


float3 MetalnessToDiffuse( float Metalness, float3 Diffuse )
{
	return lerp( Diffuse, vec3(0.0), Metalness );
}

float3 MetalnessToSpec( float Metalness, float3 Diffuse, float Spec )
{
	return lerp( vec3(Spec), Diffuse, Metalness );
}


#ifndef PDX_NumMips
	#define PDX_NumMips 10.0
#endif

#ifndef PDX_MipOffset
	#define PDX_MipOffset 2.0
#endif

#define PDX_SimpleLighting


struct SMaterialProperties
{
	float 	_PerceptualRoughness;
	float 	_Roughness;
	float	_Metalness;
	
	float3	_DiffuseColor;
	float3	_SpecularColor;
	float3	_Normal;
};

struct SLightingProperties
{
	float3		_ToCameraDir;
	float3		_ToLightDir;
	float3		_LightIntensity;
	float		_ShadowTerm;
	float		_CubemapIntensity;
	// this rotation matrix is used to rotate cubemap sampling vectors, thus "faking" a rotation of the cubemap
	float4x4	_CubemapYRotation;
};

float RemapSpec( float SampledSpec )
{
	return 0.25 * SampledSpec;
}
	
float RoughnessFromPerceptualRoughness( float PerceptualRoughness )
{
	return PerceptualRoughness * PerceptualRoughness;
}

float BurleyToMipSimple( float PerceptualRoughness )
{
   float Scale = PerceptualRoughness * (1.7 - 0.7 * PerceptualRoughness);
   return Scale * ( PDX_NumMips - 1 - PDX_MipOffset );
}

float3 GetSpecularDominantDir( float3 Normal, float3 Reflection, float Roughness )
{
	float Smoothness = saturate( 1.0 - Roughness );
	float LerpFactor = Smoothness * ( sqrt( Smoothness ) + Roughness );
	return normalize( lerp( Normal, Reflection, LerpFactor ) );
}

float GetReductionInMicrofacets( float Roughness )
{
	return 1.0 / (Roughness*Roughness + 1.0);
}

float F_Schlick( float f0, float f90, float CosAngle )
{
	return f0 + ( f90 - f0 ) * pow( 1.0 - CosAngle, 5.0 );
}

float3 F_Schlick( float3 f0, float3 f90, float CosAngle )
{
	return f0 + ( f90 - f0 ) * pow( 1.0 - CosAngle, 5.0 );
}
        

float DisneyDiffuse( float NdotV, float NdotL, float LdotH, float LinearRoughness )
{
	float EnergyBias = lerp( 0.0, 0.5, LinearRoughness );
	float EnergyFactor = lerp( 1.0, 1.0 / 1.51, LinearRoughness );
	float f90 = EnergyBias + 2.0 * LdotH * LdotH * LinearRoughness;
	float LightScatter = F_Schlick( 1.0, f90, NdotL );
	float ViewScatter = F_Schlick( 1.0, f90, NdotV );
	
	return LightScatter * ViewScatter * EnergyFactor;
}

float CalcDiffuseBRDF( float NdotV, float NdotL, float LdotH, float PerceptualRoughness )
{
#ifdef PDX_SimpleLighting
	return 1.0 / PI;
#else
	return DisneyDiffuse( NdotV, NdotL, LdotH, PerceptualRoughness ) / PI;
#endif
}


float D_GGX( float NdotH, float Alpha )
{
	float Alpha2 = Alpha * Alpha;
	float f = ( NdotH * Alpha2 - NdotH ) * NdotH + 1.0;
	return Alpha2 / (PI * f * f);
}

float G1( float CosAngle, float k )
{
	return 1.0 / ( CosAngle * ( 1.0 - k ) + k );
}

float V_Schlick( float NdotL, float NdotV, float Alpha )
{
	float k = Alpha * 0.5;
	return G1( NdotL, k ) * G1( NdotV, k ) * 0.25;
}

float V_Optimized( float LdotH, float Alpha )
{
	float k = Alpha * 0.5;
	float k2 = k*k;
	float invk2 = 1.0 - k2;
	return 0.25 / ( LdotH * LdotH * invk2 + k2 );
}
        
float3 CalcSpecularBRDF( float3 SpecularColor, float LdotH, float NdotH, float NdotL, float NdotV, float Roughness )
{
	float3 F = F_Schlick( SpecularColor, vec3(1.0), LdotH );
	float D = D_GGX( NdotH, lerp( 0.03, 1.0, Roughness ) ); // Remap to avoid super small and super bright highlights
#ifdef PDX_SimpleLighting
	float Vis = V_Optimized( LdotH, Roughness );
#else
	float Vis = V_Schlick( NdotL, NdotV, Roughness );
#endif
	return D * F * Vis;
}

void CalculateLightingFromLight( SMaterialProperties MaterialProps, float3 ToCameraDir, float3 ToLightDir, float3 LightIntensity, out float3 DiffuseOut, out float3 SpecularOut )
{
	float3 H = normalize( ToCameraDir + ToLightDir );
	float NdotV = saturate( dot( MaterialProps._Normal, ToCameraDir ) ) + 1e-5;
	float NdotL = saturate( dot( MaterialProps._Normal, ToLightDir ) ) + 1e-5;
	float NdotH = saturate( dot( MaterialProps._Normal, H ) );
	float LdotH = saturate( dot( ToLightDir, H ) );
	
	float DiffuseBRDF = CalcDiffuseBRDF( NdotV, NdotL, LdotH, MaterialProps._PerceptualRoughness );
	DiffuseOut = DiffuseBRDF * MaterialProps._DiffuseColor * LightIntensity * NdotL;
	
#ifdef PDX_HACK_ToSpecularLightDir
	float3 H_Spec = normalize( ToCameraDir + PDX_HACK_ToSpecularLightDir );
	float NdotL_Spec = saturate( dot( MaterialProps._Normal, PDX_HACK_ToSpecularLightDir ) ) + 1e-5;
	float NdotH_Spec = saturate( dot( MaterialProps._Normal, H_Spec ) );
	float LdotH_Spec = saturate( dot( PDX_HACK_ToSpecularLightDir, H_Spec ) );
	float3 SpecularBRDF = CalcSpecularBRDF( MaterialProps._SpecularColor, LdotH_Spec, NdotH_Spec, NdotL_Spec, NdotV, MaterialProps._Roughness );
	SpecularOut = SpecularBRDF * LightIntensity * NdotL;
#else
	float3 SpecularBRDF = CalcSpecularBRDF( MaterialProps._SpecularColor, LdotH, NdotH, NdotL, NdotV, MaterialProps._Roughness );
	SpecularOut = SpecularBRDF * LightIntensity * NdotL;
#endif
}

void CalculateLightingFromLight( SMaterialProperties MaterialProps, SLightingProperties LightingProps, out float3 DiffuseOut, out float3 SpecularOut )
{
	CalculateLightingFromLight( MaterialProps, LightingProps._ToCameraDir, LightingProps._ToLightDir, LightingProps._LightIntensity * LightingProps._ShadowTerm, DiffuseOut, SpecularOut );
}

void CalculateLightingFromIBL( SMaterialProperties MaterialProps, SLightingProperties LightingProps, PdxTextureSamplerCube EnvironmentMap, out float3 DiffuseIBLOut, out float3 SpecularIBLOut )
{
	float3 RotatedDiffuseCubemapUV = mul( CastTo3x3( LightingProps._CubemapYRotation ), MaterialProps._Normal );
	float3 DiffuseRad = PdxTexCubeLod( EnvironmentMap, RotatedDiffuseCubemapUV, ( PDX_NumMips - 1 - PDX_MipOffset ) ).rgb * LightingProps._CubemapIntensity; // TODO, maybe we should split diffuse and spec intensity?
	DiffuseIBLOut = DiffuseRad * MaterialProps._DiffuseColor;
	
	float3 ReflectionVector = reflect( -LightingProps._ToCameraDir, MaterialProps._Normal );
	float3 DominantReflectionVector = GetSpecularDominantDir( MaterialProps._Normal, ReflectionVector, MaterialProps._Roughness );

	float NdotR = saturate( dot( MaterialProps._Normal, DominantReflectionVector ) );
	float3 SpecularReflection = F_Schlick( MaterialProps._SpecularColor, vec3(1.0), NdotR );
	float SpecularFade = GetReductionInMicrofacets( MaterialProps._Roughness );

	float MipLevel = BurleyToMipSimple( MaterialProps._PerceptualRoughness );
	float3 RotatedSpecularCubemapUV = mul( CastTo3x3( LightingProps._CubemapYRotation ), DominantReflectionVector );
	float3 SpecularRad = PdxTexCubeLod( EnvironmentMap, RotatedSpecularCubemapUV, MipLevel ).rgb * LightingProps._CubemapIntensity; // TODO, maybe we should split diffuse and spec intensity?
	SpecularIBLOut = SpecularRad * SpecularFade * SpecularReflection;
}

float4x4 Float4x4Identity()
{
	return float4x4( 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0 );
}

SMaterialProperties GetMaterialProperties( float3 SampledDiffuse, float3 Normal, float SampledRoughness, float SampledSpec, float SampledMetalness )
{
	SMaterialProperties MaterialProps;
	
	MaterialProps._PerceptualRoughness = SampledRoughness;
	MaterialProps._Roughness = RoughnessFromPerceptualRoughness( MaterialProps._PerceptualRoughness );

	float SpecRemapped = RemapSpec( SampledSpec );
	MaterialProps._Metalness = SampledMetalness;

	MaterialProps._DiffuseColor = MetalnessToDiffuse( MaterialProps._Metalness, SampledDiffuse );
	MaterialProps._SpecularColor = MetalnessToSpec( MaterialProps._Metalness, SampledDiffuse, SpecRemapped );
	
	MaterialProps._Normal = Normal;
	
	return MaterialProps;
}

//-------------------------------
// Common lighting functions ----
//-------------------------------
SLightingProperties GetSunLightingProperties( float3 WorldSpacePos, float ShadowTerm )
{
	SLightingProperties LightingProps;
	LightingProps._ToCameraDir = normalize( CameraPosition - WorldSpacePos );
	LightingProps._ToLightDir = ToSunDir;
	LightingProps._LightIntensity = SunDiffuse * SunIntensity;
	LightingProps._ShadowTerm = ShadowTerm;
	LightingProps._CubemapIntensity = CubemapIntensity;
	LightingProps._CubemapYRotation = CubemapYRotation;
	
	return LightingProps;
}

SLightingProperties GetSunLightingProperties( float3 WorldSpacePos, PdxTextureSampler2DCmp ShadowMap )
{
	float4 ShadowProj = mul( ShadowMapTextureMatrix, float4( WorldSpacePos, 1.0 ) );
	float ShadowTerm = CalculateShadow( ShadowProj, ShadowMap );
	
	return GetSunLightingProperties( WorldSpacePos, ShadowTerm );
}

float3 CalculateSunLighting( SMaterialProperties MaterialProps, SLightingProperties LightingProps, PdxTextureSamplerCube EnvironmentMap )
{
	float3 DiffuseLight;
	float3 SpecularLight;
	CalculateLightingFromLight( MaterialProps, LightingProps, DiffuseLight, SpecularLight );
	
	float3 DiffuseIBL;
	float3 SpecularIBL;
	CalculateLightingFromIBL( MaterialProps, LightingProps, EnvironmentMap, DiffuseIBL, SpecularIBL );
	
	return DiffuseLight + SpecularLight + DiffuseIBL + SpecularIBL;
}


//-------------------------------
// Debugging --------------------
//-------------------------------
//#define PDX_DEBUG_NORMAL
//#define PDX_DEBUG_DIFFUSE
//#define PDX_DEBUG_SPEC
//#define PDX_DEBUG_SPEC_RANGES
//#define PDX_DEBUG_ROUGHNESS
//#define PDX_DEBUG_METALNESS
//#define PDX_DEBUG_SHADOW
//#define PDX_DEBUG_SUN_LIGHT_SIMPLE_DIFFUSE // AKA Daniel mode
//#define PDX_DEBUG_SUN_LIGHT_ONLY_SPECULAR
//#define PDX_DEBUG_SUN_LIGHT
//#define PDX_DEBUG_SUN_LIGHT_WITH_SHADOW
//#define PDX_DEBUG_IBL_SIMPLE_DIFFUSE
//#define PDX_DEBUG_IBL_DIFFUSE
//#define PDX_DEBUG_IBL_SPECULAR
//#define PDX_DEBUG_IBL

void DebugReturn( inout float3 Out, SMaterialProperties MaterialProps, SLightingProperties LightingProps )
{
#ifdef PDX_DEBUG_NORMAL
	Out = saturate( MaterialProps._Normal );
#endif

#ifdef PDX_DEBUG_DIFFUSE
	Out = MaterialProps._DiffuseColor;
#endif

#ifdef PDX_DEBUG_SPEC
	Out = MaterialProps._SpecularColor;
#endif

#ifdef PDX_DEBUG_ROUGHNESS
	Out = vec3( MaterialProps._PerceptualRoughness );
#endif

#ifdef PDX_DEBUG_METALNESS
	Out = vec3( MaterialProps._Metalness );
#endif

#ifdef PDX_DEBUG_SPEC_RANGES
	// Shows extremely low specular values in red
	// Shows common material values in green (2-6%)
	// Shows gemstone material values in yellow (8-17%)
	// Shows metalness in blue
	// Shows everything else in gray scale	
	// Values based on page 14-15 in http://renderwonk.com/publications/s2010-shading-course/hoffman/s2010_physically_based_shading_hoffman_a_notes.pdf
	float Spec = MaterialProps._SpecularColor.r;
	
	float e = 0.002f;
	float ErrorThreshold = 0.01f;
	float DielectricLow = 0.02f;
	float DielectricHigh = 0.06f;
	float GemstoneLow = 0.08f;
	float GemstoneHigh = 0.17f;
	
	float Error = smoothstep( ErrorThreshold, 0.0, Spec );
	float CommonMask = smoothstep( DielectricLow-e, DielectricLow, Spec ) * smoothstep( DielectricHigh+e, DielectricHigh, Spec);
	float GemstoneMask = smoothstep( GemstoneLow-e, GemstoneLow, Spec ) * smoothstep( GemstoneHigh+e, GemstoneHigh, Spec);
	float ScaledSpec = ( Spec / RemapSpec(1.0f) );
	float3 DebugSpecColor = float3( GemstoneMask, CommonMask + GemstoneMask, 0.0 ) * ScaledSpec;
	Out = lerp( vec3(ScaledSpec), DebugSpecColor, CommonMask + GemstoneMask );
	Out = lerp( Out, float3(1.0,0.0,0.0), Error );
	Out = lerp( Out, float3(0.0,0.0,1.0), MaterialProps._Metalness );
#endif

#ifdef PDX_DEBUG_SHADOW
	Out = vec3( LightingProps._ShadowTerm );
#endif

#ifdef PDX_DEBUG_SUN_LIGHT_SIMPLE_DIFFUSE
	SMaterialProperties MaterialPropsCopy = MaterialProps;
	MaterialPropsCopy._DiffuseColor = vec3( 1.0 );
	MaterialPropsCopy._SpecularColor = vec3( 0.0 );
	
	float3 SpecularLight;
	CalculateLightingFromLight( MaterialPropsCopy, LightingProps, Out, SpecularLight );
#endif

#ifdef PDX_DEBUG_SUN_LIGHT_ONLY_SPECULAR			
	float3 DiffuseLight;			
	CalculateLightingFromLight( MaterialProps, LightingProps, DiffuseLight, Out );
#endif

#if defined( PDX_DEBUG_SUN_LIGHT ) || defined( PDX_DEBUG_SUN_LIGHT_WITH_SHADOW )
	float3 DiffuseLight;
	float3 SpecularLight;

	#ifdef PDX_DEBUG_SUN_LIGHT_WITH_SHADOW
		CalculateLightingFromLight( MaterialProps, LightingProps, DiffuseLight, SpecularLight );
	#else
		SLightingProperties LightingPropsNoShadow = LightingProps;
		LightingPropsNoShadow._ShadowTerm = 1.0;
		CalculateLightingFromLight( MaterialProps, LightingPropsNoShadow, DiffuseLight, SpecularLight );
	#endif
	
	Out = DiffuseLight + SpecularLight;
#endif
}

void DebugReturn( inout float3 Out, SMaterialProperties MaterialProps, SLightingProperties LightingProps, PdxTextureSamplerCube EnvironmentMap )
{
	DebugReturn( Out, MaterialProps, LightingProps );

#if defined( PDX_DEBUG_IBL ) || defined( PDX_DEBUG_IBL_DIFFUSE ) || defined( PDX_DEBUG_IBL_SPECULAR ) || defined( PDX_DEBUG_IBL_SIMPLE_DIFFUSE )
	float3 DiffuseIBL;
	float3 SpecularIBL;
	
	SMaterialProperties MaterialPropsCopy = MaterialProps;
	#ifdef PDX_DEBUG_IBL_SIMPLE_DIFFUSE
		MaterialPropsCopy._DiffuseColor = vec3( 1.0 );
	#endif
	
	CalculateLightingFromIBL( MaterialPropsCopy, LightingProps, EnvironmentMap, DiffuseIBL, SpecularIBL );
	
	#if defined( PDX_DEBUG_IBL_DIFFUSE ) || defined( PDX_DEBUG_IBL_SIMPLE_DIFFUSE )
		Out = DiffuseIBL;
	#endif
	#ifdef PDX_DEBUG_IBL_SPECULAR
		Out = SpecularIBL;
	#endif
	#ifdef PDX_DEBUG_IBL
		Out = DiffuseIBL + SpecularIBL;
	#endif
#endif
}

float3 GameCalculateSunLighting( SMaterialProperties MaterialProps, SLightingProperties LightingProps  )
{
	float3 DiffuseLight = vec3( 0.0f );
	float3 SpecularLight = vec3( 0.0f );

	// Light vectors
	float3 H = normalize( LightingProps._ToCameraDir + LightingProps._ToLightDir );
	float NdotV = abs( dot( MaterialProps._Normal, LightingProps._ToCameraDir ) ) + 1e-5;		// Add small values to avoid values of 0
	float NdotL = saturate( dot( MaterialProps._Normal, LightingProps._ToLightDir ) + 1e-5 );
	float NdotH = saturate( dot( MaterialProps._Normal, H ) + 1e-5 );
	float LdotH = saturate( dot( LightingProps._ToLightDir, H ) + 1e-5 );
	float3 LightIntensity = LightingProps._LightIntensity * NdotL * LightingProps._ShadowTerm;

	// Sun diffuse light
	float DiffuseBRDF = CalcDiffuseBRDF( NdotV, NdotL, LdotH, MaterialProps._PerceptualRoughness );
	DiffuseLight = DiffuseBRDF * MaterialProps._DiffuseColor * LightIntensity;

	// Sun specular light
	float3 F = F_Schlick( MaterialProps._SpecularColor, vec3( 1.0f ), LdotH );
	float D = D_GGX( NdotH, lerp( 0.03f , 1.0f , MaterialProps._Roughness ) );		// Remap to avoid super small and super bright highlights
	#ifdef PDX_SimpleLighting
		float Vis = V_Optimized( LdotH, MaterialProps._Roughness );
	#else
		float Vis = V_Schlick( NdotL, NdotV, MaterialProps._Roughness );
	#endif
	SpecularLight = D * F * Vis * LightIntensity;

	return DiffuseLight + SpecularLight;
}

SLightingProperties GetSecondSunLightingProperties( float3 WorldSpacePos )
{
	SLightingProperties LightingProps;
	LightingProps._ToCameraDir = normalize( CameraPosition - WorldSpacePos );

	LightingProps._ToLightDir = _SecondSunDir;
	LightingProps._LightIntensity = _SecondSunDiffuse * _SecondSunIntensity;

	// Default these values
	LightingProps._ShadowTerm = 1.0f;
	LightingProps._CubemapIntensity = 0.0f;
	LightingProps._CubemapYRotation = Float4x4Identity();

	return LightingProps;
}

float3 CalculateSecondSunLighting( SMaterialProperties MaterialProps, SLightingProperties LightingProps )
{
	return GameCalculateSunLighting( MaterialProps, LightingProps );
}

float ScaleRoughnessByDistance( float Roughness, float3 WorldSpacePos )
{
	float3 Intersection = CameraPosition - WorldSpacePos;
	float Scalar = Intersection.y;
	float Distance = length( Intersection );

	Roughness = 1.0 - Roughness;
	float ReducedRoughness = 1.0 - RemapClamped( Distance, _DistanceRoughnessPosition * Scalar, _DistanceRoughnessPosition * Scalar + _DistanceRoughnessBlend, Roughness, Roughness * _DistanceRoughnessScale );

	return ReducedRoughness;
}


#ifndef FOG_OF_WAR_BLEND_FUNCTION
	#define FOG_OF_WAR_BLEND_FUNCTION loc_BlendFogOfWar
	float4 loc_BlendFogOfWar( float Alpha )
	{
		return float4( vec3(0.0), 1.0 - Alpha );
	}
#endif

void loc_ApplyFogOfWarPattern( inout float Alpha, in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
	if( FogOfWarPatternStrength > 0.0f )
	{
		float2 UV = Coordinate.xz * InverseWorldSize * FogOfWarPatternTiling;
		UV += FogOfWarPatternSpeed * FogOfWarTime;
		float Noise1 = 1.0f - PdxTex2D( FogOfWarAlphaMask, UV ).g;
		float Noise2 = 1.0f - PdxTex2D( FogOfWarAlphaMask, UV * -0.13 ).g;
		float Detail = 0.5f;
		
		float Noise = saturate( Noise2 * (1.0f-Detail) + Detail * 0.5f + (Noise1-0.5f) * Detail );
		
		Noise *= 1.0f - Alpha;
		Alpha = smoothstep( 0.0, 1.0, Alpha + Noise * FogOfWarPatternStrength );
	}
}
float GetFogOfWarAlpha( in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{		
	float Alpha = PdxTex2D( FogOfWarAlphaMask, Coordinate.xz * InverseWorldSize ).r;
	
	loc_ApplyFogOfWarPattern( Alpha, Coordinate, FogOfWarAlphaMask );
	
	return FogOfWarAlphaMin + Alpha * (1.0f - FogOfWarAlphaMin);
}
float GetFogOfWarAlphaMultiSampled( in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
	float Width = 5.0f;
	float Alpha = 0.0f; 
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2( 0,-1) * Width ) * InverseWorldSize ).r;
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2(-1, 0) * Width ) * InverseWorldSize ).r;
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2( 1, 0) * Width ) * InverseWorldSize ).r;
	Alpha += PdxTex2D( FogOfWarAlphaMask, ( Coordinate.xz + float2( 0, 1) * Width ) * InverseWorldSize ).r;
	Alpha /= 4.0f;
	
	loc_ApplyFogOfWarPattern( Alpha, Coordinate, FogOfWarAlphaMask );
	
	return FogOfWarAlphaMin + Alpha * (1.0f - FogOfWarAlphaMin);
}

float3 FogOfWarBlend( float3 Color, float Alpha )
{		
	float4 ColorAndAlpha = FOG_OF_WAR_BLEND_FUNCTION( Alpha );
	return lerp( Color, ColorAndAlpha.rgb, ColorAndAlpha.a );
}

// Immediate mode
float3 JominiApplyFogOfWar( in float3 Color, in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
#ifdef JOMINI_DISABLE_FOG_OF_WAR
	return Color;
#else
	float Alpha = GetFogOfWarAlpha( Coordinate, FogOfWarAlphaMask );
	return FogOfWarBlend( Color, Alpha );
#endif
}
float3 JominiApplyFogOfWarMultiSampled( in float3 Color, in float3 Coordinate, PdxTextureSampler2D FogOfWarAlphaMask )
{
#ifdef JOMINI_DISABLE_FOG_OF_WAR
	return Color;
#else
	float Alpha = GetFogOfWarAlphaMultiSampled( Coordinate, FogOfWarAlphaMask );
	return FogOfWarBlend( Color, Alpha );
#endif
}

// Post process
float4 JominiApplyFogOfWar( in float3 WorldSpacePos, PdxTextureSampler2D FogOfWarAlphaMask )
{
#ifdef JOMINI_DISABLE_FOG_OF_WAR
	return float4( vec3(0.0), 1.0 );
#else
	return FOG_OF_WAR_BLEND_FUNCTION( GetFogOfWarAlpha( WorldSpacePos, FogOfWarAlphaMask ) );
#endif
}

#ifndef ApplyFogOfWar		
#define ApplyFogOfWar JominiApplyFogOfWar
#endif
#ifndef ApplyFogOfWarMultiSampled		
#define ApplyFogOfWarMultiSampled JominiApplyFogOfWarMultiSampled
#endif

#define FowFadeEnd			150.0
#define FowFadeStart		101.0


float SampleFowNoiseLowSpec( in float3 Coordinate )
{
		// Uv tiling
		float2 MasterUVTiling = _FoWMasterUVTiling * Coordinate.xz * InverseWorldSize;
		MasterUVTiling.x *= _FoWMasterUVScale.x;
		MasterUVTiling.y *= _FoWMasterUVScale.y;
		float2 UV = MasterUVTiling * _FoWLayer1Tiling;

		// Animation
		float2 AnimUV = float2(_FoWLayer1Speed.x * _FoWMasterUVSpeed.x, _FoWLayer1Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		UV += AnimUV * _FoWMasterUVScale;

		// Layer sample
		float Layer1 = PdxTex2D( FogOfWarNoise, UV ).r;
		Layer1 = smoothstep( _FoWLayer1Min, _FoWLayer1Max, Layer1 );

		// Detail noise blending
		float Cloud = smoothstep( _FoWLayer1Min, _FoWLayer1Max, Layer1 );
		return Cloud;
}

float SampleFowNoise( in float3 Coordinate, inout float3 Normal )
{
		// Uv tiling and animation
		float2 MasterUVTiling = _FoWMasterUVTiling * Coordinate.xz * InverseWorldSize;

		// Scale
		MasterUVTiling.x *= _FoWMasterUVScale.x;
		MasterUVTiling.y *= _FoWMasterUVScale.y;

		float2 UV = MasterUVTiling * _FoWLayer1Tiling;
		float2 UV2 = MasterUVTiling * _FoWLayer2Tiling;
		float2 UV3 = MasterUVTiling * _FoWLayer3Tiling;

		// Animation
		float2 AnimUV = float2(_FoWLayer1Speed.x * _FoWMasterUVSpeed.x, _FoWLayer1Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		float2 AnimUV2 = float2(_FoWLayer2Speed.x * _FoWMasterUVSpeed.x, _FoWLayer2Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		float2 AnimUV3 = float2(_FoWLayer3Speed.x * _FoWMasterUVSpeed.x, _FoWLayer3Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		UV += AnimUV * _FoWMasterUVScale;
		UV2 += AnimUV2 * _FoWMasterUVScale;
		UV3 +=AnimUV3 * _FoWMasterUVScale;

		// Layers sample
		float Layer1 = PdxTex2D( FogOfWarNoise, UV ).g;
		float Layer2 = PdxTex2D( FogOfWarNoise, UV2 ).g;
		float Layer3 = PdxTex2D( FogOfWarNoise, UV3 ).g;

		// Layers min/max adjustment
		Layer1 = smoothstep( _FoWLayer1Min, _FoWLayer1Max, Layer1 );
		Layer2 = smoothstep( _FoWLayer2Min, _FoWLayer2Max, Layer2 );
		Layer3 = smoothstep( _FoWLayer3Min, _FoWLayer3Max, Layer3 );

		// Detail noise blending
		float Cloud = Overlay(Layer1, Layer2, _FoWLayer2Balance );
		Cloud = Overlay(Cloud, Layer3, _FoWLayer3Balance );

		Normal = PdxTex2D( FogOfWarNormal, UV ).xzy - 0.5;
		Normal.xz *= _CloudNormalStrength;
		Normal = saturate( Normal );

		return Cloud;
}

float SampleFowReflection( in float2 Coordinate )
{
		// Uv tiling and animation
		float2 MasterUVTiling = _FoWMasterUVTiling * Coordinate * InverseWorldSize;

		// Scale
		MasterUVTiling.x *= _FoWMasterUVScale.x;
		MasterUVTiling.y *= _FoWMasterUVScale.y;

		float2 UV = MasterUVTiling * _FoWLayer1Tiling;
		float2 UV2 = MasterUVTiling * _FoWLayer2Tiling;
		float2 UV3 = MasterUVTiling * _FoWLayer3Tiling;

		// Animation
		float2 AnimUV = float2(_FoWLayer1Speed.x * _FoWMasterUVSpeed.x, _FoWLayer1Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		float2 AnimUV2 = float2(_FoWLayer2Speed.x * _FoWMasterUVSpeed.x, _FoWLayer2Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		float2 AnimUV3 = float2(_FoWLayer3Speed.x * _FoWMasterUVSpeed.x, _FoWLayer3Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		UV += AnimUV * _FoWMasterUVScale;
		UV2 += AnimUV2 * _FoWMasterUVScale;
		UV3 +=AnimUV3 * _FoWMasterUVScale;

		// Layers sample
		float Layer1 = PdxTex2D( FogOfWarNoise, UV ).g;
		float Layer2 = PdxTex2D( FogOfWarNoise, UV2 ).g;
		float Layer3 = PdxTex2D( FogOfWarNoise, UV3 ).g;

		// Layers min/max adjustment
		Layer1 = smoothstep( _FoWLayer1Min, _FoWLayer1Max, Layer1 );
		Layer2 = smoothstep( _FoWLayer2Min, _FoWLayer2Max, Layer2 );
		Layer3 = smoothstep( _FoWLayer3Min, _FoWLayer3Max, Layer3 );

		// Detail noise blending
		float Cloud = Overlay(Layer1, Layer2, _FoWLayer2Balance );
		Cloud = Overlay(Cloud, Layer3, _FoWLayer3Balance );

		return Cloud;
}

float SampleFowNoiseShadow( in float3 Coordinate )
{

		// Uv tiling and animation
		float2 MasterUVTiling = _FoWMasterUVTiling * Coordinate.xz * InverseWorldSize;

		// Scale
		MasterUVTiling.x *= _FoWMasterUVScale.x;
		MasterUVTiling.y *= _FoWMasterUVScale.y;

		float2 UV = MasterUVTiling * _FoWLayer1Tiling;
		float2 UV2 = MasterUVTiling * _FoWLayer2Tiling;
		float2 UV3 = MasterUVTiling * _FoWLayer3Tiling;

		// Animation
		float2 AnimUV = float2(_FoWLayer1Speed.x * _FoWMasterUVSpeed.x, _FoWLayer1Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		float2 AnimUV2 = float2(_FoWLayer2Speed.x * _FoWMasterUVSpeed.x, _FoWLayer2Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		float2 AnimUV3 = float2(_FoWLayer3Speed.x * _FoWMasterUVSpeed.x, _FoWLayer3Speed.y * _FoWMasterUVSpeed.y) * FogOfWarTime * 0.01f;
		UV += AnimUV * _FoWMasterUVScale;
		UV2 += AnimUV2 * _FoWMasterUVScale;
		UV3 +=AnimUV3 * _FoWMasterUVScale;

		// Layers sample
		float Layer1 = PdxTex2D( FogOfWarNoise, UV ).a;
		float Layer2 = PdxTex2D( FogOfWarNoise, UV2 ).a;
		float Layer3 = PdxTex2D( FogOfWarNoise, UV3 ).a;

		// Layers min/max adjustment
		Layer1 = LevelsScan( Layer1, _FowShadowLayer1Min, _FowShadowLayer1Max);
		Layer2 = LevelsScan( Layer2, _FowShadowLayer2Min, _FowShadowLayer2Max);
		Layer3 = LevelsScan( Layer3, _FowShadowLayer3Min, _FowShadowLayer3Max);

		// Detail noise blending
		float Cloud = Overlay(Layer1, Layer2 );
		Cloud = Overlay(Cloud, Layer3 );

		return Cloud;
}

float3 GameApplyFogOfWar( in float3 Color, in float3 Coordinate, float ShadowMultiplier = 1.0 )
{
	#ifdef PDX_DEBUG_FOW_OFF
		return Color;
	#endif

	#ifdef JOMINI_DISABLE_FOG_OF_WAR
		return Color;
	#endif

	// Alpha fade
	float FadeStart = FowFadeEnd - FowFadeStart;
	float DistanceBlend = FadeStart - CameraPosition.y + FowFadeStart;
	DistanceBlend = RemapClamped( DistanceBlend, 0.0, FadeStart, 0.0, 1.0 );

	float Alpha = 1.0 - PdxTex2D( FogOfWarAlpha, Coordinate.xz * InverseWorldSize ).r;
	Alpha = lerp( Alpha, 0.0, DistanceBlend );

	#ifdef PDX_DEBUG_FOW_MASK
		return float4( Alpha.rrr, 1.0f );
	#endif
	if( _FoWShowAlphaMask > 0.0f )
	{
		return vec3( 1.0f - Alpha );
	}

	float ShadowAlpha = smoothstep( _FoWShadowAlphaStart, _FoWShadowAlphaStop, Alpha ) * _FoWShadowColor.a;
	float CloudsAlpha = smoothstep( _FoWCloudsAlphaStart, _FoWCloudsAlphaStop, Alpha ) * _FoWCloudsColor.a;

	// Paralax offset
	float3 ToCam = normalize( CameraPosition - Coordinate );
	float ParalaxDist = ( _FoWCloudHeight - Coordinate.y ) / ToCam.y;
	float3 ParalaxCoord = Coordinate + ToCam * ParalaxDist;

	// Sun shadow offset
	float ShadowCordDist = ( _FoWCloudHeight - Coordinate.y ) / ToSunDir.y;
	Coordinate =  Coordinate + ToSunDir * ShadowCordDist;

	// Cloud and shadow texture
	float3 Normal = float3( 0.0, 1.0, 0.0 );
	#ifdef LOW_QUALITY_SHADERS
		float CloudTex = smoothstep( _FoWMasterStart, _FoWMasterStop, SampleFowNoiseLowSpec( ParalaxCoord ) );
		float ShadowTex = smoothstep( _FoWShadowTexStart, _FoWShadowTexStop, SampleFowNoiseLowSpec( Coordinate ) );
	#else
		float CloudTex = smoothstep( _FoWMasterStart, _FoWMasterStop, SampleFowNoise( ParalaxCoord, Normal ) );
		float ShadowTex = smoothstep( _FoWShadowTexStart, _FoWShadowTexStop, SampleFowNoiseShadow( Coordinate ) );
	#endif

	// Apply clouds
	float GradientControlDay = smoothstep( _FoWCloudsColorDayGradientMin, _FoWCloudsColorDayGradientMax, CloudTex );
	float3 CloudsColor = lerp( _FoWCloudsColorGradient.rgb, _FoWCloudsColor.rgb, GradientControlDay ) ;

	float GradientControlSunset = smoothstep( _FoWCloudsColorSunsetGradientMin, _FoWCloudsColorSunsetGradientMax, CloudTex );
	float3 CloudsColorSunset = lerp( _FoWCloudsColorSunsetGradient.rgb, _FoWCloudsColorSunset.rgb, GradientControlSunset );

	float GradientControlNight = smoothstep( _FoWCloudsColorNightGradientMin, _FoWCloudsColorNightGradientMax, CloudTex );
	float3 CloudsColorNight = lerp( _FoWCloudsColorNightGradient.rgb, _FoWCloudsColorNight.rgb, GradientControlNight );

	// Apply sunset and night color
	float SunsetValue = 0.0;
	float SunsetValueClose = 0.0;
	if ( _DayNightValue >= 0.5 )
	{
		SunsetValue = 1.0;
		SunsetValueClose = 1.0;
	}
	else
	{
		SunsetValue = Remap( _DayNightValue, 0.0f, 0.5, 0.0, 1.0 );
		SunsetValueClose = RemapClamped( _DayNightValue, _CloudSunsetColorValueMin, _CloudSunsetColorValueMax, 0.0, 1.0 );
	}
	CloudsColor = lerp( CloudsColor, CloudsColorSunset, SunsetValue );
	CloudsColor = lerp( CloudsColor, CloudsColorNight, SunsetValueClose );

	// Normal calculation
	float SunsetIntensityValue = smoothstep( 0.5, 1.0, SunsetValue );
	float SunValue = lerp( 1.0, 0.0, SunsetIntensityValue );
	float NightIntensityValue = smoothstep( 0.0, 0.5, _NightValue );
	SunValue = lerp( SunValue, 1.0, NightIntensityValue );
	float3 SunDir = ToSunDir;
	float NdotL = saturate( dot( Normal, SunDir ) + 1e-5 );
	CloudsColor *= _CloudAmbientValue;
	float CloudBrightScale = saturate( smoothstep( _CloudLightMin, _CloudLightMax, NdotL ) );
	CloudsColor += ( CloudsColor * CloudBrightScale * SunValue * _CloudLightMultiplier );

	// Apply Fog of war and cloud shadow
	float3 FinalColor = lerp( Color, _FoWShadowColor.rgb, _FoWShadowMult * ShadowAlpha );					// Fow darkness
	FinalColor = lerp( FinalColor, _FoWShadowColor.rgb, _FoWShadowMult * ShadowTex * ShadowMultiplier * SunValue );	// Cloud Shadow
	FinalColor = lerp( FinalColor, CloudsColor, CloudTex * CloudsAlpha );

	return FinalColor;
}
// Post process
float4 GameApplyFogOfWar( in float3 WorldSpacePos, PdxTextureSampler2D FogOfWarAlphaMask )
{
	#ifdef PDX_DEBUG_FOW_OFF
	return vec4(0);
	#endif

	float Alpha = GetFogOfWarAlpha( WorldSpacePos, FogOfWarAlphaMask );

	#ifdef PDX_DEBUG_FOW_MASK
	return float4( Alpha.rrr, 1.0f );
	#endif

	return FOG_OF_WAR_BLEND_FUNCTION( Alpha );
}

#undef ApplyFogOfWar
#define ApplyFogOfWar GameApplyFogOfWar

// Settings for the vertical war border layers

// Layer 1 - Vertical rays
#define LAYER1_TOPALPHA_CONTRAST 0.9f

// Layer 2 - Embers
#define LAYER2_TOPALPHA_POSITION 1.05f
#define LAYER2_TOPALPHA_CONTRAST 1.0f

#define ANIMATION_SPEED 0.5f
#define MOVEMENT_SPEED 2.0f
#define MOVEMENT_DIRECTION float2( -0.1f, 1.0f )

#define PARTICLE_SIZE 0.09f

#define PARTICLE_SCALE ( float2( 0.5f, 2.0f ) )
#define PARTICLE_SCALE_VAR ( float2( 0.25f, 0.2f ) )

#define PARTICLE_BLOOM_SCALE ( float2( 1.5f, 1.5f ) )
#define PARTICLE_BLOOM_SCALE_VAR ( float2( 0.3f, 0.1f ) )

#define SPARK_COLOR float3( 1.0f, 0.2f, 0.05f ) * 1.0f
#define BLOOM_COLOR float3( 1.0f, 0.2f, 0.05f ) * 1.0f

#define SIZE_MOD 1.5f
#define ALPHA_MOD 0.8f
#define LAYERS_COUNT 8.0f

#define UV_DIST_STRENGTH 0.12f
#define UV_DIST_SCALE 3.0f

#define COLOR_SMOOTHNESS 	5.0
#define COLOR_MIN 			0.2
#define COLOR_SATURATION	1.04
#define COLOR_EMISSIVE		8.0

#define UPPER_EDGE_HEIGHT  	0.4
#define OPACITY 			1.0
#define ALPHA_SHARPNESS 	0.7
#define MAX_FLAME_LUT_COORD 0.95

#define UPPER_EDGE_HEIGHT_LOW 	0.5
#define OPACITY_LOW 			0.0
#define ALPHA_SHARPNESS_LOW 	0.8
#define MAX_LUT_COORD_LOW 0.3

#define LOWER_EDGE_FALLOFF 0.6f
#define LOWER_EDGE_MIN 0.08f
#define LOWER_EDGE_MAX 0.2f

float2 CalcHeightBlendFactors( float2 MaterialHeights, float2 MaterialFactors, float BlendRange )
{
	float2 Mat = MaterialHeights + MaterialFactors;
	float BlendStart = max( Mat.x, Mat.y ) - max( BlendRange, 0.0 );

	float2 MatBlend = max( Mat - vec2( BlendStart ), vec2( 0.0 ) );

	float Epsilon = 0.00001f;
	return float2( MatBlend ) / ( dot( MatBlend, vec2( 1.0 ) ) + Epsilon );
}

/* Amplitude reflection coefficient (s-polarized) */
float Rs(float n1, float n2, float cosI, float cosT)
{
	return ( n1 * cosI - n2 * cosT ) / ( n1 * cosI + n2 * cosT );
}

/* Amplitude reflection coefficient (p-polarized) */
float Rp(float n1, float n2, float cosI, float cosT)
{
	return ( n2 * cosI - n1 * cosT ) / ( n1 * cosT + n2 * cosI );
}

/* Amplitude transmission coefficient (s-polarized) */
float Ts( float n1, float n2, float cosI, float cosT )
{
	return 2 * n1 * cosI / ( n1 * cosI + n2 * cosT );
}

/* Amplitude transmission coefficient (p-polarized) */
float Tp( float n1, float n2, float cosI, float cosT )
{
	return 2 * n1 * cosI / ( n1 * cosT + n2 * cosI );
}

// cosI is the cosine of the incident angle, that is, cos0 = dot(view angle, normal)
// lambda is the wavelength of the incident light (e.g. lambda = 510 for green)
// From http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/thin-film-interference-for-computer-graphics-r2962
float ThinFilmReflectance(float cos0, float lambda, float thickness, float n0, float n1, float n2 )
{

	// Compute the phase change term (constant)
	float d10 = ( n1 > n0 ) ? 0.0 : PI;
	float d12 = ( n1 > n2 ) ? 0.0 : PI;
	float delta = d10 + d12;

	// Compute cos1, the cosine of the reflected angle
	float sin1 = pow( n0 / n1, 2.0 ) * (1.0 - pow( cos0, 2.0 ) );
	if ( sin1 > 1 ) return 1.0; // total internal reflection
	float cos1 = sqrt( 1.0 - sin1 );

	// Compute cos2, the cosine of the final transmitted angle, i.e. cos(theta_2)
	float sin2 = pow( n0 / n2, 2.0 ) * ( 1.0 - pow( cos0, 2.0 ) );
	if ( sin2 > 1.0 )
	{
		return 1.0; // Total internal reflection
	}

	float cos2 = sqrt( 1.0 - sin2 );

	// Get the reflection transmission amplitude Fresnel coefficients
	float alpha_s = Rs( n1, n0, cos1, cos0 ) * Rs( n1, n2, cos1, cos2 ); // rho_10 * rho_12 (s-polarized)
	float alpha_p = Rp( n1, n0, cos1, cos0 ) * Rp( n1, n2, cos1, cos2 ); // rho_10 * rho_12 (p-polarized)

	float beta_s = Ts( n0, n1, cos0, cos1 ) * Ts( n1, n2, cos1, cos2 ); // tau_01 * tau_12 (s-polarized)
	float beta_p = Tp( n0, n1, cos0, cos1 ) * Tp( n1, n2, cos1, cos2 ); // tau_01 * tau_12 (p-polarized)

	// Compute the phase term (phi)
	float phi = ( 2.0 * PI / lambda ) * ( 2.0 * n1 * thickness * cos1 ) + delta;

	// Evaluate the transmitted intensity for the two possible polarizations
	float ts = pow( beta_s, 2.0 ) / ( pow( alpha_s, 2.0 ) - 2.0 * alpha_s * cos( phi ) + 1.0 );
	float tp = pow( beta_p, 2.0 ) / ( pow( alpha_p, 2.0 ) - 2.0 * alpha_p * cos( phi ) + 1.0 );

	// Take into account conservation of energy for transmission
	float beamRatio = ( n2 * cos2 ) / ( n0 * cos0 );

	// Calculate the average transmitted intensity
	float t = beamRatio * ( ts + tp ) / 2;

	// Derive the reflected intensity
	return saturate( 1 - t );
}

float GetDevastation( float2 MapCoordinates )
{
	float Devastation = PdxTex2D( DevastationPollution, MapCoordinates ).r;
	Devastation += DevastationForceAdd;
	Devastation = CubicBezier( Devastation, DevastationBezierPoint1, DevastationBezierPoint2 );

	if( Devastation <= 0.0 )
	{
		return 0.0;
	}

	float2 DevastationCoords = float2( MapCoordinates.x * 2.0, MapCoordinates.y ) * DevastationNoiseTiling;
	float Noise = 1.0 - PdxTex2D( DevastationPollution, DevastationCoords ).a;
	Noise = lerp( 0.0, Noise, Devastation );
	Noise = LevelsScan( Noise, DevastationAreaPosition, DevastationAreaContrast );
	return Noise;
}

float GetDevastationExclusionMask( float2 MapCoordinates )
{
	// Exclusion mask
	float DevastationMask = PdxTex2D( DevastationPollution, float2( MapCoordinates.x, MapCoordinates.y ) ).b;
	DevastationMask = smoothstep( DevastationExclusionMaskMin, DevastationExclusionMaskMax, DevastationMask );
	return DevastationMask;
}

float GetPollution( float2 MapCoordinates )
{
	float Pollution = PdxTex2D( DevastationPollution, MapCoordinates ).g;
	Pollution += PollutionForceAdd;
	Pollution = CubicBezier( Pollution, PollutionBezierPoint1, PollutionBezierPoint2 );

	if( Pollution <= 0.0 )
	{
		return 0.0;
	}

	float2 PollutionCoords = float2( MapCoordinates.x * 2.0, MapCoordinates.y ) * PollutionNoiseTiling;
	float Noise = 1.0 - PdxTex2D( DevastationPollution, PollutionCoords ).a;
	Noise = lerp( 0.0, Noise, Pollution );
	Noise = LevelsScan( Noise, PollutionAreaPosition, PollutionAreaContrast );
	return Noise;
}

void ApplyDevastationMaterialVFX( inout float4 Diffuse, float DevastationMask, float2 UV, float2 TerrainBlendFactors )
{
	// Effect Properties
	float3 BurnColour = float3( 1.0, 0.3, 0.0 );

	float BorderEffectStrength = 7.0;

	float FireUVDistortionStrength = 0.5f;

	float2 PanSpeedA = float2( 0.005, 0.001 );
	float2 PanSpeedB = float2( 0.010, 0.005 );

	// UV & UV Panning Properties
	float2 UVPan02 = float2( -frac( GlobalTime * PanSpeedA.x ), frac( GlobalTime * PanSpeedA.y ) );
	float2 UVPan01 = float2( frac( GlobalTime * PanSpeedB.x ),  frac( GlobalTime * PanSpeedB.y ) );

	float2 UV02 = ( UV + 0.5 ) * 0.1;
	float2 UV01 = UV * 0.2;

	// Pan and Sample noise for UV distortion
	UV02 += UVPan02;
	float DevastationAlpha02 = PdxTex2D( DevastationPollution, float3( UV02, DevastationTexIndex + DevastationTexIndexOffset ) ).a;

	// Apply the UV Distortion
	UV01 += UVPan01;
	UV01 += DevastationAlpha02 * FireUVDistortionStrength;
	float DevastationAlpha01 = PdxTex2D( DevastationPollution, float3( UV01, DevastationTexIndex + DevastationTexIndexOffset ) ).a;

	// Adjust Mask Value ranges to clamp the effect
	DevastationAlpha01 = max( smoothstep( 0.1, 0.5, DevastationAlpha01 ), 0.88 );

	// Calculate the effect masks
	float BorderMask = saturate( saturate( TerrainBlendFactors.y - 0.4 ) - saturate( TerrainBlendFactors.y - 0.6 ) );
	BorderMask = saturate( TerrainBlendFactors.x * ( DevastationMask - 0.1 ) ) * DevastationAlpha01;
	BorderMask *= BorderEffectStrength * DevastationAlpha01;

	float FinalMask = BorderMask;

	BurnColour = PdxTex2D( DevastationVFXLUT , saturate( float2( FinalMask, FinalMask) ) ).rgb;

	float3 Result = lerp( Diffuse.rgb, BurnColour, FinalMask );

	Diffuse.rgb = Result;
}

void ApplyDevastationTrees( inout float4 Diffuse, float2 MapCoordinates )
{
	// Devastation area
	float Devastation = saturate( GetDevastation( MapCoordinates ) * 2.0 );
	if( Devastation <= 0.0 )
	{
		return;
	}

	// Diffuse coloration
	float3 DevastatedDiffuse = RGBtoHSV( Diffuse.rgb );
	DevastatedDiffuse.x += DevastationTreeHue;				// Hue
	DevastatedDiffuse.y *= DevastationTreeSaturation;		// Saturation
	DevastatedDiffuse.z *= DevastationTreeValue;			// Value
	DevastatedDiffuse = HSVtoRGB( DevastatedDiffuse );

	// Alpha
	float DevastatedAlpha = smoothstep( DevastationTreeAlphaReduce, 1.0, Diffuse.a );

	// Return
	Diffuse.a = lerp( Diffuse.a, DevastatedAlpha, Devastation );
	Diffuse.rgb = lerp( Diffuse.rgb, DevastatedDiffuse, Devastation );
}

void ApplyPollutionTrees( inout float4 Diffuse, float2 MapCoordinates )
{
	// Pollution area
	float Pollution = saturate( GetPollution( MapCoordinates ) * 2.0 );
	if( Pollution <= 0.0 )
	{
		return;
	}

	// Diffuse coloration
	float3 PollutedDiffuse = RGBtoHSV( Diffuse.rgb );
	PollutedDiffuse.x += PollutionTreeHue;				// Hue
	PollutedDiffuse.y *= PollutionTreeSaturation;		// Saturation
	PollutedDiffuse.z *= PollutionTreeValue;			// Value
	PollutedDiffuse = HSVtoRGB( PollutedDiffuse );

	// Alpha
	float PollutedAlpha = smoothstep( PollutionTreeAlphaReduce, 1.0, Diffuse.a );

	// Return
	Diffuse.a = lerp( Diffuse.a, PollutedAlpha, Pollution );
	Diffuse.rgb = lerp( Diffuse.rgb, PollutedDiffuse, Pollution );
}

void ApplyDevastationRoads( inout float4 Diffuse, float2 WorldSpacePosXZ )
{
	// UVs
	float2 MapCoordinates = WorldSpacePosXZ * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( WorldSpacePosXZ ) * DevastationTextureTiling;

	// Devastation area
	float Devastation = saturate( GetDevastation( MapCoordinates ) * ROAD_DEVASTATION_MULT );

	if( Devastation <= 0.0 )
	{
		return;
	}

	// Diffuse coloration
	float3 DevastatedDiffuse = Overlay( Diffuse.rgb, ROAD_DEVASTATION_COLOR );
	Diffuse.rgb = lerp( Diffuse.rgb, DevastatedDiffuse, Devastation );

	// Terrain material blend
	float DevAlpha = PdxTex2D( DetailTextures, float3( DetailUV, DevastationTexIndex + DevastationTexIndexOffset ) ).a;
	DevAlpha = lerp( 1.0, DevAlpha, 1.0 - DevastationHeightWeight );
	Devastation = clamp( Devastation, 0.0, ROAD_DEVASTATION_MAX );
	float2 BlendFactors = CalcHeightBlendFactors( float2( 1.0, DevAlpha ), float2( 1.0 - Devastation, Devastation ), _DetailBlendRange * DevastationHeightContrast );

	// Return
	Diffuse.a = saturate( Diffuse.a - BlendFactors.y );
}

void ApplyDevastationWater( inout float3 Color, float2 WorldSpacePosXZ )
{
	// UVs
	float2 MapCoordinates = WorldSpacePosXZ * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( WorldSpacePosXZ ) * DevastationTextureTiling;

	// Devastation area
	float Devastation = saturate( GetDevastation( MapCoordinates ) * WATER_DEVASTATION_MULT );
	if( Devastation <= 0.0 )
	{
		return;
	}

	Color = lerp( Color, WATER_DEVASTATION_COLOR, Devastation );
}

void ApplyDevastationShore( inout float3 Color, float2 WorldSpacePosXZ )
{
	// UVs
	float2 MapCoordinates = WorldSpacePosXZ * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( WorldSpacePosXZ ) * DevastationTextureTiling;

	// Devastation area
	float Devastation = saturate( GetDevastation( MapCoordinates ) * SHORE_DEVASTATION_MULT );
	if( Devastation <= 0.0 )
	{
		return;
	}

	Color = Overlay( Color, SHORE_DEVASTATION_COLOR, Devastation );
}

void ApplyDevastationBuilding( inout float3 Diffuse, float2 WorldSpacePosXZ, float Height, float2 UV )
{
	// UVs
	float2 MapCoordinates = WorldSpacePosXZ * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( float2( UV.x, UV.y * 2.0f ) ) * BUILDING_DEVASTATION_UV_SCALE;

	// Devastation area
	float Devastation = saturate( GetDevastation( MapCoordinates ) * BUILDING_DEVASTATION_MULT );
	if( Devastation <= 0.0 )
	{
		return;
	}

	// Diffuse
	float4 DevDiffuse = PdxTex2D( DetailTextures, float3( DetailUV, DevastationTexIndex + DevastationTexIndexOffset ) );
	float3 HSV_ = RGBtoHSV( DevDiffuse.rgb );
	HSV_.x += DevastationHue;					// Hue
	HSV_.y *= DevastationSaturation; 			// Saturation
	HSV_.z *= DevastationValue;					// Value
	DevDiffuse.rgb = HSVtoRGB( HSV_ );

	float TintBlend = ( smoothstep( BUILDING_DEVASTATION_HEIGHT_MIN, BUILDING_DEVASTATION_HEIGHT_MAX, ( 1.0 - Height ) * Devastation ) );
	Diffuse = lerp( Diffuse, DevDiffuse, TintBlend );
}

void ApplyDevastationDecal( inout float4 Diffuse, float2 WorldSpacePosXZ, float Blend )
{
	// UVs
	float2 MapCoordinates = WorldSpacePosXZ * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( WorldSpacePosXZ ) * DevastationTextureTiling;

	// Devastation area
	float Devastation = saturate( GetDevastation( MapCoordinates ) );
	if( Devastation <= 0.0 )
	{
		return;
	}

	// Terrain material blend
	float DevAlpha = PdxTex2D( DetailTextures, float3( DetailUV, DevastationTexIndex + DevastationTexIndexOffset ) ).a;
	DevAlpha = lerp( 1.0, DevAlpha, 1.0 - DevastationHeightWeight );
	float2 BlendFactors = CalcHeightBlendFactors( float2( Blend, DevAlpha ), float2( 1.0 - Devastation, Devastation ), _DetailBlendRange * DevastationHeightContrast );

	// Diffuse coloration
	float3 DevastatedDiffuse = Overlay( Diffuse.rgb, DECAL_DEVASTATION_COLOR );
	Diffuse.rgb = lerp( Diffuse.rgb, DevastatedDiffuse, saturate( Devastation * DECAL_DEVASTATION_MULT ) );

	// Return
	Diffuse.a = saturate( Diffuse.a - BlendFactors.y );
}

void ApplyDevastationMaterial( inout float4 Diffuse, inout float3 Normal, inout float4 Properties, float2 WorldSpacePosXZ )
{
	// UVs
	float2 MapCoordinates = WorldSpacePosXZ * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( WorldSpacePosXZ ) * DevastationTextureTiling;

	// Devastation area
	float Devastation = GetDevastation( MapCoordinates );
	Devastation = clamp( Devastation, 0.0, DevastationAreaMax );
	if( Devastation <= 0.0 )
	{
		return;
	}

	// Diffuse
	float4 DevDiffuse = PdxTex2D( DetailTextures, float3( DetailUV, DevastationTexIndex + DevastationTexIndexOffset ) );
	float3 HSV_ = RGBtoHSV( DevDiffuse.rgb );
	HSV_.x += DevastationHue;			// Hue
	HSV_.y *= DevastationSaturation; 	// Saturation
	HSV_.z *= DevastationValue;			// Value
	DevDiffuse.rgb = HSVtoRGB( HSV_ );

	// Normal
	float4 DevNormalRRxG = PdxTex2D( NormalTextures, float3( DetailUV, DevastationTexIndex + DevastationTexIndexOffset ) );
	float3 DevNormal = UnpackRRxGNormal( DevNormalRRxG ).xyz;

	// Properties
	float4 DevProperties = PdxTex2D( MaterialTextures, float3( DetailUV, DevastationTexIndex + DevastationTexIndexOffset ) );

	// Exclusion mask
	Devastation *= GetDevastationExclusionMask( MapCoordinates );

	// Terrain material blend
	Diffuse.a = lerp( 0.0, Diffuse.a, DevastationHeightWeight );
	DevDiffuse.a = lerp( 1.0, DevDiffuse.a, 1.0 - DevastationHeightWeight );
	float2 BlendFactors = CalcHeightBlendFactors( float2( Diffuse.a, DevDiffuse.a), float2( 1.0 - Devastation, Devastation ), _DetailBlendRange * DevastationHeightContrast );

	// Return
	Diffuse = Diffuse * BlendFactors.x + DevDiffuse * BlendFactors.y;

	// Apply VFX on the final Diffuse
	ApplyDevastationMaterialVFX(Diffuse, Devastation, DetailUV, BlendFactors );

	Normal = Normal * BlendFactors.x +  DevNormal * BlendFactors.y;
	Properties = Properties * BlendFactors.x + DevProperties * BlendFactors.y;
}

void ApplyPollutionMaterial( inout float4 Diffuse, inout float3 Normal, inout float4 Properties, float2 WorldSpacePosXZ, inout float IridescenceMask )
{
	// UVs
	float2 MapCoordinates = WorldSpacePosXZ * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( WorldSpacePosXZ ) * PollutionTextureTiling;

	// Pollution area
	float Pollution = GetPollution( MapCoordinates );
	Pollution = Remap( Pollution, 0.0, 1.0, 0.0, PollutionAreaMax );
	if( Pollution <= 0.0 )
	{
		return;
	}

	// Diffuse
	float4 PolDiffuse = PdxTex2D( DetailTextures, float3( DetailUV, PollutionTexIndex + PollutionTexIndexOffset ) );

	float3 HSV_ = RGBtoHSV( Diffuse.rgb );
	HSV_.x += PollutionHue;			// Hue
	HSV_.y *= PollutionSaturation; 	// Saturation
	HSV_.z *= PollutionValue;		// Value
	float3 PollutedTerrain = HSVtoRGB( HSV_ );

	float Noise2 = GetPollution( MapCoordinates );
	Diffuse.rgb = lerp( Diffuse.rgb, PollutedTerrain, Noise2 );

	// Normal
	float4 PolNormalRRxG = PdxTex2D( NormalTextures, float3( DetailUV, PollutionTexIndex + PollutionTexIndexOffset ) );
	float3 PolNormal = UnpackRRxGNormal( PolNormalRRxG ).xyz;

	// Properties
	float4 PolProperties = PdxTex2D( MaterialTextures, float3( DetailUV, PollutionTexIndex + PollutionTexIndexOffset ) );

	// Exclusion mask
	float PollutionMask = PdxTex2D( DevastationPollution, float2( MapCoordinates.x, MapCoordinates.y ) ).b;
	PollutionMask = smoothstep( PollutionExclusionMaskMin, PollutionExclusionMaskMax, PollutionMask );
	Pollution *= PollutionMask;

	// Terrain material blend
	Diffuse.a = lerp( 0.0, Diffuse.a, PollutionHeightWeight );
	PolDiffuse.a = lerp( 1.0, PolDiffuse.a, 1.0 - PollutionHeightWeight );
	float2 BlendFactors = CalcHeightBlendFactors( float2( Diffuse.a, PolDiffuse.a), float2( 1.0 - Pollution, Pollution ), _DetailBlendRange * PollutionHeightContrast );
	BlendFactors.x += BlendFactors.y * ( 1.0f - PollutionAlpha );
	BlendFactors.y -= BlendFactors.y * ( 1.0f - PollutionAlpha );

	// Return
	Diffuse = Diffuse * BlendFactors.x + PolDiffuse * BlendFactors.y;
	Normal = Normal * BlendFactors.x + PolNormal * BlendFactors.y;
	Properties = Properties * BlendFactors.x + PolProperties * BlendFactors.y;
	IridescenceMask = BlendFactors.y;
}

void GetIridescense( inout SMaterialProperties MaterialProps, float NdotV, PdxTextureSamplerCube EnvironmentMap, float3 WorldSpacePos, inout float IridescenceMask )
{
	// UVs
	float2 MapCoordinates = WorldSpacePos.xz * _WorldSpaceToTerrain0To1;
	float2 DetailUV = CalcDetailUV( WorldSpacePos.xz ) * PollutionTextureTiling;

	// Pollution area
	float Pollution = GetPollution( MapCoordinates );
	Pollution = Remap( Pollution, 0.0, 1.0, 0.0, PollutionAreaMax );
	if( Pollution <= 0.0 )
	{
		return;
	}

	// Iridescense noise
	float2 Coords = float2( MapCoordinates.x * 2.0, MapCoordinates.y ) * IridescenseNoiseTiling;
	float Noise = PdxTex2D( DevastationPollution, Coords ).a;
	Noise = saturate( LevelsScan( Noise, IridescensePosition, IridescenseContrast ) );

	// Weight / Opactity
	IridescenceMask = IridescenceMask * IridescenseOpacity * Noise;

	float3 PolIridescence = MaterialProps._SpecularColor;
	#ifdef HIGH_QUALITY_SHADERS
		float thickness = abs( IridescenseThicknessMin * ( 1.0 - Noise ) + IridescenseThicknessmax * Noise );

		// Specular color
		PolIridescence.r = ThinFilmReflectance( NdotV, IridescenseRed, thickness, IridescenseMediumn, IridescenseFilmn, Iridescenseinternaln ); 		// Red
		PolIridescence.g = ThinFilmReflectance( NdotV, IridescenseGreen, thickness, IridescenseMediumn, IridescenseFilmn, Iridescenseinternaln ); 	// Green
		PolIridescence.b = ThinFilmReflectance( NdotV, IridescenseBlue, thickness, IridescenseMediumn, IridescenseFilmn, Iridescenseinternaln ); 	// Blue

		MaterialProps._SpecularColor = lerp( MaterialProps._SpecularColor, PolIridescence, IridescenceMask );
		MaterialProps._PerceptualRoughness = lerp( MaterialProps._PerceptualRoughness, IridescenseRoughness, IridescenceMask );
		MaterialProps._Roughness = RoughnessFromPerceptualRoughness( MaterialProps._PerceptualRoughness );
	#else
		// Wavelengths sin function
		PolIridescence.r = sin( 2.0 * PI * Noise / ( NdotV * IridescenseRed / 1000.0 ) ) * 0.5 + 0.5;		// Red
		PolIridescence.g = sin( 2.0 * PI * Noise / ( NdotV * IridescenseGreen / 1000.0 ) ) * 0.5 + 0.5;	// Gree
		PolIridescence.b = sin( 2.0 * PI * Noise / ( NdotV * IridescenseBlue / 1000.0 ) ) * 0.5 + 0.5;	// Blue
		PolIridescence *= 0.25f;

		MaterialProps._SpecularColor = lerp( MaterialProps._SpecularColor, PolIridescence, IridescenceMask );
		MaterialProps._PerceptualRoughness = lerp( MaterialProps._PerceptualRoughness, IridescenseRoughness, IridescenceMask );
		MaterialProps._Roughness = RoughnessFromPerceptualRoughness( MaterialProps._PerceptualRoughness );
	#endif
}

void CalculateIridescenceRimlight( SMaterialProperties MaterialProps, SLightingProperties LightingProps, inout float3 SpecularLight, float IridescenceMask )
{
	float3 RimlightVector = normalize( IridescenseRimlightDirection );
	float3 H = normalize( RimlightVector - CameraLookAtDir );
	float NdotL = saturate( dot( MaterialProps._Normal, RimlightVector ) );
	float NdotH = saturate( dot( MaterialProps._Normal, H ) );
	float3 LightIntensity = LightingProps._LightIntensity * NdotL * LightingProps._ShadowTerm;

	// Sun specular light
	float D = D_GGX( NdotH, lerp( 0.03f , 1.0 , MaterialProps._Roughness ) ); 			// Remap to avoid super small and super bright highlights
	float3 SpecularLightRim = D * MaterialProps._SpecularColor * LightIntensity * IridescenseRimlightStrength;

	SpecularLight = SpecularLight + SpecularLightRim;
}




// === Main Code === 

PS_COLOR_SSAO main( VS_OUTPUT_PDX_BORDER Input, bool PDX_IsFrontFace : SV_IsFrontFace )
{
	PS_COLOR_SSAO Out;

	float4 Diffuse = PdxTex2D( BorderTexture, Input.UV );

	#ifdef COUNTRY_COLOR
		float4 CountryColor = PdxTex2DLoad0( CountryColors, int2( _UserId, 0 ) );
		Diffuse.rgb *= CountryColor.rgb;
		Diffuse.rgb *= 1.0f - _FlatmapLerp;
		Diffuse.a = lerp( Diffuse.a, 0.5f, _FlatmapLerp );
	#endif

	#ifdef IMPASSABLE_BORDER
		Diffuse.rgb *= _ImpassableTerrainColor.rgb;
	#endif

	if( _FlatmapLerp < 1.0f )
	{
		float3 Unfogged = Diffuse.rgb;
		Diffuse.rgb = ApplyFogOfWar( Diffuse.rgb, Input.WorldSpacePos );
		Diffuse.rgb = GameApplyDistanceFog( Diffuse.rgb, Input.WorldSpacePos );
		Diffuse.rgb = lerp( Diffuse.rgb, Unfogged, _FlatmapLerp );
	}

	// Close fadeout
	float FadeStart = ( _DistanceFadeStart - _DistanceFadeEnd );
	float CloseZoomBlend = FadeStart - CameraPosition.y + ( _DistanceFadeEnd );
	CloseZoomBlend = smoothstep( FadeStart, 0.0f, CloseZoomBlend );
	Diffuse.a *= CloseZoomBlend;

	Diffuse.a *= _Alpha;

	// Output
	Out.Color = Diffuse;

	// Process to mask out SSAO where borders become opaque, using SSAO color
	Out.SSAOColor = float4( 1.0f, 1.0f, 1.0f, Diffuse.a );

	return Out;
}

