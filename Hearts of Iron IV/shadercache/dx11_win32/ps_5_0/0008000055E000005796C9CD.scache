#define PIXEL_SHADER
#define MAP_SIZE_X 5632.000
#define MAP_SIZE_Y 2048.000
#define GRADIENT_BORDERS
#define MAP_POW2_X 1.000
#define MAP_POW2_Y 1.000
#define FOW_POW2_X 1.000
#define FOW_POW2_Y 1.000
#define DOUBLE_BLEND
#define PDX_DIRECTX_11

#define PDX_POSITION SV_POSITION
#define PDX_COLOR SV_TARGET

#define mod( X, Y ) ( X % Y )

#define FIX_FLIPPED_UV( X ) ( X )
#define FLIP_TEXTURE_V( vCoordinate ) ( vCoordinate )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3
#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct STextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
STextureSampler2D CreateSampler2D( Texture2D Texture, SamplerState Sampler )
{
    STextureSampler2D ret = { Texture, Sampler };
    return ret;
}

struct STextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};
STextureSamplerCube CreateSamplerCube( TextureCube Texture, SamplerState Sampler )
{
    STextureSamplerCube ret = { Texture, Sampler };
    return ret;
}

#define TextureSampler2D STextureSampler2D

#define sampler2DShadow STextureSampler2D
#define sampler2D STextureSampler2D

#define tex2D(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define tex2Dlod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, (uv_lod).w)
#define tex2Dlod0(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, 0)
#define tex2Dbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xy, (uv_bias).w)
#define tex2Dproj(samp,uv_proj) samp._Texture.SampleLevel(samp._Sampler, (uv_proj).xy / (uv_proj).w, 0)
#define tex2Dgrad(samp,uv,ddx,ddy) samp._Texture.SampleGrad(samp._Sampler, uv, ddx, ddy)

#define texCUBE(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define texCUBElod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xyz, (uv_lod).w)
#define texCUBEbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xyz, (uv_bias).w)

float fmod_loop( float x, float y )
{
  return x - y * floor( x / y );
}

Texture2D BaseLUT1_Texture : register(t0);
SamplerState BaseLUT1_Sampler : register(s0);
#define BaseLUT1 CreateSampler2D(BaseLUT1_Texture, BaseLUT1_Sampler)
Texture2D BaseLUT2_Texture : register(t1);
SamplerState BaseLUT2_Sampler : register(s1);
#define BaseLUT2 CreateSampler2D(BaseLUT2_Texture, BaseLUT2_Sampler)
Texture2D BlendLUT1_Texture : register(t2);
SamplerState BlendLUT1_Sampler : register(s2);
#define BlendLUT1 CreateSampler2D(BlendLUT1_Texture, BlendLUT1_Sampler)
Texture2D BlendLUT2_Texture : register(t3);
SamplerState BlendLUT2_Sampler : register(s3);
#define BlendLUT2 CreateSampler2D(BlendLUT2_Texture, BlendLUT2_Sampler)
cbuffer dx11_cb0 : register(b0)
{
	float2 InvWindowSize;
	float vBlendFactor1;
	float vBlendFactor2;
}
struct VS_INPUT
{
	int2 position : POSITION;
};
struct VS_OUTPUT
{
	float4 position : PDX_POSITION;
	float2 uv : TEXCOORD0;
};
		float4 main( VS_OUTPUT Input ) : PDX_COLOR
		{
			float3 base = tex2Dlod0( BaseLUT1, Input.uv ).rgb;
			float3 blend = tex2Dlod0( BlendLUT1, Input.uv ).rgb;
			
		#ifdef DOUBLE_BLEND
			base = lerp(base, tex2Dlod0( BaseLUT2, Input.uv ).rgb, vBlendFactor1);
			blend = lerp(blend, tex2Dlod0( BlendLUT2, Input.uv ).rgb, vBlendFactor1);
		#endif
			
			//return float4( 1, 0, 0, 1 );
			return float4( lerp(base, blend, vBlendFactor2), 1 );
		}
	