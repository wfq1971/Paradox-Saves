#define VERTEX_SHADER
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

float fmod_loop( float x, float y )
{
  return x - y * floor( x / y );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float4x4 WorldViewProjectionMatrix : register(c0);
float4 FrontColor : register(c4);
float4 BackColor : register(c5);
float CurrentState : register(c6);

struct VS_INPUT
{
	float4 Position : POSITION;
	float2 TexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 Position : PDX_POSITION;
	float2 TexCoord0 : TEXCOORD0;
};
VS_OUTPUT main( const VS_INPUT Input )
		{
			VS_OUTPUT Output;
		   	Output.Position = mul( WorldViewProjectionMatrix, Input.Position );
			Output.TexCoord0 = Input.TexCoord;
			Output.TexCoord0.y = -Output.TexCoord0.y;
			return Output;
		}
	