#define PIXEL_SHADER
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

float fmod_loop( float x, float y )
{
  return x - y * floor( x / y );
}

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
sampler MapTexture : register(s0);
float4x4 WorldViewProjectionMatrix : register(c0);
float4 Color : register(c4);
float4 BATCHED_VARIABLES_1 : register(c5);
#define Offset BATCHED_VARIABLES_1.xy
#define NextOffset BATCHED_VARIABLES_1.zw
float4 BATCHED_VARIABLES_2 : register(c6);
#define Time BATCHED_VARIABLES_2.x
#define AnimationTime BATCHED_VARIABLES_2.y

struct VS_INPUT
{
	float3 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord : TEXCOORD0;
};

// These range from 0.0 to 1.0, where 1.0 is the full duration of a sprite frame.
static const float FADE_IN_DURATION = 0.05;
static const float FADE_OUT_DURATION = 0.1;

float4 main( VS_OUTPUT v ) : PDX_COLOR
		{
			float4 OutColor = tex2D( MapTexture, v.vTexCoord );
			OutColor *= min( AnimationTime / FADE_IN_DURATION, 1.0) * min( ( 1.0 - AnimationTime ) / FADE_OUT_DURATION, 1.0);
			OutColor *= Color;
			return OutColor;
		}
	